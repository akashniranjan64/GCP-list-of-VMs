lt-aps-tools-lwr
vlapsdv001
true
***********************
lt-aps-tools-lwr
vlapsdv002
true
***********************
lt-aps-tools-lwr
vlapsdv003
true
***********************
lt-aps-tools-lwr
vlapsdv004
true
***********************
lt-aps-tools-lwr
vlapsdv006
true
***********************
lt-aps-tools-lwr
vwapsdv001
true
***********************
lt-aps-tools-lwr
vwapsdv002
true
***********************
lt-aps-tools-lwr
vwapsdv004
true
***********************
lt-aps-tools-td-etl-lwr
vltdetldv001
true
***********************
lt-dih-etl-clients-sit
vldihsit001
true
***********************
lt-dih-etl-clients-sit
vldihsit002
true
***********************
lt-dih-etl-clients-sit
vldihsit003
true
***********************
lt-dih-etl-clients-sit
vldihsit004
true
***********************
lt-dih-etl-clients-sit
vldihsit005

***********************
lt-dih-etl-clients-sit
vldihsit006

***********************
lt-dih-etl-clients-sit
vldihsit010

***********************
lt-dih-etl-clients-sit
vldihsit011

***********************
lt-dih-etl-clients-sit
vwdihsit001
true
***********************
lt-dih-etl-clients-sit
vwdihsit002
true
***********************
playground-aps-sre-sb
vm-scheduling
true
***********************
{'kind': 'compute#instance', 'id': '4983977029527850314', 'creationTimestamp': '2022-09-09T10:11:02.791-07:00', 'name': 'dpdiadispm1t1001-m', 'tags': {'items': ['allow-internet', 'dataproc-notebook-vm', 'dproc-internal'], 'fingerprint': 'Zi7AyqiaFVA='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-gfpre-dprco-nane', 'networkIP': '10.194.11.57', 'name': 'nic0', 'fingerprint': '8Fi9a66T3JI=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dpdiadispm1t1001-m', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '300'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'mJxN6OM65l8=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas==1.0.1 numpy==1.15.0 statsmodels==0.11.0 scipy==1.4.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/'}, {'key': 'dataproc-cluster-name', 'value': 'dpdiadispm1t1001'}, {'key': 'dataproc-cluster-uuid', 'value': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '1'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '300'}, {'key': 'dataproc-master', 'value': 'dpdiadispm1t1001-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '2'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/dpdiadispm1t1001-m'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV1Fv4jgQfudXIO3rxZukBVqkPLDb7LV3LVSkPd2ekJCxDbiN46ztUNhff+MktAmYdldISQB7PPN9M99MPn1NC22Y6uZK5kwZznTn0zfFuwnLu/5lN/CHQTD0g+791UM39MOwQ7HBsJjMhvsnlMrVimcrpA0mz1TxDVPoSS7QDqsMEZkZzDP4iWV4kbLIqIJ11nSpwcJSowwLlknKkGawlGK1Q2tjcg9TqpjWkY/Kz2x4edG/6FiTs2FpGP6VhSJM4AyvwLw1Uj97K4UJWxapR8GoEFxrLjPPcMFkYTw4SUcX/XPf7wiIgNHZsLoXhJWO1486lS8QkzIQhMhTZhiFddaly55jZ30TTEgIQiyis6DXd+FlIVEyRQbrZ9j1o2DaIJ4BDRucIsHTlOuo54N7bzDZzSVMFhyNXOj0XGfBZbtDAEpmagJe2EJL8syMrqhwO6iJ2uXGbt9wekCea0eVRp4xKUSUS2U8S5KHieEbbnbVRiIVmw0hmpVGixScQJr/ZFFwdh4Gg0HYoheSysOrlWIrbCx5TQecrK25NhZ4BZRDBu6Q/crAMww4SbVCOMdkDQBiKmWO3vZuQrTW6LrangAJTN2yDUvpIjHYsMSasT9z8nZy6SLOm2aweE1JRPLC29hodRS44HqR6hlAJQCaFEA9N8giBbAjASRH08fx/Ev8bTKN50k8/efma5x8cLRNc5xRT+bAq/ev2Ia98Fz8TrXWj02cdY7V82xY3lDBkeU18jsUoCJ5E354Qk94g9Hr8YP+hfP0Vu5roxj4TgtVcmwlIOpD2p/M4wW4zDKKOI2Wy8WKm8FSL4j+KRfixaSK0p3kvJlFGhinRQpxCbzlohAeTiHxqpSCEg3CfnjuKjNXgTmLec1AIBYMGzjBlgBalhWdkV0Zzpnv1roynSAXM2qdI7LITBScLHinO+cNdzQHgeJLziiEjFPL7/sFYxn7FaUSucxAO3SZnxsoh+ipyHe2YzxnctstafFKeelUhQWFupkNr0dXk8n9/Gr0MBpPruL55P4hKfOiF4SipQOCGWzPQ6SsztrrJU41O0EklIuDyObiRitw1uS5K9aavt+qyVLjyoC/j6bjuQ31bjQe/RlP59fx6D65+S+Ogt5Zvyaghc1fky/z65vkYTL9bu01t5xdnPsdYvUKpNN7Df0Iiv0SpKQ0iLIlLlKDpALBhgzwcplysgMsuXIF3KoNr0oGr9CM2gbXrv3GUgvFt9HNtL2gFo/KSOm/s/qb3UizsisTKZ85i+ZbrZZtm2zLSAHiC1yAVmUEiAurFRWOyf1o+jekWHw3Gc/v4Dr9fnSyq5XUOUZPNrN2z6S5hN4clX13Nvz8OQMRXEMhK06wV35hkDkBavRCWVC0knKVMltBn9thVfot9lj1S4ePFHXf145F9USeHynEhR/2P56ztHPQunRtPLl8EBxky48UkYVs4+yWIChK9Noo3ezXOPUGZ5fOnGqnMcRGCqWAOg+aGlgN3tFflZPXeGhOOQYechGYwPcDT1gIe872LSSog1SHXfRk69xXB95OmYYSTcqp5zIE5t2wtGk/2cpbzZRnMD1yWqW4c5p041uhH57o6m89IvBDp2665okmEgca+XBzF9/ejGOn5r2ZrzWiCR8TOUjdE1bNYbKe5rRO9+lmy9dIIlMdPdwmm+CP8or29/DQoWmcTB6nX4+F+9AjAZa5gMKZyyzd1S3qmL+KDIk0SIPFLWy1Vjtp7SdVI70V0R+Vid1RvnaEwbuvKzoavD+f1ENnez7xAtfMwXPiHDkGvzoAvzNTHL+RLHAG74e1HJ9SwoNEXENKAPtwRUtmyLqCHQoCMsW2lSiDueXDmaBueo5B8FUqYKpiME+BHx+Lhet90inkVUWf0FinxL4zFOfFAvo8WkttrJ23TnV6RPaoNN6HjaxqYTARKCs0li/oZi4/yhRlBgzpvTa+KVA11LvFJ842aHIfj7/cjpL5+PFu/nA9jUdXSeRK9frWahkuCFszdeh3/geHXyDg'}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'false'}, {'key': 'dataproc-notebooks-url', 'value': 'https://ffbgit7fsbcszobmwtlrddyoii-dot-northamerica-northeast1.dataproc.googleusercontent.com/gateway/default/jupyter/'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Master'}, {'key': 'node-pool-roles', 'value': 'MASTER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write', 'https://www.googleapis.com/auth/sqlservice.admin']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dpdiadispm1t1001-m', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'owner': 'aps-cloud', 'environment': 'upr', 'goog-dataproc-cluster-uuid': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad', 'application': 'pm1t1', 'created_on': '20220909171057', 'goog-dataproc-cluster-name': 'dpdiadispm1t1001', 'goog-dataproc-location': 'northamerica-northeast1', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'OKvfFKEbc3U=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': '1w0-Kxcv9nE=', 'lastStartTimestamp': '2023-02-22T08:12:10.108-08:00', 'lastStopTimestamp': '2023-01-31T11:01:46.251-08:00'}
{'kind': 'compute#instance', 'id': '6184644573167799626', 'creationTimestamp': '2022-09-09T10:11:02.884-07:00', 'name': 'dpdiadispm1t1001-w-0', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-gfpre-dprco-nane', 'networkIP': '10.194.11.26', 'name': 'nic0', 'fingerprint': 'FOHBnpBnLeg=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dpdiadispm1t1001-w-0', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '500'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'msW8q9gkpTc=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas==1.0.1 numpy==1.15.0 statsmodels==0.11.0 scipy==1.4.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/'}, {'key': 'dataproc-cluster-name', 'value': 'dpdiadispm1t1001'}, {'key': 'dataproc-cluster-uuid', 'value': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '1'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '300'}, {'key': 'dataproc-master', 'value': 'dpdiadispm1t1001-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '2'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/dpdiadispm1t1001-w-0'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV1Fv4jgQfudXIO3rxZukBVqkPLDb7LV3LVSkPd2ekJCxDbiN46ztUNhff+MktAmYdldISQB7PPN9M99MPn1NC22Y6uZK5kwZznTn0zfFuwnLu/5lN/CHQTD0g+791UM39MOwQ7HBsJjMhvsnlMrVimcrpA0mz1TxDVPoSS7QDqsMEZkZzDP4iWV4kbLIqIJ11nSpwcJSowwLlknKkGawlGK1Q2tjcg9TqpjWkY/Kz2x4edG/6FiTs2FpGP6VhSJM4AyvwLw1Uj97K4UJWxapR8GoEFxrLjPPcMFkYTw4SUcX/XPf7wiIgNHZsLoXhJWO1486lS8QkzIQhMhTZhiFddaly55jZ30TTEgIQiyis6DXd+FlIVEyRQbrZ9j1o2DaIJ4BDRucIsHTlOuo54N7bzDZzSVMFhyNXOj0XGfBZbtDAEpmagJe2EJL8syMrqhwO6iJ2uXGbt9wekCea0eVRp4xKUSUS2U8S5KHieEbbnbVRiIVmw0hmpVGixScQJr/ZFFwdh4Gg0HYoheSysOrlWIrbCx5TQecrK25NhZ4BZRDBu6Q/crAMww4SbVCOMdkDQBiKmWO3vZuQrTW6LrangAJTN2yDUvpIjHYsMSasT9z8nZy6SLOm2aweE1JRPLC29hodRS44HqR6hlAJQCaFEA9N8giBbAjASRH08fx/Ev8bTKN50k8/efma5x8cLRNc5xRT+bAq/ev2Ia98Fz8TrXWj02cdY7V82xY3lDBkeU18jsUoCJ5E354Qk94g9Hr8YP+hfP0Vu5roxj4TgtVcmwlIOpD2p/M4wW4zDKKOI2Wy8WKm8FSL4j+KRfixaSK0p3kvJlFGhinRQpxCbzlohAeTiHxqpSCEg3CfnjuKjNXgTmLec1AIBYMGzjBlgBalhWdkV0Zzpnv1roynSAXM2qdI7LITBScLHinO+cNdzQHgeJLziiEjFPL7/sFYxn7FaUSucxAO3SZnxsoh+ipyHe2YzxnctstafFKeelUhQWFupkNr0dXk8n9/Gr0MBpPruL55P4hKfOiF4SipQOCGWzPQ6SsztrrJU41O0EklIuDyObiRitw1uS5K9aavt+qyVLjyoC/j6bjuQ31bjQe/RlP59fx6D65+S+Ogt5Zvyaghc1fky/z65vkYTL9bu01t5xdnPsdYvUKpNN7Df0Iiv0SpKQ0iLIlLlKDpALBhgzwcplysgMsuXIF3KoNr0oGr9CM2gbXrv3GUgvFt9HNtL2gFo/KSOm/s/qb3UizsisTKZ85i+ZbrZZtm2zLSAHiC1yAVmUEiAurFRWOyf1o+jekWHw3Gc/v4Dr9fnSyq5XUOUZPNrN2z6S5hN4clX13Nvz8OQMRXEMhK06wV35hkDkBavRCWVC0knKVMltBn9thVfot9lj1S4ePFHXf145F9USeHynEhR/2P56ztHPQunRtPLl8EBxky48UkYVs4+yWIChK9Noo3ezXOPUGZ5fOnGqnMcRGCqWAOg+aGlgN3tFflZPXeGhOOQYechGYwPcDT1gIe872LSSog1SHXfRk69xXB95OmYYSTcqp5zIE5t2wtGk/2cpbzZRnMD1yWqW4c5p041uhH57o6m89IvBDp2665okmEgca+XBzF9/ejGOn5r2ZrzWiCR8TOUjdE1bNYbKe5rRO9+lmy9dIIlMdPdwmm+CP8or29/DQoWmcTB6nX4+F+9AjAZa5gMKZyyzd1S3qmL+KDIk0SIPFLWy1Vjtp7SdVI70V0R+Vid1RvnaEwbuvKzoavD+f1ENnez7xAtfMwXPiHDkGvzoAvzNTHL+RLHAG74e1HJ9SwoNEXENKAPtwRUtmyLqCHQoCMsW2lSiDueXDmaBueo5B8FUqYKpiME+BHx+Lhet90inkVUWf0FinxL4zFOfFAvo8WkttrJ23TnV6RPaoNN6HjaxqYTARKCs0li/oZi4/yhRlBgzpvTa+KVA11LvFJ842aHIfj7/cjpL5+PFu/nA9jUdXSeRK9frWahkuCFszdeh3/geHXyDg'}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-pool-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write', 'https://www.googleapis.com/auth/sqlservice.admin']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dpdiadispm1t1001-w-0', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'owner': 'aps-cloud', 'environment': 'upr', 'goog-dataproc-cluster-uuid': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad', 'application': 'pm1t1', 'created_on': '20220909171057', 'goog-dataproc-cluster-name': 'dpdiadispm1t1001', 'goog-dataproc-location': 'northamerica-northeast1', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'OKvfFKEbc3U=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': '81FxUv8pAmo=', 'lastStartTimestamp': '2023-02-22T08:12:04.109-08:00', 'lastStopTimestamp': '2023-01-31T11:03:01.950-08:00'}
{'kind': 'compute#instance', 'id': '123744406186937674', 'creationTimestamp': '2022-09-09T10:11:02.776-07:00', 'name': 'dpdiadispm1t1001-w-1', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-gfpre-dprco-nane', 'networkIP': '10.194.11.40', 'name': 'nic0', 'fingerprint': 'epCq24O4Gxo=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dpdiadispm1t1001-w-1', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '500'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'Qo_2c7ooQmQ=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas==1.0.1 numpy==1.15.0 statsmodels==0.11.0 scipy==1.4.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/'}, {'key': 'dataproc-cluster-name', 'value': 'dpdiadispm1t1001'}, {'key': 'dataproc-cluster-uuid', 'value': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '1'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '300'}, {'key': 'dataproc-master', 'value': 'dpdiadispm1t1001-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '2'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/dpdiadispm1t1001-w-1'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV1Fv4jgQfudXIO3rxZukBVqkPLDb7LV3LVSkPd2ekJCxDbiN46ztUNhff+MktAmYdldISQB7PPN9M99MPn1NC22Y6uZK5kwZznTn0zfFuwnLu/5lN/CHQTD0g+791UM39MOwQ7HBsJjMhvsnlMrVimcrpA0mz1TxDVPoSS7QDqsMEZkZzDP4iWV4kbLIqIJ11nSpwcJSowwLlknKkGawlGK1Q2tjcg9TqpjWkY/Kz2x4edG/6FiTs2FpGP6VhSJM4AyvwLw1Uj97K4UJWxapR8GoEFxrLjPPcMFkYTw4SUcX/XPf7wiIgNHZsLoXhJWO1486lS8QkzIQhMhTZhiFddaly55jZ30TTEgIQiyis6DXd+FlIVEyRQbrZ9j1o2DaIJ4BDRucIsHTlOuo54N7bzDZzSVMFhyNXOj0XGfBZbtDAEpmagJe2EJL8syMrqhwO6iJ2uXGbt9wekCea0eVRp4xKUSUS2U8S5KHieEbbnbVRiIVmw0hmpVGixScQJr/ZFFwdh4Gg0HYoheSysOrlWIrbCx5TQecrK25NhZ4BZRDBu6Q/crAMww4SbVCOMdkDQBiKmWO3vZuQrTW6LrangAJTN2yDUvpIjHYsMSasT9z8nZy6SLOm2aweE1JRPLC29hodRS44HqR6hlAJQCaFEA9N8giBbAjASRH08fx/Ev8bTKN50k8/efma5x8cLRNc5xRT+bAq/ev2Ia98Fz8TrXWj02cdY7V82xY3lDBkeU18jsUoCJ5E354Qk94g9Hr8YP+hfP0Vu5roxj4TgtVcmwlIOpD2p/M4wW4zDKKOI2Wy8WKm8FSL4j+KRfixaSK0p3kvJlFGhinRQpxCbzlohAeTiHxqpSCEg3CfnjuKjNXgTmLec1AIBYMGzjBlgBalhWdkV0Zzpnv1roynSAXM2qdI7LITBScLHinO+cNdzQHgeJLziiEjFPL7/sFYxn7FaUSucxAO3SZnxsoh+ipyHe2YzxnctstafFKeelUhQWFupkNr0dXk8n9/Gr0MBpPruL55P4hKfOiF4SipQOCGWzPQ6SsztrrJU41O0EklIuDyObiRitw1uS5K9aavt+qyVLjyoC/j6bjuQ31bjQe/RlP59fx6D65+S+Ogt5Zvyaghc1fky/z65vkYTL9bu01t5xdnPsdYvUKpNN7Df0Iiv0SpKQ0iLIlLlKDpALBhgzwcplysgMsuXIF3KoNr0oGr9CM2gbXrv3GUgvFt9HNtL2gFo/KSOm/s/qb3UizsisTKZ85i+ZbrZZtm2zLSAHiC1yAVmUEiAurFRWOyf1o+jekWHw3Gc/v4Dr9fnSyq5XUOUZPNrN2z6S5hN4clX13Nvz8OQMRXEMhK06wV35hkDkBavRCWVC0knKVMltBn9thVfot9lj1S4ePFHXf145F9USeHynEhR/2P56ztHPQunRtPLl8EBxky48UkYVs4+yWIChK9Noo3ezXOPUGZ5fOnGqnMcRGCqWAOg+aGlgN3tFflZPXeGhOOQYechGYwPcDT1gIe872LSSog1SHXfRk69xXB95OmYYSTcqp5zIE5t2wtGk/2cpbzZRnMD1yWqW4c5p041uhH57o6m89IvBDp2665okmEgca+XBzF9/ejGOn5r2ZrzWiCR8TOUjdE1bNYbKe5rRO9+lmy9dIIlMdPdwmm+CP8or29/DQoWmcTB6nX4+F+9AjAZa5gMKZyyzd1S3qmL+KDIk0SIPFLWy1Vjtp7SdVI70V0R+Vid1RvnaEwbuvKzoavD+f1ENnez7xAtfMwXPiHDkGvzoAvzNTHL+RLHAG74e1HJ9SwoNEXENKAPtwRUtmyLqCHQoCMsW2lSiDueXDmaBueo5B8FUqYKpiME+BHx+Lhet90inkVUWf0FinxL4zFOfFAvo8WkttrJ23TnV6RPaoNN6HjaxqYTARKCs0li/oZi4/yhRlBgzpvTa+KVA11LvFJ842aHIfj7/cjpL5+PFu/nA9jUdXSeRK9frWahkuCFszdeh3/geHXyDg'}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-pool-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write', 'https://www.googleapis.com/auth/sqlservice.admin']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dpdiadispm1t1001-w-1', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'owner': 'aps-cloud', 'environment': 'upr', 'goog-dataproc-cluster-uuid': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad', 'application': 'pm1t1', 'created_on': '20220909171057', 'goog-dataproc-cluster-name': 'dpdiadispm1t1001', 'goog-dataproc-location': 'northamerica-northeast1', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'OKvfFKEbc3U=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'b92ObIczmDs=', 'lastStartTimestamp': '2023-02-22T08:12:01.998-08:00', 'lastStopTimestamp': '2023-01-31T11:03:02.534-08:00'}
{'kind': 'compute#instance', 'id': '2136322796401107144', 'creationTimestamp': '2022-12-21T06:54:32.684-08:00', 'name': 'shubham-m-no-idle-deletion-m', 'tags': {'items': ['allow-internet', 'dataproc-notebook-vm', 'dproc-internal'], 'fingerprint': 'Zi7AyqiaFVA='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.45', 'name': 'nic0', 'fingerprint': 'WSKwgpKItMA=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-m', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'kSmgz51NfiM=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'false'}, {'key': 'dataproc-notebooks-url', 'value': 'https://3jvljjqxubgjnfk7omjhtrylhm-dot-northamerica-northeast1.dataproc.googleusercontent.com/gateway/default/jupyter/'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Master'}, {'key': 'node-group-roles', 'value': 'MASTER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-m', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'fakfliNmb2U=', 'lastStartTimestamp': '2023-05-10T09:04:19.517-07:00', 'lastStopTimestamp': '2023-05-11T10:55:36.532-07:00'}
{'kind': 'compute#instance', 'id': '1130920696718729416', 'creationTimestamp': '2022-12-21T06:54:32.497-08:00', 'name': 'shubham-m-no-idle-deletion-w-0', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.36', 'name': 'nic0', 'fingerprint': 'tH18lYToEaI=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-0', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'tW1DfDxiNhA=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-0'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-0', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'k1leUpgfcCM=', 'lastStartTimestamp': '2023-05-10T09:04:12.604-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.823-07:00'}
{'kind': 'compute#instance', 'id': '120869359362941128', 'creationTimestamp': '2022-12-21T06:54:32.256-08:00', 'name': 'shubham-m-no-idle-deletion-w-1', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.44', 'name': 'nic0', 'fingerprint': '2cSQCEVmoNo=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-1', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'qPaBavlPw9A=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-1'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-1', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'pCkCP9RwVLs=', 'lastStartTimestamp': '2023-05-10T09:04:12.312-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.800-07:00'}
{'kind': 'compute#instance', 'id': '4412906757522628808', 'creationTimestamp': '2022-12-21T06:54:32.510-08:00', 'name': 'shubham-m-no-idle-deletion-w-2', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.38', 'name': 'nic0', 'fingerprint': 'sUzwrLqg4Hk=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-2', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'CZgyayO0BE8=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-2'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-2', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'OUNGs-lakac=', 'lastStartTimestamp': '2023-05-10T09:04:12.789-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.748-07:00'}
{'kind': 'compute#instance', 'id': '4595180608309600456', 'creationTimestamp': '2022-12-21T06:54:32.404-08:00', 'name': 'shubham-m-no-idle-deletion-w-3', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.31', 'name': 'nic0', 'fingerprint': 'taIViAjGiyg=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-3', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'S9PSoVZ4Q_Y=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-3'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-3', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'xTi4USz2OFw=', 'lastStartTimestamp': '2023-05-10T09:04:12.807-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.938-07:00'}
***********************
{'kind': 'compute#instance', 'id': '4983977029527850314', 'creationTimestamp': '2022-09-09T10:11:02.791-07:00', 'name': 'dpdiadispm1t1001-m', 'tags': {'items': ['allow-internet', 'dataproc-notebook-vm', 'dproc-internal'], 'fingerprint': 'Zi7AyqiaFVA='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-gfpre-dprco-nane', 'networkIP': '10.194.11.57', 'name': 'nic0', 'fingerprint': '8Fi9a66T3JI=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dpdiadispm1t1001-m', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '300'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'mJxN6OM65l8=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas==1.0.1 numpy==1.15.0 statsmodels==0.11.0 scipy==1.4.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/'}, {'key': 'dataproc-cluster-name', 'value': 'dpdiadispm1t1001'}, {'key': 'dataproc-cluster-uuid', 'value': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '1'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '300'}, {'key': 'dataproc-master', 'value': 'dpdiadispm1t1001-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '2'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/dpdiadispm1t1001-m'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV1Fv4jgQfudXIO3rxZukBVqkPLDb7LV3LVSkPd2ekJCxDbiN46ztUNhff+MktAmYdldISQB7PPN9M99MPn1NC22Y6uZK5kwZznTn0zfFuwnLu/5lN/CHQTD0g+791UM39MOwQ7HBsJjMhvsnlMrVimcrpA0mz1TxDVPoSS7QDqsMEZkZzDP4iWV4kbLIqIJ11nSpwcJSowwLlknKkGawlGK1Q2tjcg9TqpjWkY/Kz2x4edG/6FiTs2FpGP6VhSJM4AyvwLw1Uj97K4UJWxapR8GoEFxrLjPPcMFkYTw4SUcX/XPf7wiIgNHZsLoXhJWO1486lS8QkzIQhMhTZhiFddaly55jZ30TTEgIQiyis6DXd+FlIVEyRQbrZ9j1o2DaIJ4BDRucIsHTlOuo54N7bzDZzSVMFhyNXOj0XGfBZbtDAEpmagJe2EJL8syMrqhwO6iJ2uXGbt9wekCea0eVRp4xKUSUS2U8S5KHieEbbnbVRiIVmw0hmpVGixScQJr/ZFFwdh4Gg0HYoheSysOrlWIrbCx5TQecrK25NhZ4BZRDBu6Q/crAMww4SbVCOMdkDQBiKmWO3vZuQrTW6LrangAJTN2yDUvpIjHYsMSasT9z8nZy6SLOm2aweE1JRPLC29hodRS44HqR6hlAJQCaFEA9N8giBbAjASRH08fx/Ev8bTKN50k8/efma5x8cLRNc5xRT+bAq/ev2Ia98Fz8TrXWj02cdY7V82xY3lDBkeU18jsUoCJ5E354Qk94g9Hr8YP+hfP0Vu5roxj4TgtVcmwlIOpD2p/M4wW4zDKKOI2Wy8WKm8FSL4j+KRfixaSK0p3kvJlFGhinRQpxCbzlohAeTiHxqpSCEg3CfnjuKjNXgTmLec1AIBYMGzjBlgBalhWdkV0Zzpnv1roynSAXM2qdI7LITBScLHinO+cNdzQHgeJLziiEjFPL7/sFYxn7FaUSucxAO3SZnxsoh+ipyHe2YzxnctstafFKeelUhQWFupkNr0dXk8n9/Gr0MBpPruL55P4hKfOiF4SipQOCGWzPQ6SsztrrJU41O0EklIuDyObiRitw1uS5K9aavt+qyVLjyoC/j6bjuQ31bjQe/RlP59fx6D65+S+Ogt5Zvyaghc1fky/z65vkYTL9bu01t5xdnPsdYvUKpNN7Df0Iiv0SpKQ0iLIlLlKDpALBhgzwcplysgMsuXIF3KoNr0oGr9CM2gbXrv3GUgvFt9HNtL2gFo/KSOm/s/qb3UizsisTKZ85i+ZbrZZtm2zLSAHiC1yAVmUEiAurFRWOyf1o+jekWHw3Gc/v4Dr9fnSyq5XUOUZPNrN2z6S5hN4clX13Nvz8OQMRXEMhK06wV35hkDkBavRCWVC0knKVMltBn9thVfot9lj1S4ePFHXf145F9USeHynEhR/2P56ztHPQunRtPLl8EBxky48UkYVs4+yWIChK9Noo3ezXOPUGZ5fOnGqnMcRGCqWAOg+aGlgN3tFflZPXeGhOOQYechGYwPcDT1gIe872LSSog1SHXfRk69xXB95OmYYSTcqp5zIE5t2wtGk/2cpbzZRnMD1yWqW4c5p041uhH57o6m89IvBDp2665okmEgca+XBzF9/ejGOn5r2ZrzWiCR8TOUjdE1bNYbKe5rRO9+lmy9dIIlMdPdwmm+CP8or29/DQoWmcTB6nX4+F+9AjAZa5gMKZyyzd1S3qmL+KDIk0SIPFLWy1Vjtp7SdVI70V0R+Vid1RvnaEwbuvKzoavD+f1ENnez7xAtfMwXPiHDkGvzoAvzNTHL+RLHAG74e1HJ9SwoNEXENKAPtwRUtmyLqCHQoCMsW2lSiDueXDmaBueo5B8FUqYKpiME+BHx+Lhet90inkVUWf0FinxL4zFOfFAvo8WkttrJ23TnV6RPaoNN6HjaxqYTARKCs0li/oZi4/yhRlBgzpvTa+KVA11LvFJ842aHIfj7/cjpL5+PFu/nA9jUdXSeRK9frWahkuCFszdeh3/geHXyDg'}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'false'}, {'key': 'dataproc-notebooks-url', 'value': 'https://ffbgit7fsbcszobmwtlrddyoii-dot-northamerica-northeast1.dataproc.googleusercontent.com/gateway/default/jupyter/'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Master'}, {'key': 'node-pool-roles', 'value': 'MASTER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write', 'https://www.googleapis.com/auth/sqlservice.admin']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dpdiadispm1t1001-m', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'owner': 'aps-cloud', 'environment': 'upr', 'goog-dataproc-cluster-uuid': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad', 'application': 'pm1t1', 'created_on': '20220909171057', 'goog-dataproc-cluster-name': 'dpdiadispm1t1001', 'goog-dataproc-location': 'northamerica-northeast1', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'OKvfFKEbc3U=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': '1w0-Kxcv9nE=', 'lastStartTimestamp': '2023-02-22T08:12:10.108-08:00', 'lastStopTimestamp': '2023-01-31T11:01:46.251-08:00'}
{'kind': 'compute#instance', 'id': '6184644573167799626', 'creationTimestamp': '2022-09-09T10:11:02.884-07:00', 'name': 'dpdiadispm1t1001-w-0', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-gfpre-dprco-nane', 'networkIP': '10.194.11.26', 'name': 'nic0', 'fingerprint': 'FOHBnpBnLeg=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dpdiadispm1t1001-w-0', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '500'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'msW8q9gkpTc=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas==1.0.1 numpy==1.15.0 statsmodels==0.11.0 scipy==1.4.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/'}, {'key': 'dataproc-cluster-name', 'value': 'dpdiadispm1t1001'}, {'key': 'dataproc-cluster-uuid', 'value': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '1'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '300'}, {'key': 'dataproc-master', 'value': 'dpdiadispm1t1001-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '2'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/dpdiadispm1t1001-w-0'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV1Fv4jgQfudXIO3rxZukBVqkPLDb7LV3LVSkPd2ekJCxDbiN46ztUNhff+MktAmYdldISQB7PPN9M99MPn1NC22Y6uZK5kwZznTn0zfFuwnLu/5lN/CHQTD0g+791UM39MOwQ7HBsJjMhvsnlMrVimcrpA0mz1TxDVPoSS7QDqsMEZkZzDP4iWV4kbLIqIJ11nSpwcJSowwLlknKkGawlGK1Q2tjcg9TqpjWkY/Kz2x4edG/6FiTs2FpGP6VhSJM4AyvwLw1Uj97K4UJWxapR8GoEFxrLjPPcMFkYTw4SUcX/XPf7wiIgNHZsLoXhJWO1486lS8QkzIQhMhTZhiFddaly55jZ30TTEgIQiyis6DXd+FlIVEyRQbrZ9j1o2DaIJ4BDRucIsHTlOuo54N7bzDZzSVMFhyNXOj0XGfBZbtDAEpmagJe2EJL8syMrqhwO6iJ2uXGbt9wekCea0eVRp4xKUSUS2U8S5KHieEbbnbVRiIVmw0hmpVGixScQJr/ZFFwdh4Gg0HYoheSysOrlWIrbCx5TQecrK25NhZ4BZRDBu6Q/crAMww4SbVCOMdkDQBiKmWO3vZuQrTW6LrangAJTN2yDUvpIjHYsMSasT9z8nZy6SLOm2aweE1JRPLC29hodRS44HqR6hlAJQCaFEA9N8giBbAjASRH08fx/Ev8bTKN50k8/efma5x8cLRNc5xRT+bAq/ev2Ia98Fz8TrXWj02cdY7V82xY3lDBkeU18jsUoCJ5E354Qk94g9Hr8YP+hfP0Vu5roxj4TgtVcmwlIOpD2p/M4wW4zDKKOI2Wy8WKm8FSL4j+KRfixaSK0p3kvJlFGhinRQpxCbzlohAeTiHxqpSCEg3CfnjuKjNXgTmLec1AIBYMGzjBlgBalhWdkV0Zzpnv1roynSAXM2qdI7LITBScLHinO+cNdzQHgeJLziiEjFPL7/sFYxn7FaUSucxAO3SZnxsoh+ipyHe2YzxnctstafFKeelUhQWFupkNr0dXk8n9/Gr0MBpPruL55P4hKfOiF4SipQOCGWzPQ6SsztrrJU41O0EklIuDyObiRitw1uS5K9aavt+qyVLjyoC/j6bjuQ31bjQe/RlP59fx6D65+S+Ogt5Zvyaghc1fky/z65vkYTL9bu01t5xdnPsdYvUKpNN7Df0Iiv0SpKQ0iLIlLlKDpALBhgzwcplysgMsuXIF3KoNr0oGr9CM2gbXrv3GUgvFt9HNtL2gFo/KSOm/s/qb3UizsisTKZ85i+ZbrZZtm2zLSAHiC1yAVmUEiAurFRWOyf1o+jekWHw3Gc/v4Dr9fnSyq5XUOUZPNrN2z6S5hN4clX13Nvz8OQMRXEMhK06wV35hkDkBavRCWVC0knKVMltBn9thVfot9lj1S4ePFHXf145F9USeHynEhR/2P56ztHPQunRtPLl8EBxky48UkYVs4+yWIChK9Noo3ezXOPUGZ5fOnGqnMcRGCqWAOg+aGlgN3tFflZPXeGhOOQYechGYwPcDT1gIe872LSSog1SHXfRk69xXB95OmYYSTcqp5zIE5t2wtGk/2cpbzZRnMD1yWqW4c5p041uhH57o6m89IvBDp2665okmEgca+XBzF9/ejGOn5r2ZrzWiCR8TOUjdE1bNYbKe5rRO9+lmy9dIIlMdPdwmm+CP8or29/DQoWmcTB6nX4+F+9AjAZa5gMKZyyzd1S3qmL+KDIk0SIPFLWy1Vjtp7SdVI70V0R+Vid1RvnaEwbuvKzoavD+f1ENnez7xAtfMwXPiHDkGvzoAvzNTHL+RLHAG74e1HJ9SwoNEXENKAPtwRUtmyLqCHQoCMsW2lSiDueXDmaBueo5B8FUqYKpiME+BHx+Lhet90inkVUWf0FinxL4zFOfFAvo8WkttrJ23TnV6RPaoNN6HjaxqYTARKCs0li/oZi4/yhRlBgzpvTa+KVA11LvFJ842aHIfj7/cjpL5+PFu/nA9jUdXSeRK9frWahkuCFszdeh3/geHXyDg'}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-pool-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write', 'https://www.googleapis.com/auth/sqlservice.admin']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dpdiadispm1t1001-w-0', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'owner': 'aps-cloud', 'environment': 'upr', 'goog-dataproc-cluster-uuid': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad', 'application': 'pm1t1', 'created_on': '20220909171057', 'goog-dataproc-cluster-name': 'dpdiadispm1t1001', 'goog-dataproc-location': 'northamerica-northeast1', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'OKvfFKEbc3U=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': '81FxUv8pAmo=', 'lastStartTimestamp': '2023-02-22T08:12:04.109-08:00', 'lastStopTimestamp': '2023-01-31T11:03:01.950-08:00'}
{'kind': 'compute#instance', 'id': '123744406186937674', 'creationTimestamp': '2022-09-09T10:11:02.776-07:00', 'name': 'dpdiadispm1t1001-w-1', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-gfpre-dprco-nane', 'networkIP': '10.194.11.40', 'name': 'nic0', 'fingerprint': 'epCq24O4Gxo=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dpdiadispm1t1001-w-1', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '500'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'Qo_2c7ooQmQ=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas==1.0.1 numpy==1.15.0 statsmodels==0.11.0 scipy==1.4.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/'}, {'key': 'dataproc-cluster-name', 'value': 'dpdiadispm1t1001'}, {'key': 'dataproc-cluster-uuid', 'value': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '1'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '300'}, {'key': 'dataproc-master', 'value': 'dpdiadispm1t1001-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '2'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/dpdiadispm1t1001-w-1'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV1Fv4jgQfudXIO3rxZukBVqkPLDb7LV3LVSkPd2ekJCxDbiN46ztUNhff+MktAmYdldISQB7PPN9M99MPn1NC22Y6uZK5kwZznTn0zfFuwnLu/5lN/CHQTD0g+791UM39MOwQ7HBsJjMhvsnlMrVimcrpA0mz1TxDVPoSS7QDqsMEZkZzDP4iWV4kbLIqIJ11nSpwcJSowwLlknKkGawlGK1Q2tjcg9TqpjWkY/Kz2x4edG/6FiTs2FpGP6VhSJM4AyvwLw1Uj97K4UJWxapR8GoEFxrLjPPcMFkYTw4SUcX/XPf7wiIgNHZsLoXhJWO1486lS8QkzIQhMhTZhiFddaly55jZ30TTEgIQiyis6DXd+FlIVEyRQbrZ9j1o2DaIJ4BDRucIsHTlOuo54N7bzDZzSVMFhyNXOj0XGfBZbtDAEpmagJe2EJL8syMrqhwO6iJ2uXGbt9wekCea0eVRp4xKUSUS2U8S5KHieEbbnbVRiIVmw0hmpVGixScQJr/ZFFwdh4Gg0HYoheSysOrlWIrbCx5TQecrK25NhZ4BZRDBu6Q/crAMww4SbVCOMdkDQBiKmWO3vZuQrTW6LrangAJTN2yDUvpIjHYsMSasT9z8nZy6SLOm2aweE1JRPLC29hodRS44HqR6hlAJQCaFEA9N8giBbAjASRH08fx/Ev8bTKN50k8/efma5x8cLRNc5xRT+bAq/ev2Ia98Fz8TrXWj02cdY7V82xY3lDBkeU18jsUoCJ5E354Qk94g9Hr8YP+hfP0Vu5roxj4TgtVcmwlIOpD2p/M4wW4zDKKOI2Wy8WKm8FSL4j+KRfixaSK0p3kvJlFGhinRQpxCbzlohAeTiHxqpSCEg3CfnjuKjNXgTmLec1AIBYMGzjBlgBalhWdkV0Zzpnv1roynSAXM2qdI7LITBScLHinO+cNdzQHgeJLziiEjFPL7/sFYxn7FaUSucxAO3SZnxsoh+ipyHe2YzxnctstafFKeelUhQWFupkNr0dXk8n9/Gr0MBpPruL55P4hKfOiF4SipQOCGWzPQ6SsztrrJU41O0EklIuDyObiRitw1uS5K9aavt+qyVLjyoC/j6bjuQ31bjQe/RlP59fx6D65+S+Ogt5Zvyaghc1fky/z65vkYTL9bu01t5xdnPsdYvUKpNN7Df0Iiv0SpKQ0iLIlLlKDpALBhgzwcplysgMsuXIF3KoNr0oGr9CM2gbXrv3GUgvFt9HNtL2gFo/KSOm/s/qb3UizsisTKZ85i+ZbrZZtm2zLSAHiC1yAVmUEiAurFRWOyf1o+jekWHw3Gc/v4Dr9fnSyq5XUOUZPNrN2z6S5hN4clX13Nvz8OQMRXEMhK06wV35hkDkBavRCWVC0knKVMltBn9thVfot9lj1S4ePFHXf145F9USeHynEhR/2P56ztHPQunRtPLl8EBxky48UkYVs4+yWIChK9Noo3ezXOPUGZ5fOnGqnMcRGCqWAOg+aGlgN3tFflZPXeGhOOQYechGYwPcDT1gIe872LSSog1SHXfRk69xXB95OmYYSTcqp5zIE5t2wtGk/2cpbzZRnMD1yWqW4c5p041uhH57o6m89IvBDp2665okmEgca+XBzF9/ejGOn5r2ZrzWiCR8TOUjdE1bNYbKe5rRO9+lmy9dIIlMdPdwmm+CP8or29/DQoWmcTB6nX4+F+9AjAZa5gMKZyyzd1S3qmL+KDIk0SIPFLWy1Vjtp7SdVI70V0R+Vid1RvnaEwbuvKzoavD+f1ENnez7xAtfMwXPiHDkGvzoAvzNTHL+RLHAG74e1HJ9SwoNEXENKAPtwRUtmyLqCHQoCMsW2lSiDueXDmaBueo5B8FUqYKpiME+BHx+Lhet90inkVUWf0FinxL4zFOfFAvo8WkttrJ23TnV6RPaoNN6HjaxqYTARKCs0li/oZi4/yhRlBgzpvTa+KVA11LvFJ842aHIfj7/cjpL5+PFu/nA9jUdXSeRK9frWahkuCFszdeh3/geHXyDg'}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/aea8b229-9bbc-4cce-b5e0-15386ada4dad/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-pool-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write', 'https://www.googleapis.com/auth/sqlservice.admin']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dpdiadispm1t1001-w-1', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'owner': 'aps-cloud', 'environment': 'upr', 'goog-dataproc-cluster-uuid': 'aea8b229-9bbc-4cce-b5e0-15386ada4dad', 'application': 'pm1t1', 'created_on': '20220909171057', 'goog-dataproc-cluster-name': 'dpdiadispm1t1001', 'goog-dataproc-location': 'northamerica-northeast1', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'OKvfFKEbc3U=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'b92ObIczmDs=', 'lastStartTimestamp': '2023-02-22T08:12:01.998-08:00', 'lastStopTimestamp': '2023-01-31T11:03:02.534-08:00'}
{'kind': 'compute#instance', 'id': '3389686766934120776', 'creationTimestamp': '2023-05-12T18:28:08.597-07:00', 'name': 'gke-northamerica-northea-default-pool-6ddf92f8-1mcf', 'tags': {'items': ['allow-internet', 'gke-northamerica-northeast1-pmo-6076886b-gke-e8585222-node', 'http-allow'], 'fingerprint': 'aqFFR76Qf_Q='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-highmem-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/rfc-snet-gfpre-pmoto-upr-wkr-nane', 'networkIP': '10.195.35.28', 'name': 'nic0', 'aliasIpRanges': [{'ipCidrRange': '100.64.20.64/26', 'subnetworkRangeName': 'nonrfc-snet-gfpre-pmoto-upr-pod-nane'}], 'fingerprint': 'xK0Jkbq1hk0=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/gke-northamerica-northea-default-pool-6ddf92f8-1mcf', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node', 'https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid', 'https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos', 'https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'GVNIC'}, {'type': 'SEV_CAPABLE'}, {'type': 'SECURE_BOOT'}, {'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'UEFI_COMPATIBLE'}], 'diskSizeGb': '100', 'shieldedInstanceInitialState': {'pk': {'content': 'MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-', 'fileType': 'X509'}, 'keks': [{'content': 'MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X', 'fileType': 'X509'}], 'dbs': [{'content': 'MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8', 'fileType': 'X509'}], 'dbxs': [{'content': 'MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==', 'fileType': 'X509'}, {'content': 'MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==', 'fileType': 'X509'}, {'content': 'MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=', 'fileType': 'X509'}, {'content': 'MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4', 'fileType': 'X509'}]}, 'architecture': 'X86_64'}, {'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/pvc-4aef8faf-f6fb-43e6-b7c7-64b36235fbe0', 'deviceName': 'pvc-4aef8faf-f6fb-43e6-b7c7-64b36235fbe0', 'index': 1, 'boot': False, 'autoDelete': False, 'interface': 'SCSI', 'diskSizeGb': '2'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'PwbdmPbBJew=', 'items': [{'key': 'instance-template', 'value': 'projects/665550607499/global/instanceTemplates/gke-northamerica-northea-default-pool-6b8260ba'}, {'key': 'created-by', 'value': 'projects/665550607499/zones/northamerica-northeast1-b/instanceGroupManagers/gke-northamerica-northea-default-pool-6ddf92f8-grp'}, {'key': 'serial-port-logging-enable', 'value': 'false'}, {'key': 'kube-labels', 'value': 'cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-cpu-scaling-level=4,cloud.google.com/gke-logging-variant=DEFAULT,cloud.google.com/gke-max-pods-per-node=32,cloud.google.com/gke-netd-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=n1,node.kubernetes.io/masq-agent-ds-ready=true'}, {'key': 'google-compute-enable-pcid', 'value': 'true'}, {'key': 'VmDnsSetting', 'value': 'ZonalPreferred'}, {'key': 'kubelet-config', 'value': 'apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 100.66.2.138\nclusterDomain: cluster.local\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\n  pid.available: 10%\nfeatureGates:\n  CSIMigrationGCE: true\n  DisableKubeletCloudCredentialProviders: false\n  DynamicKubeletConfig: false\n  ExecProbeTimeout: false\n  InTreePluginAWSUnregister: true\n  InTreePluginAzureDiskUnregister: true\n  InTreePluginOpenStackUnregister: true\n  InTreePluginvSphereUnregister: true\n  RotateKubeletServerCertificate: true\nkernelMemcgNotification: true\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 80m\n  ephemeral-storage: 41Gi\n  memory: 3237Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nstaticPodPath: /etc/kubernetes/manifests\n'}, {'key': 'kubeconfig', 'value': 'apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    server: https://10.195.35.194\n    certificate-authority: \'/etc/srv/kubernetes/pki/ca-certificates.crt\'\n  name: default-cluster\ncontexts:\n- context:\n    cluster: default-cluster\n    namespace: default\n    user: exec-plugin-auth\n  name: default-context\ncurrent-context: default-context\nusers:\n- name: exec-plugin-auth\n  user:\n    exec:\n      apiVersion: "client.authentication.k8s.io/v1beta1"\n      command: \'/home/kubernetes/bin/gke-exec-auth-plugin\'\n      args: ["--cache-dir", \'/var/lib/kubelet/pki/\']\n'}, {'key': 'cluster-name', 'value': 'northamerica-northeast1-pmo-6076886b-gke'}, {'key': 'gci-update-strategy', 'value': 'update_disabled'}, {'key': 'gci-metrics-enabled', 'value': 'true'}, {'key': 'configure-sh', 'value': '#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\'v0.9.1\'\nDEFAULT_CNI_HASH=\'b5a59660053a5f1a33b5dd5624d9ed61864482d9dc8e5b79c9b3afc3d6f62c9830e1c30f9ccba6ee76f5fb1ff0504e58984420cc0680b26cb643f1cb07afbd1c\'\nDEFAULT_NPD_VERSION=\'v0.8.9\'\nDEFAULT_NPD_HASH_AMD64=\'4919c47447c5f3871c1dc3171bbb817a38c8c8d07a6ce55a77d43cadc098e9ad608ceeab121eec00c13c0b6a2cc3488544d61ce84cdade1823f3fd5163a952de\'\nDEFAULT_NPD_HASH_ARM64=\'8ccb42a862efdfc1f25ca9a22f3fd36f9fdff1ac618dd7d39e3b5991505dd610d432364420896ad71f42197a116f28a85dde58b129baa075ebb7312caa57f852\'\nDEFAULT_CRICTL_VERSION=\'v1.23.0\'\nDEFAULT_CRICTL_AMD64_SHA512=\'f8c40c66c8d9a85e857399506f4977564890815b02658eec591114e04bd8bc6b8ea08bcc159af0088b5eda7bf0dfd16096bf0c174819c204193fb7343ae7d9d5\'\nDEFAULT_CRICTL_ARM64_SHA512=\'261ac360b0ac3fc88c81f1cc348f84b0df0b07ca4db61b0e647c142882d129ba11d21d0de373a27ecfd984436a08a11b19cde2ad5e3412e5d03203caedd62d92\'\nDEFAULT_MOUNTER_TAR_SHA=\'7956fd42523de6b3107ddc3ce0e75233d2fcb78436ff07a1389b6eaac91fb2b1b72a08f7a219eaf96ba1ca4da8d45271002e0d60e0644e796c665f99bb356516\'\n###\n\n# This version needs to be the same as in gke/cluster/gce/gci/configure-helper.sh\nGKE_CONTAINERD_INFRA_CONTAINER="${CONTAINERD_INFRA_CONTAINER:-gke.gcr.io/pause:3.6@sha256:10008c36b4611b44db1229451675d5d7d86c7ddf4ef00f883d806a01547203f6}"\n\nRIPTIDE_FUSE_BUCKET="${RIPTIDE_FUSE_BUCKET:-gke-release}"\nRIPTIDE_SNAPSHOTTER_BUCKET="${RIPTIDE_SNAPSHOTTER_BUCKET:-gke-release}"\nRIPTIDE_FUSE_VERSION="${RIPTIDE_FUSE_VERSION:-v0.120.0}"\nRIPTIDE_SNAPSHOTTER_VERSION="${RIPTIDE_SNAPSHOTTER_VERSION:-v1.4-21}"\n\n# Standard curl flags.\nCURL_FLAGS=\'--fail --silent --show-error --retry 5 --retry-delay 3 --connect-timeout 10 --retry-connrefused\'\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\n# A function that fetches a GCE metadata value and echoes it out.\n# Args:\n#   $1 : URL path after /computeMetadata/v1/ (without heading slash).\n#   $2 : An optional default value to echo out if the fetch fails.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction get-metadata-value {\n  local default="${2:-}"\n\n  local status\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H \'Metadata-Flavor: Google\' \\\n    "http://metadata/computeMetadata/v1/${1}" \\\n  || status="$?"\n  status="${status:-0}"\n\n  if [[ "${status}" -eq 0 || -z "${default}" ]]; then\n    return "${status}"\n  else\n    echo "${default}"\n  fi\n}\n\n# A function to fetch kube-env from GCE metadata server\n# or using hurl on the master if available\nfunction download-kube-env {\n  (\n    umask 077\n    local kube_env_path="/tmp/kube-env.yaml"\n    if [[ "$(is-master)" == "true" && $(use-hurl) = "true" ]]; then\n      local kube_env_path="${KUBE_HOME}/kube-env.yaml"\n      download-kube-env-hurl "${kube_env_path}"\n    else\n      local meta_path="http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env"\n      echo "Downloading kube-env via GCE metadata from ${meta_path} to ${kube_env_path}"\n      # shellcheck disable=SC2086\n      retry-forever 10 curl ${CURL_FLAGS} \\\n        -H "X-Google-Metadata-Request: True" \\\n        -o "${kube_env_path}" \\\n        "${meta_path}"\n    fi\n\n    # Convert the yaml format file into a shell-style file.\n    eval "$(python3 -c \'\'\'\nimport pipes,sys,yaml\nitems = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print("readonly {var}={value}".format(var=k, value=pipes.quote(str(v))))\n\'\'\' < "${kube_env_path}" > "${KUBE_HOME}/kube-env")"\n\n    # Leave kube-env if we are a master\n    if [[ "$(is-master)" != "true" ]]; then\n      rm -f "${kube_env_path}"\n    fi\n  )\n}\n\n# A function to pull kube-env from HMS using hurl\nfunction download-kube-env-hurl {\n  local -r kube_env_path="$1"\n  local -r endpoint=$(get-metadata-value "instance/attributes/gke-api-endpoint")\n  local -r kube_env_hms_path=$(get-metadata-value "instance/attributes/kube-env-path")\n\n  echo "Downloading kube-env via hurl from ${kube_env_hms_path} to ${kube_env_path}"\n  retry-forever 30 ${KUBE_HOME}/bin/hurl --hms_address $endpoint \\\n    --dst "${kube_env_path}" \\\n    "${kube_env_hms_path}"\n  chmod 600 "${kube_env_path}"\n}\n\nfunction download-kubelet-config {\n  local -r dest="$1"\n  echo "Downloading Kubelet config file, if it exists"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config="/tmp/kubelet-config.yaml"\n    # shellcheck disable=SC2086\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H "X-Google-Metadata-Request: True" \\\n      -o "${tmp_kubelet_config}" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config\n    # only write to the final location if curl succeeds\n    mv "${tmp_kubelet_config}" "${dest}"\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-master-certs from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs="/tmp/kube-master-certs.yaml"\n    # shellcheck disable=SC2086\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H "X-Google-Metadata-Request: True" \\\n      -o "${tmp_kube_master_certs}" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval "$(python3 -c \'\'\'\nimport pipes,sys,yaml\nitems = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print("readonly {var}={value}".format(var=k, value=pipes.quote(str(v))))\n\'\'\' < "${tmp_kube_master_certs}" > "${KUBE_HOME}/kube-master-certs")"\n    rm -f "${tmp_kube_master_certs}"\n  )\n}\n\nfunction validate-hash {\n  local -r file="$1"\n  local -r expected="$2"\n\n  actual_sha1=$(sha1sum "${file}" | awk \'{ print $1 }\') || true\n  actual_sha512=$(sha512sum "${file}" | awk \'{ print $1 }\') || true\n  if [[ "${actual_sha1}" != "${expected}" ]] && [[ "${actual_sha512}" != "${expected}" ]]; then\n    echo "== ${file} corrupted, sha1 ${actual_sha1}/sha512 ${actual_sha512} doesn\'t match expected ${expected} =="\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL="http://metadata.google.internal/computeMetadata/v1/instance"\nfunction get-credentials {\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H "Metadata-Flavor: Google" \\\n    "${GCE_METADATA_INTERNAL}/service-accounts/default/token" \\\n  | python3 -c \'import sys; import json; print(json.loads(sys.stdin.read())["access_token"])\'\n}\n\nfunction valid-storage-scope {\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H "Metadata-Flavor: Google" \\\n    "${GCE_METADATA_INTERNAL}/service-accounts/default/scopes" \\\n  | grep -E "auth/devstorage|auth/cloud-platform"\n}\n\n# Determine if this node is a master using metadata\nfunction is-master {\n  local -r is_master_val=${KUBERNETES_MASTER:-$(get-metadata-value "instance/attributes/is-master-node")}\n  local result="false"\n  if [[ ${is_master_val:-} == "true" ]]; then\n    result="true"\n  fi\n  echo $result\n}\n\n# A function that returns "true" if hurl should be used, "false" otherwise.\nfunction use-hurl {\n  local -r enable_hms_read=${ENABLE_HMS_READ:-$(get-metadata-value "instance/attributes/enable_hms_read")}\n  local result="false"\n\n  if [[ -f "${KUBE_HOME}/bin/hurl" && "${enable_hms_read}" == "true" ]]; then\n    result="true"\n  fi\n  echo $result\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha512/sha1 hash of the URL. Can be "" if the sha512/sha1 hash is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash="$1"\n  shift 1\n\n  while true; do\n    for url in "$@"; do\n      local file="${url##*/}"\n      rm -f "${file}"\n      # if the url belongs to GCS API we should use oauth2_token in the headers if the VM service account has storage scopes\n      local curl_headers=""\n\n      if [[ "$url" =~ ^https://storage.googleapis.com.* ]] ; then\n        local canUseCredentials=0\n\n        echo "Getting the scope of service account configured for VM."\n        if ! valid-storage-scope ; then\n          canUseCredentials=1\n          # this behavior is preserved for backward compatibility. We want to fail fast if SA is not available\n          # and try to download without SA if scope does not exist on SA\n          echo "No service account or service account without storage scope. Attempt to download without service account token."\n        fi\n\n        if [[ "${canUseCredentials}" == "0" ]] ; then\n          echo "Getting the service account access token configured for VM."\n          local access_token="";\n          if access_token=$(get-credentials); then\n            echo "Service account access token is received. Downloading ${url} using this token."\n          else\n            echo "Cannot get a service account token. Exiting."\n            exit 1\n          fi\n\n          curl_headers=${access_token:+Authorization: Bearer "${access_token}"}\n        fi\n      fi\n      if ! curl ${curl_headers:+-H "${curl_headers}"} -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 --retry-connrefused "${url}"; then\n        echo "== Failed to download ${url}. Retrying. =="\n      elif [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then\n        echo "== Hash validation of ${url} failed. Retrying. =="\n      else\n        if [[ -n "${hash}" ]]; then\n          echo "== Downloaded ${url} (HASH = ${hash}) =="\n        else\n          echo "== Downloaded ${url} =="\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction record-preload-info {\n  echo "$1,$2" >> "${KUBE_HOME}/preload_info"\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs "${key},${value}" "${KUBE_HOME}/preload_info"\n}\n\nfunction split-commas {\n  echo -e "${1//,/\'\\n\'}"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p "$flexvolume_plugin_dir"\n  mount --bind "$flexvolume_plugin_dir" "$flexvolume_plugin_dir"\n  mount -o remount,exec "$flexvolume_plugin_dir"\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME="${KUBE_HOME}/containerized_mounter"\n  local -r mounter_tar_sha="${DEFAULT_MOUNTER_TAR_SHA}"\n  if is-preloaded "mounter" "${mounter_tar_sha}"; then\n    echo "mounter is preloaded."\n    return\n  fi\n\n  echo "Downloading gci mounter tools."\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}"\n  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}"\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs"\n  download-or-bust "${mounter_tar_sha}" "https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar"\n  cp "${KUBE_HOME}/kubernetes/server/bin/mounter" "${CONTAINERIZED_MOUNTER_HOME}/mounter"\n  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}/mounter"\n  mv "${KUBE_HOME}/mounter.tar" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C "${CONTAINERIZED_MOUNTER_HOME}/rootfs"\n  rm /tmp/mounter.tar\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet"\n\n  record-preload-info "mounter" "${mounter_tar_sha}"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n "${NODE_PROBLEM_DETECTOR_VERSION:-}" ]]; then\n      local -r npd_version="${NODE_PROBLEM_DETECTOR_VERSION}"\n      local -r npd_hash="${NODE_PROBLEM_DETECTOR_TAR_HASH}"\n  else\n      local -r npd_version="${DEFAULT_NPD_VERSION}"\n      case "${HOST_PLATFORM}/${HOST_ARCH}" in\n        linux/amd64)\n          local -r npd_hash="${DEFAULT_NPD_HASH_AMD64}"\n          ;;\n        linux/arm64)\n          local -r npd_hash="${DEFAULT_NPD_HASH_ARM64}"\n          ;;\n        # no other architectures are supported currently.\n        # Assumption is that this script only runs on linux,\n        # see cluster/gce/windows/k8s-node-setup.psm1 for windows\n        # https://github.com/kubernetes/node-problem-detector/releases/\n        *)\n          echo "Unrecognized version and platform/arch combination:"\n          echo "$DEFAULT_NPD_VERSION $HOST_PLATFORM/$HOST_ARCH"\n          echo "Set NODE_PROBLEM_DETECTOR_VERSION and NODE_PROBLEM_DETECTOR_TAR_HASH to overwrite"\n          exit 1\n          ;;\n      esac\n  fi\n  local -r npd_tar="node-problem-detector-${npd_version}-${HOST_PLATFORM}_${HOST_ARCH}.tar.gz"\n\n  if is-preloaded "${npd_tar}" "${npd_hash}"; then\n    echo "${npd_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading ${npd_tar}."\n  local -r npd_release_path="${NODE_PROBLEM_DETECTOR_RELEASE_PATH:-https://storage.googleapis.com/kubernetes-release}"\n  download-or-bust "${npd_hash}" "${npd_release_path}/node-problem-detector/${npd_tar}"\n  local -r npd_dir="${KUBE_HOME}/node-problem-detector"\n  mkdir -p "${npd_dir}"\n  tar xzf "${KUBE_HOME}/${npd_tar}" -C "${npd_dir}" --overwrite\n  mv "${npd_dir}/bin"/* "${KUBE_BIN}"\n  chmod a+x "${KUBE_BIN}/node-problem-detector"\n  rmdir "${npd_dir}/bin"\n  rm -f "${KUBE_HOME}/${npd_tar}"\n\n  record-preload-info "${npd_tar}" "${npd_hash}"\n}\n\nfunction install-cni-binaries {\n  local -r cni_version=${CNI_VERSION:-$DEFAULT_CNI_VERSION}\n  if [[ -n "${CNI_VERSION:-}" ]]; then\n      local -r cni_hash="${CNI_HASH:-}"\n  else\n      local -r cni_hash="${DEFAULT_CNI_HASH}"\n  fi\n\n  local -r cni_tar="${CNI_TAR_PREFIX}${cni_version}.tgz"\n  local -r cni_url="${CNI_STORAGE_URL_BASE}/${cni_version}/${cni_tar}"\n\n  if is-preloaded "${cni_tar}" "${cni_hash}"; then\n    echo "${cni_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading cni binaries"\n  download-or-bust "${cni_hash}" "${cni_url}"\n  local -r cni_dir="${KUBE_HOME}/cni"\n  mkdir -p "${cni_dir}/bin"\n  tar xzf "${KUBE_HOME}/${cni_tar}" -C "${cni_dir}/bin" --overwrite\n  mv "${cni_dir}/bin"/* "${KUBE_BIN}"\n  rmdir "${cni_dir}/bin"\n  rm -f "${KUBE_HOME}/${cni_tar}"\n\n  record-preload-info "${cni_tar}" "${cni_hash}"\n}\n\n# Install crictl binary.\n# Assumptions: HOST_PLATFORM and HOST_ARCH are specified by calling detect_host_info.\nfunction install-crictl {\n  if [[ -n "${CRICTL_VERSION:-}" ]]; then\n    local -r crictl_version="${CRICTL_VERSION}"\n    local -r crictl_hash="${CRICTL_TAR_HASH}"\n  else\n    local -r crictl_version="${DEFAULT_CRICTL_VERSION}"\n    case "${HOST_PLATFORM}/${HOST_ARCH}" in\n      linux/amd64)\n        local -r crictl_hash="${DEFAULT_CRICTL_AMD64_SHA512}"\n        ;;\n      linux/arm64)\n        local -r crictl_hash="${DEFAULT_CRICTL_ARM64_SHA512}"\n        ;;\n      *)\n        echo "Unrecognized version and platform/arch combination:"\n        echo "$DEFAULT_CRICTL_VERSION $HOST_PLATFORM/$HOST_ARCH"\n        echo "Set CRICTL_VERSION and CRICTL_TAR_HASH to overwrite"\n        exit 1\n    esac\n  fi\n  local -r crictl="crictl-${crictl_version}-${HOST_PLATFORM}-${HOST_ARCH}.tar.gz"\n\n  # Create crictl config file.\n  cat > /etc/crictl.yaml <<EOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded "${crictl}" "${crictl_hash}"; then\n    echo "crictl is preloaded"\n    return\n  fi\n\n  echo "Downloading crictl"\n  local -r crictl_path="https://storage.googleapis.com/k8s-artifacts-cri-tools/release/${crictl_version}"\n  download-or-bust "${crictl_hash}" "${crictl_path}/${crictl}"\n  tar xf "${crictl}"\n  mv crictl "${KUBE_BIN}/crictl"\n  rm -f "${crictl}"\n\n  record-preload-info "${crictl}" "${crictl_hash}"\n}\n\nfunction preload-pause-image {\n  if is-preloaded "pause" "${GKE_CONTAINERD_INFRA_CONTAINER}"; then\n    echo "pause image is preloaded"\n    return\n  fi\n\n  # preloading pause image. It will be used in preloader and will be\n  # useful for staging builds where access_token is needed to pull the image\n  local access_token="";\n\n  if access_token=$(get-credentials); then\n    "${KUBE_BIN}/crictl" pull --creds "oauth2accesstoken:${access_token}" ${GKE_CONTAINERD_INFRA_CONTAINER}\n  else\n    echo "No access token. Pulling without it."\n    "${KUBE_BIN}/crictl" pull ${GKE_CONTAINERD_INFRA_CONTAINER}\n  fi\n  record-preload-info "pause" "${GKE_CONTAINERD_INFRA_CONTAINER}"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! "${EXEC_AUTH_PLUGIN_URL:-}" ]]; then\n      return\n  fi\n  local -r plugin_url="${EXEC_AUTH_PLUGIN_URL}"\n  local -r plugin_hash="${EXEC_AUTH_PLUGIN_HASH}"\n\n  if is-preloaded "gke-exec-auth-plugin" "${plugin_hash}"; then\n    echo "gke-exec-auth-plugin is preloaded"\n    return\n  fi\n\n  echo "Downloading gke-exec-auth-plugin binary"\n  download-or-bust "${plugin_hash}" "${plugin_url}"\n  mv "${KUBE_HOME}/gke-exec-auth-plugin" "${KUBE_BIN}/gke-exec-auth-plugin"\n  chmod a+x "${KUBE_BIN}/gke-exec-auth-plugin"\n\n  if [[ ! "${EXEC_AUTH_PLUGIN_LICENSE_URL:-}" ]]; then\n      return\n  fi\n  local -r license_url="${EXEC_AUTH_PLUGIN_LICENSE_URL}"\n  echo "Downloading gke-exec-auth-plugin license"\n  download-or-bust "" "${license_url}"\n  mv "${KUBE_HOME}/LICENSE" "${KUBE_BIN}/gke-exec-auth-plugin-license"\n\n  record-preload-info "gke-exec-auth-plugin" "${plugin_hash}"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir="${KUBE_HOME}/kube-manifests"\n  mkdir -p "${dst_dir}"\n  local manifests_tar_urls\n  while IFS= read -r url; do\n    manifests_tar_urls+=("$url")\n  done < <(split-commas "${KUBE_MANIFESTS_TAR_URL}")\n  local -r manifests_tar="${manifests_tar_urls[0]##*/}"\n  if [ -n "${KUBE_MANIFESTS_TAR_HASH:-}" ]; then\n    local -r manifests_tar_hash="${KUBE_MANIFESTS_TAR_HASH}"\n  else\n    echo "Downloading k8s manifests hash (not found in env)"\n    download-or-bust "" "${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha512}"\n    local -r manifests_tar_hash=$(cat "${manifests_tar}.sha512")\n  fi\n\n  if is-preloaded "${manifests_tar}" "${manifests_tar_hash}"; then\n    echo "${manifests_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading k8s manifests tar"\n  download-or-bust "${manifests_tar_hash}" "${manifests_tar_urls[@]}"\n  tar xzf "${KUBE_HOME}/${manifests_tar}" -C "${dst_dir}" --overwrite\n  local -r kube_addon_registry="${KUBE_ADDON_REGISTRY:-k8s.gcr.io}"\n  if [[ "${kube_addon_registry}" != "k8s.gcr.io" ]]; then\n    find "${dst_dir}" \\(-name \'*.yaml\' -or -name \'*.yaml.in\'\\) -print0 | \\\n      xargs -0 sed -ri "s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@"\n    find "${dst_dir}" \\(-name \'*.manifest\' -or -name \'*.json\'\\) -print0 | \\\n      xargs -0 sed -ri "s@(image\\":\\s+\\")k8s.gcr.io@\\1${kube_addon_registry}@"\n  fi\n  cp "${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh" "${KUBE_BIN}/configure-helper.sh"\n  cp "${dst_dir}/kubernetes/gci-trusty/configure-kubeapiserver.sh" "${KUBE_BIN}/configure-kubeapiserver.sh"\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh" "${KUBE_BIN}/"\n  fi\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh" "${KUBE_BIN}/"\n  fi\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh" "${KUBE_BIN}/"\n  fi\n  cp "${dst_dir}/kubernetes/gci-trusty/health-monitor.sh" "${KUBE_BIN}/health-monitor.sh"\n  cp "${dst_dir}/kubernetes/gci-trusty/networkd-monitor.sh" "${KUBE_BIN}/networkd-monitor.sh"\n\n  rm -f "${KUBE_HOME}/${manifests_tar}"\n  rm -f "${KUBE_HOME}/${manifests_tar}.sha512"\n\n  record-preload-info "${manifests_tar}" "${manifests_tar_hash}"\n}\n\n# Installs hurl to ${KUBE_HOME}/bin/hurl if not already installed.\nfunction install-hurl {\n  cd "${KUBE_HOME}"\n  if [[ -f "${KUBE_HOME}/bin/hurl" ]]; then\n    echo "install-hurl: hurl already installed"\n    return\n  fi\n\n  local -r hurl_gcs_att="instance/attributes/hurl-gcs-url"\n  local -r hurl_gcs_url=${HURL_GCS_URL:-$(get-metadata-value "${hurl_gcs_att}")}\n\n  if [[ -z "${hurl_gcs_url}" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo "install-hurl: Unable to find GCE metadata ${hurl_gcs_att}"\n    return\n  fi\n\n  # Download hurl binary from a GCS bucket.\n  local -r hurl_bin="hurl"\n  echo "install-hurl: Installing hurl from ${hurl_gcs_url} ... "\n  download-or-bust "" "${hurl_gcs_url}"\n  if [[ -f "${KUBE_HOME}/${hurl_bin}" ]]; then\n    chmod a+x ${KUBE_HOME}/${hurl_bin}\n    mv "${KUBE_HOME}/${hurl_bin}" "${KUBE_BIN}/${hurl_bin}"\n    echo "install-hurl: hurl installed to ${KUBE_BIN}/${hurl_bin}"\n    return\n  fi\n}\n\n# Installs inplace to ${KUBE_HOME}/bin/inplace if not already installed.\nfunction install-inplace {\n  cd "${KUBE_HOME}"\n  if [[ -f "${KUBE_HOME}/bin/inplace" ]]; then\n    echo "install-inplace: inplace already installed"\n    return\n  fi\n  local -r inplace_gcs_att="instance/attributes/inplace-gcs-url"\n  local -r inplace_gcs_url=${INPLACE_GCS_URL:-$(get-metadata-value "${inplace_gcs_att}")}\n  if [[ -z "${inplace_gcs_url}" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo "install-inplace: Unable to find GCE metadata ${inplace_gcs_att}"\n    return\n  fi\n  echo "install-inplace: Installing inplace from ${inplace_gcs_url} ..."\n  download-or-bust "" "${inplace_gcs_url}"\n  local -r inplace_bin="inplace"\n  if [[ -f "${KUBE_HOME}/${inplace_bin}" ]]; then\n    mv "${KUBE_HOME}/${inplace_bin}" "${KUBE_BIN}/${inplace_bin}"\n    if [[ ! -d "${KUBE_HOME}/${inplace_bin}" ]]; then\n      mkdir -p "${KUBE_HOME}/${inplace_bin}"\n    fi\n    cat > "${KUBE_HOME}/${inplace_bin}/inplace.hash" <<EOF\n${inplace_gcs_url}\nEOF\n    echo "install-inplace: inplace installed to ${KUBE_BIN}/${inplace_bin}"\n    return\n  fi\n}\n\n# A function to download in-place component manifests if in-place agent is\n# present.\nfunction inplace-run-once {\n  if [[ -f "${KUBE_HOME}/bin/inplace" ]]; then\n    echo "inplace-run-once: using inplace to download inplace component manefists"\n    local dst_dir="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty"\n    mkdir -p "${dst_dir}/in-place"\n    mkdir -p "${dst_dir}/gce-extras/in-place"\n    ${KUBE_HOME}/bin/inplace --mode=run-once --in_place_addon_path="${dst_dir}/gce-extras/in-place" --master_pod_path="${dst_dir}/in-place"\n  fi\n}\n\nfunction install-auger {\n  echo "Downloading auger binary"\n  if [[ -f "${KUBE_HOME}/bin/auger" ]]; then\n    echo "auger is already installed"\n    return\n  fi\n  AUGER_STORE_PATH="${AUGER_STORE_PATH:-https://storage.googleapis.com/gke-release-staging/auger}"\n  AUGER_VERSION="${AUGER_VERSION:-v1.0.0-gke.1}"\n  download-or-bust "" "${AUGER_STORE_PATH}/${AUGER_VERSION}/auger.sha1"\n  sha1="$(cat auger.sha1)"\n  readonly sha1 # Declare readonly separately to avoid masking error values.\n  rm -f "auger.sha1"\n  download-or-bust "${sha1}" "${AUGER_STORE_PATH}/${AUGER_VERSION}/auger"\n  mv "${KUBE_HOME}/auger" "${KUBE_HOME}/bin/auger"\n  chmod a+x "${KUBE_HOME}/bin/auger"\n  record-preload-info "auger" "${sha1}"\n}\n\n# Extract etcdctl binary from etcd image.\nfunction install-etcdctl {\n  echo "Installing etcdctl binary"\n  if [[ -f "${KUBE_HOME}/bin/etcdctl" ]]; then\n    echo "etcdctl is already installed"\n    return\n  fi\n  local -r etcd_image="gcr.io/gke-master-images/etcd:${ETCDCTL_VERSION}"\n  container_id="$(docker create "${etcd_image}" sh)"\n  readonly containerId\n  docker cp "${container_id}:usr/local/bin/etcdctl" "${KUBE_HOME}/bin/etcdctl"\n  chmod a+x "${KUBE_HOME}/bin/etcdctl"\n  docker rm "${container_id}"\n  docker rmi "${etcd_image}"\n}\n\nfunction install-gcfsd {\n  echo "Downloading Riptide FUSE client"\n  if is-preloaded "gcfsd" "${RIPTIDE_FUSE_VERSION}"; then\n    echo "gcfsd is preloaded."\n    return\n  fi\n\n  if [[ "${HOST_ARCH}" == "arm64" ]]; then\n    RIPTIDE_FUSE_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_FUSE_BUCKET}/gcfsd/${RIPTIDE_FUSE_VERSION}/arm64"\n  else\n    RIPTIDE_FUSE_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_FUSE_BUCKET}/gcfsd/${RIPTIDE_FUSE_VERSION}"\n  fi\n\n  if [[ "${RIPTIDE_FUSE_VERSION}" > v0.19.0 ]] && [[ "${RIPTIDE_FUSE_VERSION}" != v0.4.0 ]] ; then\n    download-or-bust "" "${RIPTIDE_FUSE_STORE_PATH}/gcfsd.tar.gz"\n  fi\n  download-or-bust "" "${RIPTIDE_FUSE_STORE_PATH}/gcfsd"\n  mv "${KUBE_HOME}/gcfsd" "${KUBE_HOME}/bin/gcfsd"\n  chmod a+x "${KUBE_HOME}/bin/gcfsd"\n  record-preload-info "gcfsd" "${RIPTIDE_FUSE_VERSION}"\n}\n\nfunction install-riptide-snapshotter {\n  echo "Downloading Riptide snapshotter"\n  if is-preloaded "containerd-gcfs-grpc" "${RIPTIDE_SNAPSHOTTER_VERSION}"; then\n    echo "containerd-gcfs-grpc is preloaded."\n    return\n  fi\n  RIPTIDE_SNAPSHOTTER_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_SNAPSHOTTER_BUCKET}/gcfs-snapshotter/${RIPTIDE_SNAPSHOTTER_VERSION}"\n  if [[ "${RIPTIDE_SNAPSHOTTER_VERSION}" > v1.4-2 ]]; then\n    download-or-bust "" "${RIPTIDE_SNAPSHOTTER_STORE_PATH}/containerd-gcfs-grpc.tar.gz"\n  fi\n\n  if [[ "${HOST_ARCH}" == "arm64" ]]; then\n    RIPTIDE_SNAPSHOTTER_BINARY="containerd-gcfs-grpc-arm64"\n  else\n    RIPTIDE_SNAPSHOTTER_BINARY="containerd-gcfs-grpc"\n  fi\n\n  download-or-bust "" "${RIPTIDE_SNAPSHOTTER_STORE_PATH}/${RIPTIDE_SNAPSHOTTER_BINARY}"\n  mv "${KUBE_HOME}/${RIPTIDE_SNAPSHOTTER_BINARY}" "${KUBE_HOME}/bin/containerd-gcfs-grpc"\n  chmod a+x "${KUBE_HOME}/bin/containerd-gcfs-grpc"\n  record-preload-info "containerd-gcfs-grpc" "${RIPTIDE_SNAPSHOTTER_VERSION}"\n}\n\n# Install Riptide FUSE client and Riptide snapshotter\nfunction install-riptide {\n  install-gcfsd\n  install-riptide-snapshotter\n}\n\nfunction configure-cgroup-mode {\n  if which cgroup_helper > /dev/null 2>&1; then\n    if [[ "${CGROUP_MODE:-}" == "v1" ]] && cgroup_helper show | grep -q \'unified\'; then\n      cgroup_helper set hybrid\n      echo "set cgroup config to hybrid, now rebooting..."\n      reboot\n    elif [[ "${CGROUP_MODE:-}" == "v2" ]] && cgroup_helper show | grep -q \'hybrid\'; then\n      cgroup_helper set unified\n      echo "set cgroup config to unified, now rebooting..."\n      reboot\n    fi\n  fi\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo "Try to load docker image file ${img}"\n  # Temporarily turn off errexit, because we don\'t want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n\n  if [[ "${CONTAINER_RUNTIME_NAME:-}" == "docker" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-docker load -i}\n  elif [[ "${CONTAINER_RUNTIME_NAME:-}" == "containerd" || "${CONTAINERD_TEST:-}"  == "containerd" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-ctr -n=k8s.io images import}\n  else\n    load_image_command="${LOAD_IMAGE_COMMAND:-}"\n  fi\n\n  # Deliberately word split load_image_command\n  # shellcheck disable=SC2086\n  until timeout 30 ${load_image_command} "${img}"; do\n    if [[ "${attempt_num}" == "${max_attempts}" ]]; then\n      echo "Fail to load docker image file ${img} using ${load_image_command} after ${max_attempts} retries. Exit!!"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo "Start loading kube-system docker images"\n  local -r img_dir="${KUBE_HOME}/kube-docker-files"\n  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n    try-load-docker-image "${img_dir}/kube-apiserver.tar"\n    try-load-docker-image "${img_dir}/kube-controller-manager.tar"\n    try-load-docker-image "${img_dir}/kube-scheduler.tar"\n  else\n    try-load-docker-image "${img_dir}/kube-proxy.tar"\n  fi\n}\n\n# If we are on ubuntu we can try to install docker\nfunction install-docker {\n  # bailout if we are not on ubuntu\n  if ! command -v apt-get >/dev/null 2>&1; then\n    echo "Unable to automatically install docker. Bailing out..."\n    return\n  fi\n  # Install Docker deps, some of these are already installed in the image but\n  # that\'s fine since they won\'t re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    --location \\\n    "https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID")/gpg" \\\n  | apt-key add -\n  add-apt-repository \\\n    "deb [arch=${HOST_ARCH}] https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID") \\\n    $release stable"\n\n  # Install Docker\n  apt-get update && \\\n    apt-get install -y --no-install-recommends "${GCI_DOCKER_VERSION:-"docker-ce=5:19.03.*"}"\n  rm -rf /var/lib/apt/lists/*\n}\n\n# If we are on ubuntu we can try to install containerd\nfunction install-containerd-ubuntu {\n  # bailout if we are not on ubuntu\n  if [[ -z "$(command -v lsb_release)" || $(lsb_release -si) != "Ubuntu" ]]; then\n    echo "Unable to automatically install containerd in non-ubuntu image. Bailing out..."\n    exit 2\n  fi\n\n  # Install dependencies, some of these are already installed in the image but\n  # that\'s fine since they won\'t re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository (as we install containerd from there)\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    --location \\\n    "https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID")/gpg" \\\n  | apt-key add -\n  add-apt-repository \\\n    "deb [arch=${HOST_ARCH}] https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID") \\\n    $release stable"\n\n  # Install containerd from Docker repo\n  apt-get update && \\\n    apt-get install -y --no-install-recommends containerd\n  rm -rf /var/lib/apt/lists/*\n\n  # Override to latest versions of containerd and runc\n  systemctl stop containerd\n  if [[ -n "${UBUNTU_INSTALL_CONTAINERD_VERSION:-}" ]]; then\n    # TODO(https://github.com/containerd/containerd/issues/2901): Remove this check once containerd has arm64 release.\n    if [[ $(dpkg --print-architecture) != "amd64" ]]; then\n      echo "Unable to automatically install containerd in non-amd64 image. Bailing out..."\n      exit 2\n    fi\n    # containerd versions have slightly different url(s), so try both\n    # shellcheck disable=SC2086\n    ( curl ${CURL_FLAGS} \\\n        --location \\\n        "https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}-${HOST_PLATFORM}-${HOST_ARCH}.tar.gz" \\\n      || curl ${CURL_FLAGS} \\\n        --location \\\n        "https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}.${HOST_PLATFORM}-${HOST_ARCH}.tar.gz" ) \\\n    | tar --overwrite -xzv -C /usr/\n  fi\n  if [[ -n "${UBUNTU_INSTALL_RUNC_VERSION:-}" ]]; then\n    # TODO: Remove this check once runc has arm64 release.\n    if [[ $(dpkg --print-architecture) != "amd64" ]]; then\n      echo "Unable to automatically install runc in non-amd64. Bailing out..."\n      exit 2\n    fi\n    # shellcheck disable=SC2086\n    curl ${CURL_FLAGS} \\\n      --location \\\n      "https://github.com/opencontainers/runc/releases/download/${UBUNTU_INSTALL_RUNC_VERSION}/runc.${HOST_ARCH}" --output /usr/sbin/runc \\\n    && chmod 755 /usr/sbin/runc\n  fi\n  sudo systemctl start containerd\n}\n\nfunction ensure-container-runtime {\n  container_runtime="${CONTAINER_RUNTIME:-docker}"\n  if [[ "${container_runtime}" == "docker" ]]; then\n    if ! command -v docker >/dev/null 2>&1; then\n      install-docker\n      if ! command -v docker >/dev/null 2>&1; then\n        echo "ERROR docker not found. Aborting."\n        exit 2\n      fi\n    fi\n    docker version\n  elif [[ "${container_runtime}" == "containerd" ]]; then\n    # Install containerd/runc if requested\n    if [[ -n "${UBUNTU_INSTALL_CONTAINERD_VERSION:-}" || -n "${UBUNTU_INSTALL_RUNC_VERSION:-}" ]]; then\n      install-containerd-ubuntu\n    fi\n    # Verify presence and print versions of ctr, containerd, runc\n    if ! command -v ctr >/dev/null 2>&1; then\n      echo "ERROR ctr not found. Aborting."\n      exit 2\n    fi\n    ctr --version\n\n    if ! command -v containerd >/dev/null 2>&1; then\n      echo "ERROR containerd not found. Aborting."\n      exit 2\n    fi\n    containerd --version\n\n    if ! command -v runc >/dev/null 2>&1; then\n      echo "ERROR runc not found. Aborting."\n      exit 2\n    fi\n    runc --version\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd "${KUBE_HOME}"\n  local server_binary_tar_urls\n  while IFS= read -r url; do\n    server_binary_tar_urls+=("$url")\n  done < <(split-commas "${SERVER_BINARY_TAR_URL}")\n  local -r server_binary_tar="${server_binary_tar_urls[0]##*/}"\n  if [[ -n "${SERVER_BINARY_TAR_HASH:-}" ]]; then\n    local -r server_binary_tar_hash="${SERVER_BINARY_TAR_HASH}"\n  else\n    echo "Downloading binary release sha512 (not found in env)"\n    download-or-bust "" "${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha512}"\n    local -r server_binary_tar_hash=$(cat "${server_binary_tar}.sha512")\n  fi\n\n  if is-preloaded "${server_binary_tar}" "${server_binary_tar_hash}"; then\n    echo "${server_binary_tar} is preloaded."\n  else\n    echo "Downloading binary release tar"\n    download-or-bust "${server_binary_tar_hash}" "${server_binary_tar_urls[@]}"\n    tar xzf "${KUBE_HOME}/${server_binary_tar}" -C "${KUBE_HOME}" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir="${KUBE_HOME}/kubernetes/server/bin"\n    local dst_dir="${KUBE_HOME}/kube-docker-files"\n    mkdir -p "${dst_dir}"\n    cp "${src_dir}/"*.docker_tag "${dst_dir}"\n    if [[ "${KUBERNETES_MASTER:-}" == "false" ]]; then\n      cp "${src_dir}/kube-proxy.tar" "${dst_dir}"\n    else\n      cp "${src_dir}/kube-apiserver.tar" "${dst_dir}"\n      cp "${src_dir}/kube-controller-manager.tar" "${dst_dir}"\n      cp "${src_dir}/kube-scheduler.tar" "${dst_dir}"\n      cp -r "${KUBE_HOME}/kubernetes/addons" "${dst_dir}"\n    fi\n    load-docker-images\n    mv "${src_dir}/kubelet" "${KUBE_BIN}"\n    mv "${src_dir}/kubectl" "${KUBE_BIN}"\n\n    # Some older images have LICENSES baked-in as a file. Presumably they will\n    # have the directory baked-in eventually.\n    rm -rf "${KUBE_HOME}"/LICENSES\n    mv "${KUBE_HOME}/kubernetes/LICENSES" "${KUBE_HOME}"\n    mv "${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz" "${KUBE_HOME}"\n\n    record-preload-info "${server_binary_tar}" "${server_binary_tar_hash}"\n  fi\n\n  if [[ "${NETWORK_PROVIDER:-}" == "kubenet" ]] || \\\n     [[ "${NETWORK_PROVIDER:-}" == "cni" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 "${KUBE_BIN}"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the "exec" option, if needed.\n  if [[ "${REMOUNT_VOLUME_PLUGIN_DIR:-}" == "true" && -n "${VOLUME_PLUGIN_DIR:-}" ]]; then\n    remount-flexvolume-directory "${VOLUME_PLUGIN_DIR}"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  # Preload pause image\n  preload-pause-image\n\n  # Copy health check binaries to a tmpfs mount to reduce block IO usage.\n  setup-shm-healthcheck-binaries\n\n  # TODO(awly): include the binary and license in the OS image.\n  install-exec-auth-plugin\n\n  # Source GKE specific scripts.\n  #\n  # This must be done after install-kube-manifests where the\n  # gke-internal-configure.sh is downloaded.\n  if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n    echo "Running GKE internal configuration script gke-internal-configure.sh"\n    . "${KUBE_HOME}/bin/gke-internal-configure.sh"\n  fi\n\n  if [[ "${KUBERNETES_MASTER:-}" == "false" ]] && \\\n     [[ "${ENABLE_NODE_PROBLEM_DETECTOR:-}" == "standalone" ]]; then\n    install-node-problem-detector\n    if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n      install-npd-custom-plugins\n    fi\n  fi\n\n  # Clean up.\n  rm -rf "${KUBE_HOME}/kubernetes"\n  rm -f "${KUBE_HOME}/${server_binary_tar}"\n  rm -f "${KUBE_HOME}/${server_binary_tar}.sha512"\n}\n\nfunction setup-shm-healthcheck-binaries() {\n  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n    return\n  fi\n  if [[ "${ENABLE_SHM_HEALTHCHECK_BINARIES:-}" != "true" ]];then\n    return\n  fi\n\n  local -r shm_dir="${HEALTHCHECK_SHM_DIR:-/dev/kube_shm}"\n  local -r shm_bin_dir="${shm_dir}/bin"\n\n  mkdir -p "$shm_dir"\n  mount -t tmpfs -o exec none "$shm_dir"\n  mkdir "${shm_bin_dir}"\n\n  cp -f "${KUBE_BIN}/crictl" "${shm_bin_dir}/crictl"\n  cp -f "$(which curl)" "${shm_bin_dir}/curl"\n}\n\nfunction install-extra-node-requirements() {\n  if [[ "${KUBERNETES_MASTER:-}" != "false" ]]; then\n    return\n  fi\n  if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n    # M4A is not relevant on ARM\n    if [[ "${HOST_ARCH}" == "amd64" ]]; then\n      install-m4a-apparmor-profile\n    fi\n  fi\n}\n\n# This function detects the platform/arch of the machine where the script runs,\n# and sets the HOST_PLATFORM and HOST_ARCH environment variables accordingly.\n# Callers can specify HOST_PLATFORM_OVERRIDE and HOST_ARCH_OVERRIDE to skip the detection.\n# This function is adapted from the detect_client_info function in cluster/get-kube-binaries.sh\n# and kube::util::host_os, kube::util::host_arch functions in hack/lib/util.sh\n# This function should be synced with detect_host_info in ./configure-helper.sh\nfunction detect_host_info() {\n  HOST_PLATFORM=${HOST_PLATFORM_OVERRIDE:-"$(uname -s)"}\n  case "${HOST_PLATFORM}" in\n    Linux|linux)\n      HOST_PLATFORM="linux"\n      ;;\n    *)\n      echo "Unknown, unsupported platform: ${HOST_PLATFORM}." >&2\n      echo "Supported platform(s): linux." >&2\n      echo "Bailing out." >&2\n      exit 2\n  esac\n\n  HOST_ARCH=${HOST_ARCH_OVERRIDE:-"$(uname -m)"}\n  case "${HOST_ARCH}" in\n    x86_64*|i?86_64*|amd64*)\n      HOST_ARCH="amd64"\n      ;;\n    aHOST_arch64*|aarch64*|arm64*)\n      HOST_ARCH="arm64"\n      ;;\n    *)\n      echo "Unknown, unsupported architecture (${HOST_ARCH})." >&2\n      echo "Supported architecture(s): amd64 and arm64." >&2\n      echo "Bailing out." >&2\n      exit 2\n      ;;\n  esac\n}\n\n# Retries a command forever with a delay between retries.\n# Args:\n#  $1    : delay between retries, in seconds.\n#  $2... : the command to run.\nfunction retry-forever {\n  local -r delay="$1"\n  shift 1\n\n  until "$@"; do\n    echo "== $* failed, retrying after ${delay}s"\n    sleep "${delay}"\n  done\n}\n\n# Initializes variables used by the log-* functions.\n#\n# get-metadata-value must be defined before calling this function.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-init {\n  # Used by log-* functions.\n  LOG_CLUSTER_ID=${LOG_CLUSTER_ID:-$(get-metadata-value \'instance/attributes/cluster-uid\' \'get-metadata-value-error\')}\n  LOG_INSTANCE_NAME=$(hostname || echo \'hostname-error\')\n  LOG_BOOT_ID=$(journalctl --list-boots | grep -E \'^ *0\' | awk \'{print $2}\' || echo \'journalctl-error\')\n  declare -Ag LOG_START_TIMES\n  declare -ag LOG_TRAP_STACK\n\n  LOG_STATUS_STARTED=\'STARTED\'\n  LOG_STATUS_COMPLETED=\'COMPLETED\'\n  LOG_STATUS_ERROR=\'ERROR\'\n}\n\n# Sets an EXIT trap.\n# Args:\n#   $1:... : the trap command.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-push {\n  local t="${*:1}"\n  LOG_TRAP_STACK+=("${t}")\n  # shellcheck disable=2064\n  trap "${t}" EXIT\n}\n\n# Removes and restores an EXIT trap.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-pop {\n  # Remove current trap.\n  unset \'LOG_TRAP_STACK[-1]\'\n\n  # Restore previous trap.\n  if [ ${#LOG_TRAP_STACK[@]} -ne 0 ]; then\n    local t="${LOG_TRAP_STACK[-1]}"\n    # shellcheck disable=2064\n    trap "${t}" EXIT\n  else\n    # If no traps in stack, clear.\n    trap EXIT\n  fi\n}\n\n# Logs the end of a bootstrap step that errored.\n# Args:\n#  $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-error {\n  local bootstep="$1"\n\n  log-proto "${bootstep}" "${LOG_STATUS_ERROR}" "encountered non-zero exit code"\n}\n\n# Wraps a command with bootstrap logging.\n# Args:\n#   $1    : bootstrap step name.\n#   $2... : the command to run.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-wrap {\n  local bootstep="$1"\n  local command="${*:2}"\n\n  log-trap-push "log-error ${bootstep}"\n  log-proto "${bootstep}" "${LOG_STATUS_STARTED}"\n  $command\n  log-proto "${bootstep}" "${LOG_STATUS_COMPLETED}"\n  log-trap-pop\n}\n\n# Logs a bootstrap step start. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-start {\n  local bootstep="$1"\n\n  log-trap-push "log-error ${bootstep}"\n  log-proto "${bootstep}" "${LOG_STATUS_STARTED}"\n}\n\n# Logs a bootstrap step end. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-end {\n  local bootstep="$1"\n\n  log-proto "${bootstep}" "${LOG_STATUS_COMPLETED}"\n  log-trap-pop\n}\n\n# Writes a log proto to stdout.\n# Args:\n#   $1: bootstrap step name.\n#   $2: status. Either \'STARTED\', \'COMPLETED\', or \'ERROR\'.\n#   $3: optional status reason.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-proto {\n  local bootstep="$1"\n  local status="$2"\n  local status_reason="${3:-}"\n\n  # Get current time.\n  local current_time\n  current_time="$(date --utc \'+%s.%N\')"\n  # ...formatted as UTC RFC 3339.\n  local timestamp\n  timestamp="$(date --utc --date="@${current_time}" \'+%FT%T.%NZ\')"\n\n  # Calculate latency.\n  local latency=\'null\'\n  if [ "${status}" == "${LOG_STATUS_STARTED}" ]; then\n    LOG_START_TIMES["${bootstep}"]="${current_time}"\n  else\n    local start_time="${LOG_START_TIMES["${bootstep}"]}"\n    unset \'LOG_START_TIMES[\'"${bootstep}"\']\'\n\n    # Bash cannot do non-integer math, shell out to awk.\n    latency="$(echo "${current_time} ${start_time}" | awk \'{print $1 - $2}\')s"\n\n    # The default latency is null which cannot be wrapped as a string so we must\n    # do it here instead of the printf.\n    latency="\\"${latency}\\""\n  fi\n\n  printf \'[cloud.kubernetes.monitoring.proto.SerialportLog] {"cluster_hash":"%s","vm_instance_name":"%s","boot_id":"%s","timestamp":"%s","bootstrap_status":{"step_name":"%s","status":"%s","status_reason":"%s","latency":%s}}\\n\' \\\n  "${LOG_CLUSTER_ID}" "${LOG_INSTANCE_NAME}" "${LOG_BOOT_ID}" "${timestamp}" "${bootstep}" "${status}" "${status_reason}" "${latency}"\n}\n\n######### Main Function ##########\nlog-init\ndetect_host_info\n\n# Preloader will source this script, and skip the main function. The preloader\n# will choose what to preload by calling install-X functions directly.\n# When configure.sh is sourced by the preload script, $0 and $BASH_SOURCE are\n# different. $BASH_SOURCE still contains the path of configure.sh, while $0 is\n# the path of the preload script.\nif [[ "$0" != "$BASH_SOURCE" && "${IS_PRELOADER:-"false"}" == "true" ]]; then\n  echo "Running in preloader instead of VM bootsrapping. Skipping installation steps as preloader script will source configure.sh and call corresponding functions."\n  return\nfi\n\nlog-start \'ConfigureMain\'\necho "Start to install kubernetes files"\n\n# if install fails, message-of-the-day (motd) will warn at login shell\nlog-wrap \'SetBrokenMotd\' set-broken-motd\n\nKUBE_HOME="/home/kubernetes"\nKUBE_BIN="${KUBE_HOME}/bin"\n\nif [[ "$(is-master)" == "true" ]]; then\n  log-wrap \'InstallHurl\' install-hurl\n  log-wrap \'InstallInplace\' install-inplace\nfi\n\n# download and source kube-env\nlog-wrap \'DownloadKubeEnv\' download-kube-env\nlog-wrap \'SourceKubeEnv\' source "${KUBE_HOME}/kube-env"\n\nlog-wrap \'ConfigureCgroupMode\' configure-cgroup-mode\n\nlog-wrap \'DownloadKubeletConfig\' download-kubelet-config "${KUBE_HOME}/kubelet-config.yaml"\n\nif [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n  log-wrap \'DownloadKubeMasterCerts\' download-kube-master-certs\nfi\n\n# ensure chosen container runtime is present\nlog-wrap \'EnsureContainerRuntime\' ensure-container-runtime\n\n# binaries and kube-system manifests\nlog-wrap \'InstallKubeBinaryConfig\' install-kube-binary-config\n\nif [[ "${ENABLE_GCFS:-""}" == "true" ]]; then\n  log-wrap \'InstallRiptide\' install-riptide\nfi\n\n# extra node requirements\nlog-wrap \'InstallExtraNodeRequirements\' install-extra-node-requirements\n\n# download inplace component manifests\nif [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n  log-wrap \'InplaceRunOnce\' retry-forever 30 inplace-run-once\nfi\n\necho "Done for installing kubernetes files"\nlog-end \'ConfigureMain\'\n'}, {'key': 'disable-legacy-endpoints', 'value': 'true'}, {'key': 'user-data', 'value': '#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error -H "X-Google-Metadata-Request: True" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\n  - path: /etc/modprobe.d/sunrpc.conf\n    permissions: \'0644\'\n    owner: root\n    # The GKE metadata server uses ports 987-989, so the sunrpc range should be restricted to be below.\n    content: |\n      options sunrpc max_resvport=986\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n'}, {'key': 'kube-env', 'value': 'ALLOCATE_NODE_CIDRS: "true"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=80m,memory=3237Mi,ephemeral-storage=41Gi;node_labels=cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-cpu-scaling-level=4,cloud.google.com/gke-logging-variant=DEFAULT,cloud.google.com/gke-max-pods-per-node=32,cloud.google.com/gke-netd-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=n1,node.kubernetes.io/masq-agent-ds-ready=true;arch=amd64;os=linux;os_distribution=cos;evictionHard=memory.available=100Mi,nodefs.available=10%,nodefs.inodesFree=5%,pid.available=10%\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMRENDQXBTZ0F3SUJBZ0lRY3BKY3dwZUZtRWlvMHVTQlRFVEJoREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMU1EQXlabUU1WXkxak5tVm1MVFExTnpZdFlUZGlaaTAwTTJJNU1HTmlZak0zWlRFdwpJQmNOTWpNd05URXhNVGN5TVRFeFdoZ1BNakExTXpBMU1ETXhPREl4TVRGYU1DOHhMVEFyQmdOVkJBTVRKRFV3Ck1ESm1ZVGxqTFdNMlpXWXRORFUzTmkxaE4ySm1MVFF6WWprd1kySmlNemRsTVRDQ0FhSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0dQQURDQ0FZb0NnZ0dCQUl5RVRpVHdTa01rRlpIb3RRcXNSOGNpcTBaT2tvd3d1ZUtVMmxBZgpOVTZZRnBBY1dtU3FYckt6S3dmYmQ3S1VPNk91UFYzYkoyeUx6Sy94WFUvT0tpRFZ6d3dNTUdEUnFaSGhLWURHClhuaDU3NFdhWW5WZ0hiVmJZUnRrcmJRUEZjcUhTRHNZRmx6TUZqKzllNW5NS1hYNWNNbDlnNFMrK3N6bHhFdHUKRGIxNUNvY3RHWkVQQzExQjFoM3MzVTJPb0dtdlNVRUltcTFoejVkMFhxL2VyVTdlUloyMnh6cGFuUGRLUkdqNwprNjdZQ1BDN2xMRTl2Q3FwejRVYTF5dWJhNi9ranlsdTlabDhjRHNpU3A1bmlqN29rRFVQRmQ3ZW1TdVpMMy96Cjk4aDN0QTdGNkE3cFVDOWp5VlVNMGhQUzdranN6YkFsOW80SnBnZ3lNR2RtSEpnTTVzbzNBRHhFQVZ2Ujh5UXMKNnF6ejQ0VlhKTzBNUXhENGN0MVB1c3lyNTJ0TjY3a05kdkpLZnEzT2R4OXd2N2RUL01pcDFLWjlxaFQrdTJ6QwpaZ3Y0OGJqQnFJaUdpMWJsOUFUOXlGVVdNYkJoR3BGUitZRFhqbmUrTDNpVFIyVnBwUE95ckNsVzNkM3R4VExwClBVVTRSdnRkVDBHTk53dkNuby9VdjQxanZ3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVLeUNhd1RBZmRwYWpGQUllUDEyZzNxV2FmQ2N3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dHQkFBV2FKeE5pdllML0VReGFJZ3k2UWVuTm44cTZFOVVZSEFoL3lROVdNVy84CjNhV0VsT1MrQ0UzaHlkUkU2eFNXR2YvMldkZGhnUG5mQlZ0a3Z3TXd0cHBQNkNoRkxtVkdqNkJ1dmxGdm01Qk0KZHVnd2hJS1U3UmVXaFY0dEpCQnRtd3R4THdLVkM0QXJDWGtmZUg5N0V4dUxJakwvVEF0d29TcFJ4MlFITUxzWQpwWHpUWUJhRHc1SDFqR0NuSlVjKysxUzB2b3ljY0NwNjcyN0crQ3o5Tm14VXVPbjNUdGRBWlhaUXhPcytJU2ZJCmJYMEI1NnlDS2loeEVncysvZzd3WEZUc1VMZkpBQUR1V2pFVUQzUExXNTFxcWRkQm8xUDdLQU1nNng1ckI4Y2cKQ2MzUEhUaEF2ZjgwVjJPMlRmcDNQN3FycmFVTkNOVzB5cHRTNnF6djloZ2poRE9TQU1rNW9RRGFsTi9jVlBuSApRSDBMcUZHZzBQQzJMMURKUnJDMC9GUnhjWGhGQStMUkRoOVJyV213Z292UWppSFB2bEtFYVYzRDJoSGhETW1yCjRKTEJBZHU3TlBXUnc0SXN5ZFlva3lzZHhLWHgyMEluK3NBL01aZFNFVWhBZjdvNnlDOTZpOWdzUkhjRUw0K04KVG9URzJNdkQ2WDVqQ0RuWWdPNTd3dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 100.64.20.0/22\nCLUSTER_NAME: northamerica-northeast1-pmo-6076886b-gke\nCNI_HASH: ba28765e2939d398dc101ff5543e62a14d132a113102b371af8da86722a4dfbfb3cc5121e6cbdb349e5d9d892e66f034ba24d0b4acd2f1df942c0cd9bcc5723a\nCNI_SHA1: a687a7150d8201ac374b1915829c80ab3cf0c774\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v1.0.1-gke.4\nCNI_STORAGE_URL_BASE: https://storage.googleapis.com/gke-release/cni-plugins\nCNI_TAR_PREFIX: cni-plugins-linux-amd64-\nCNI_VERSION: v1.0.1-gke.4\nCONTAINER_RUNTIME: containerd\nCONTAINER_RUNTIME_ENDPOINT: unix:///run/containerd/containerd.sock\nCONTAINER_RUNTIME_NAME: containerd\nCONTAINERD_MAX_CONTAINER_LOG_LINE: "262144"\nCREATE_BOOTSTRAP_KUBECONFIG: "false"\nDETECT_LOCAL_MODE: NodeCIDR\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 100.66.2.138\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: "1"\nENABLE_CLUSTER_DNS: "true"\nENABLE_CLUSTER_LOGGING: "false"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: "false"\nENABLE_CLUSTER_UI: "true"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_LATEST_NPD: "true"\nENABLE_METADATA_AGENT: ""\nENABLE_METRICS_SERVER: "true"\nENABLE_NETD: "true"\nENABLE_NODE_LOGGING: "false"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODE_REGISTRATION_CHECKER: "true"\nENABLE_NODELOCAL_DNS: "false"\nENABLE_SHM_HEALTHCHECK_BINARIES: "true"\nENABLE_SYSCTL_TUNING: "true"\nENV_TIMESTAMP: "2023-05-11T18:21:04+00:00"\nEXEC_AUTH_PLUGIN_HASH: 5e3d7c0504132820d5625aac230056becc23a20a6c0040afadf123f36c6d32b73e4625640881ec3b62e76846cfc1789d036486fc78ee6cdf40666d2dfe6ba356\nEXEC_AUTH_PLUGIN_LICENSE_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/d741bb92df4f39f2fb7201460f70c861d50e442c/LICENSE\nEXEC_AUTH_PLUGIN_SHA1: 8fa5a3a7c7229f1b22a9d5ce9ff7192cf1f02336\nEXEC_AUTH_PLUGIN_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/d741bb92df4f39f2fb7201460f70c861d50e442c/linux_amd64/gke-exec-auth-plugin\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nEXTRA_POD_SYSCTLS: net.ipv6.conf.all.disable_ipv6=1,net.ipv6.conf.default.disable_ipv6=1\nFEATURE_GATES: DynamicKubeletConfig=false,InTreePluginAWSUnregister=true,InTreePluginAzureDiskUnregister=true,InTreePluginOpenStackUnregister=true,InTreePluginvSphereUnregister=true,DisableKubeletCloudCredentialProviders=false,RotateKubeletServerCertificate=true,ExecProbeTimeout=false,CSIMigrationGCE=true\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: "true"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: "false"\nHPA_USE_REST_CLIENTS: "true"\nINSTANCE_PREFIX: gke-northamerica-northeast1-pmo-6076886b-gke-e8585222\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 100.66.2.138\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: 0978cac1aa792134997e2a49f766a6f05b88e6a30e03e42f8d4f8eade347f4e788a409a57d09f1c64cf1318ac3cc59af5898d8c48a5dede7e6ed09875deebd3f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: oOG1f0qqUboIx4j8FxknyCsSupvXYQM0cnGPJDJx9II=\nKUBELET_ARGS: --v=2 --cloud-provider=gce --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter\n  --cert-dir=/var/lib/kubelet/pki/ --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=32\n  --volume-plugin-dir=/home/kubernetes/flexvolume --node-status-max-images=25 --container-runtime=remote\n  --container-runtime-endpoint=unix:///run/containerd/containerd.sock --runtime-cgroups=/system.slice/containerd.service\n  --registry-qps=10 --registry-burst=20\nKUBERNETES_MASTER: "false"\nKUBERNETES_MASTER_NAME: 10.195.35.194\nLOAD_IMAGE_COMMAND: ctr -n=k8s.io images import\nLOGGING_DESTINATION: ""\nLOGGING_STACKDRIVER_RESOURCE_TYPES: ""\nMONITORING_FLAG_SET: "true"\nNETWORK_PROVIDER: cni\nNODE_LOCAL_SSDS_EXT: ""\nNON_MASQUERADE_CIDR: 0.0.0.0/0\nREMOUNT_VOLUME_PLUGIN_DIR: "true"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: "true"\nSALT_TAR_HASH: ""\nSALT_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: d94de1c6d04a48e2dd1bfa5dd57cc6a5e49fd8f834683a13def83dc6d6c1f647ab6ee21a12696cc06ed4704e3120f11cbc012e55b5b7f3d8ef6237e1377cad84\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 100.66.2.128/25\nSTACKDRIVER_ENDPOINT: https://logging.googleapis.com\nSYSCTL_OVERRIDES: ""\nTPM_BOOTSTRAP_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxekNDQWhPZ0F3SUJBZ0lRQ25LZE9rVVIzbkgyZmZyallRU01MREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMU1EQXlabUU1WXkxak5tVm1MVFExTnpZdFlUZGlaaTAwTTJJNU1HTmlZak0zWlRFdwpIaGNOTWpNd05URXhNVGd4T1RFeVdoY05Namd3TlRBNU1UZ3lNVEV5V2pBY01Sb3dHQVlEVlFRREV4RnJkV0psCmJHVjBMV0p2YjNSemRISmhjRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFONUkKQVBzY0QzLytUZC9uRFRsMjRXOU42aklXM0dRQzNzNTM4anFFMUkxNEtJU21DQUdjazBkVjdBZDZaSmd3WitNOQovcVNvQUpBNmtoM1ZaOE9YOXpPOW85RDVtMkVtRFFRZmg0RzlwY1JGMllDd2NWL2I0d0FGdDkySGoyc1RlaDMvCnNlUXpOV0ZPcGtEVHErdVFiZEk4bHNTZXlJaUhsSXIwYzgyc01PWi9qM0p3bS9OMzByd0xiZmlxSXovUHRvaGUKZDkzTGIvZU9ac3J5YlFaRnZwWC81bU10VUFjeHBSN0M5SURqNHBKbU1sNDhnQVozVFpkRDhsL3BObmpSQlRIUQpZUHZoWEkyTmtIQ1B2VTUraWNZek0rMVcyckw2cDNvOVNORUFtOHVsQURvakhqTVN5Y1cvWXB0RERVeEVXZFV3CiswVXVnMjR2U21GWmxsVFN1eTBDQXdFQUFhTldNRlF3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVUt5Q2F3VEFmZHBhagpGQUllUDEyZzNxV2FmQ2N3RFFZSktvWklodmNOQVFFTEJRQURnZ0dCQUMyOVFheXQ3eWtLWXoxTzFFdGhQWEFMCkxzblMxMGI5SUFYZjBNL3M4b2tMR1BPUU1XZWtCRVFXQTFERHpyQTBEK3pOWUI4M05FQXhpOHNUZGZRZlVRckkKRGgvMzc2aUNwZGhBSHFORDlNNUxIWnpiUHNwOVNpcWorZHFYRTVUSFFSZVlvNzJXdmx4Y2VLUGdUSjVTY1VONQpta3p3Q25xdm83VmdLTFhnOFNtWDdVS3E5WWhERFFBRmhHeXNFQ0ZneFVRdCtuWXE4YjZUTlYveDQ4ZXRwUURRCjdHTCtSa3Eyb2FDV1ZUaTMyZWd6RDBkL2R4bmw4MmllMUZnM2FvaWNMdGRVMWR3R1k4SjFQQ3c3alBlRFlkQUEKa09QQ0dTVHZxOTZXV3RJL0x0TkFhN1JkQ2hOYjdXbGVYMkJPcnB0ZjlqdWVtbFl2ckFQYWRFcUhWakg1cnlQaApBQjM0N29tenQ3aGlvTklYdkdaS0t4NHp3azZFY2ZLYVZLZVY3dEhWUFNZcFhmOWxPakZ3Mks0R3d5ZkRQTm9VCjRvVU9yYVRQQmp4Z0VNanlKeUI0WDdaQnc3L2xCM1ZmT2NWYU9yMlpTaUVvWWxma3gzcmFaeXhzNGxIVlVRbjUKUEswRXFNS2Z3LzNrY09VVlB1NUorUHJnWVlRY1pMdDNHa0NZMnQrOEV3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nTPM_BOOTSTRAP_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM2tnQSt4d1BmLzVOMytjTk9YYmhiMDNxTWhiY1pBTGV6bmZ5T29UVWpYZ29oS1lJCkFaeVRSMVhzQjNwa21EQm40ejMrcEtnQWtEcVNIZFZudzVmM003MmowUG1iWVNZTkJCK0hnYjJseEVYWmdMQngKWDl2akFBVzMzWWVQYXhONkhmK3g1RE0xWVU2bVFOT3I2NUJ0MGp5V3hKN0lpSWVVaXZSenphd3c1bitQY25DYgo4M2ZTdkF0dCtLb2pQOCsyaUY1MzNjdHY5NDVteXZKdEJrVytsZi9tWXkxUUJ6R2xIc0wwZ09QaWttWXlYanlBCkJuZE5sMFB5WCtrMmVORUZNZEJnKytGY2pZMlFjSSs5VG42SnhqTXo3VmJhc3ZxbmVqMUkwUUNieTZVQU9pTWUKTXhMSnhiOWltME1OVEVSWjFURDdSUzZEYmk5S1lWbVdWTks3TFFJREFRQUJBb0lCQURZa0JoOGpzTS9OWm5UdQpuMjA3ZkVIaTBiUVZGdVhDUURnOGhYTEU5MHVrOUlPSXVFTUNPdXBCYnAzTXJUTlhlUHBqMTRJT0RLTVVyUkhZCnNLODJ0TWEwdm5Hd1ZtMEZlbDZpZWx3NnorVThXVE9yNWxXQnBxc1MrWHViSU83ay9kWFFPYWxhWXJwYWtJcVMKTkJvS29nRTI4a2NlWUx4R2Y4TVBzeVFwdUhodnJialp3enY5UFY1bVdzMmNsKytad2lJN1YzbkYxcVUyTjJiMgpSdk9VK0FGRndUSzQ5UjJXMWhYSkJQb0RLeVh3amFCcitNMDdnWmZYL2lmQmNUaEFhOWRBb21NWVJ6WFQrSnl2CmkrWmpIbENJbHEzSzErbzYvcXpRMWVHWURNdmdlajZLR0NnNE9lYWZ0cXZmdEcyc2h6NHFOcUcxRWRnZHpudS8KOHltT2FSa0NnWUVBK0cxUHd2RnRkTHpFQVdWT2RXeW85MXovQ0dBRmVCdkd4bDhxYnN2eVNZQnNjOVF4VHBPUgpWOHVUYlFXbXJBNi8yVnlqMCsyczNrY0NSYktFUUtRRjZjN3E2R0ticzBiNXhMYWVLRE9lTmVBOGZUT0kwZjRnCllKRytTdGZPNC9tOTFUNlJrSkExeE4vZ3R5NkVJWEtQbkFGZnBBWkhnUTVhRS96U1Fid2NOMFVDZ1lFQTVRNm4KbkxFSFB3WFl3bDBuVVB0SEZSREloVllabElXKzVvZUYzMTNCL1VMdTgvZmFvM25qdUdCUWhwNXZTbnl0cDllWQoxa21zOXdvMlM4bXJyM0c2ZnF5NGUrOVFWRVdvQWdDUHdkL1FnZmFPVDdJaWRaRVVMRnlGb3VzbWpzMDJNYVppCmhFRFpXa2g2UUVrMGZIVC9Dakd4Wjl5V0ZZUVVMblVTZk9MZ1hza0NnWUFhc1pRNmZEcW9xb2ZkSm9lUnNvVk4KWHg3QVJhRVEwTnRCQVlUTHR2cG56M2JYMDFzZytGWkx1c0l5bXNMWUJoV3pRM01QR0tEVW1ZaXkrSVdoZEg1MgpLeGV1dExuS1A3d2kyUVNSaVVwY3U2V0VSbjlUSVIxVmd4T1JjekwxNkNYdnZmTmlOenl2MU9hT2lGOEdRUXNSClZreHlrWUlwYWVOZjluQ1pRNTg4aVFLQmdRRGNuZHJPVHF1ZUJmR2Fjc0oxZXpBaG1BS3FlaDAxTWdTR1lTMk4Keis0U0VxKzRCNWRzTVBBbUc0NHp1dEdTT3JlL215WTM3c3BMUG1qQllrS2NQcnZUV21SdDZqZkNrenlZZ1JYMQpNNjdPSGowL2dXRXpQMExnMzFSUGNKRzRwT3Azczd2YmllSk8xTlA2cXdlRWYrTk5YRU4wdDc5T2hlSXlSTXhECndQaytFUUtCZ1FES1hma3BTUUVwY2RORnZUSmZUNys4QndWZU5UODVkQlJXV01Rc3JuY056d3ErK014dWF6Y2kKaVdxTVczY1RTR1JOOU9nWDF6dzZZRnBmQVF5MDBtNzNNNnFGRnlSRlZPSmZicnM3Nk1RWXlweWRlSm13aEJWWgpRZmF6cG5vcWFhSldsNW9BVTk3aTI4KzU2MHJ6UklXa2JhU2VzUTV1allBNWYrb2dZOEhjRUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: northamerica-northeast1-b\n'}, {'key': 'cluster-uid', 'value': 'e8585222f0ad46ae8702c3e4f03e0fb3d80a938140b04d6dabf5b95c949262f2'}, {'key': 'cluster-location', 'value': 'northamerica-northeast1-b'}]}, 'serviceAccounts': [{'email': 'sa-dia-pmoto-dis-upr-comp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/cloud-platform']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/gke-northamerica-northea-default-pool-6ddf92f8-1mcf', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'application': 'pm1t1', 'environment': 'upr', 'goog-composer-environment': 'pmoto-comp-001', 'goog-composer-environment-uuid': 'fb121f36-0bc4-4872-b1a4-7890e2b77bd0', 'goog-composer-location': 'northamerica-northeast1', 'goog-composer-version': 'composer-1-20-11-airflow-1-10-15', 'goog-gke-node': '', 'owner': 'aps-cloud', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'oXW5v2JnOzs=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': True, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'X18GzzeLDrk=', 'lastStartTimestamp': '2023-05-12T18:28:14.079-07:00', 'networkPerformanceConfig': {'totalEgressBandwidthTier': 'DEFAULT'}}
{'kind': 'compute#instance', 'id': '2157138028948315555', 'creationTimestamp': '2023-05-12T18:09:32.956-07:00', 'name': 'gke-northamerica-northea-default-pool-6ddf92f8-8noh', 'tags': {'items': ['allow-internet', 'gke-northamerica-northeast1-pmo-6076886b-gke-e8585222-node', 'http-allow'], 'fingerprint': 'aqFFR76Qf_Q='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-highmem-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/rfc-snet-gfpre-pmoto-upr-wkr-nane', 'networkIP': '10.195.35.26', 'name': 'nic0', 'aliasIpRanges': [{'ipCidrRange': '100.64.20.192/26', 'subnetworkRangeName': 'nonrfc-snet-gfpre-pmoto-upr-pod-nane'}], 'fingerprint': 'MrlcKIYYnxk=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/gke-northamerica-northea-default-pool-6ddf92f8-8noh', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node', 'https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid', 'https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos', 'https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'GVNIC'}, {'type': 'SEV_CAPABLE'}, {'type': 'SECURE_BOOT'}, {'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'UEFI_COMPATIBLE'}], 'diskSizeGb': '100', 'shieldedInstanceInitialState': {'pk': {'content': 'MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-', 'fileType': 'X509'}, 'keks': [{'content': 'MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X', 'fileType': 'X509'}], 'dbs': [{'content': 'MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8', 'fileType': 'X509'}], 'dbxs': [{'content': 'MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==', 'fileType': 'X509'}, {'content': 'MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==', 'fileType': 'X509'}, {'content': 'MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=', 'fileType': 'X509'}, {'content': 'MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4', 'fileType': 'X509'}]}, 'architecture': 'X86_64'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'PwbdmPbBJew=', 'items': [{'key': 'instance-template', 'value': 'projects/665550607499/global/instanceTemplates/gke-northamerica-northea-default-pool-6b8260ba'}, {'key': 'created-by', 'value': 'projects/665550607499/zones/northamerica-northeast1-b/instanceGroupManagers/gke-northamerica-northea-default-pool-6ddf92f8-grp'}, {'key': 'serial-port-logging-enable', 'value': 'false'}, {'key': 'kube-labels', 'value': 'cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-cpu-scaling-level=4,cloud.google.com/gke-logging-variant=DEFAULT,cloud.google.com/gke-max-pods-per-node=32,cloud.google.com/gke-netd-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=n1,node.kubernetes.io/masq-agent-ds-ready=true'}, {'key': 'google-compute-enable-pcid', 'value': 'true'}, {'key': 'VmDnsSetting', 'value': 'ZonalPreferred'}, {'key': 'kubelet-config', 'value': 'apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 100.66.2.138\nclusterDomain: cluster.local\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\n  pid.available: 10%\nfeatureGates:\n  CSIMigrationGCE: true\n  DisableKubeletCloudCredentialProviders: false\n  DynamicKubeletConfig: false\n  ExecProbeTimeout: false\n  InTreePluginAWSUnregister: true\n  InTreePluginAzureDiskUnregister: true\n  InTreePluginOpenStackUnregister: true\n  InTreePluginvSphereUnregister: true\n  RotateKubeletServerCertificate: true\nkernelMemcgNotification: true\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 80m\n  ephemeral-storage: 41Gi\n  memory: 3237Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nstaticPodPath: /etc/kubernetes/manifests\n'}, {'key': 'kubeconfig', 'value': 'apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    server: https://10.195.35.194\n    certificate-authority: \'/etc/srv/kubernetes/pki/ca-certificates.crt\'\n  name: default-cluster\ncontexts:\n- context:\n    cluster: default-cluster\n    namespace: default\n    user: exec-plugin-auth\n  name: default-context\ncurrent-context: default-context\nusers:\n- name: exec-plugin-auth\n  user:\n    exec:\n      apiVersion: "client.authentication.k8s.io/v1beta1"\n      command: \'/home/kubernetes/bin/gke-exec-auth-plugin\'\n      args: ["--cache-dir", \'/var/lib/kubelet/pki/\']\n'}, {'key': 'cluster-name', 'value': 'northamerica-northeast1-pmo-6076886b-gke'}, {'key': 'gci-update-strategy', 'value': 'update_disabled'}, {'key': 'gci-metrics-enabled', 'value': 'true'}, {'key': 'configure-sh', 'value': '#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\'v0.9.1\'\nDEFAULT_CNI_HASH=\'b5a59660053a5f1a33b5dd5624d9ed61864482d9dc8e5b79c9b3afc3d6f62c9830e1c30f9ccba6ee76f5fb1ff0504e58984420cc0680b26cb643f1cb07afbd1c\'\nDEFAULT_NPD_VERSION=\'v0.8.9\'\nDEFAULT_NPD_HASH_AMD64=\'4919c47447c5f3871c1dc3171bbb817a38c8c8d07a6ce55a77d43cadc098e9ad608ceeab121eec00c13c0b6a2cc3488544d61ce84cdade1823f3fd5163a952de\'\nDEFAULT_NPD_HASH_ARM64=\'8ccb42a862efdfc1f25ca9a22f3fd36f9fdff1ac618dd7d39e3b5991505dd610d432364420896ad71f42197a116f28a85dde58b129baa075ebb7312caa57f852\'\nDEFAULT_CRICTL_VERSION=\'v1.23.0\'\nDEFAULT_CRICTL_AMD64_SHA512=\'f8c40c66c8d9a85e857399506f4977564890815b02658eec591114e04bd8bc6b8ea08bcc159af0088b5eda7bf0dfd16096bf0c174819c204193fb7343ae7d9d5\'\nDEFAULT_CRICTL_ARM64_SHA512=\'261ac360b0ac3fc88c81f1cc348f84b0df0b07ca4db61b0e647c142882d129ba11d21d0de373a27ecfd984436a08a11b19cde2ad5e3412e5d03203caedd62d92\'\nDEFAULT_MOUNTER_TAR_SHA=\'7956fd42523de6b3107ddc3ce0e75233d2fcb78436ff07a1389b6eaac91fb2b1b72a08f7a219eaf96ba1ca4da8d45271002e0d60e0644e796c665f99bb356516\'\n###\n\n# This version needs to be the same as in gke/cluster/gce/gci/configure-helper.sh\nGKE_CONTAINERD_INFRA_CONTAINER="${CONTAINERD_INFRA_CONTAINER:-gke.gcr.io/pause:3.6@sha256:10008c36b4611b44db1229451675d5d7d86c7ddf4ef00f883d806a01547203f6}"\n\nRIPTIDE_FUSE_BUCKET="${RIPTIDE_FUSE_BUCKET:-gke-release}"\nRIPTIDE_SNAPSHOTTER_BUCKET="${RIPTIDE_SNAPSHOTTER_BUCKET:-gke-release}"\nRIPTIDE_FUSE_VERSION="${RIPTIDE_FUSE_VERSION:-v0.120.0}"\nRIPTIDE_SNAPSHOTTER_VERSION="${RIPTIDE_SNAPSHOTTER_VERSION:-v1.4-21}"\n\n# Standard curl flags.\nCURL_FLAGS=\'--fail --silent --show-error --retry 5 --retry-delay 3 --connect-timeout 10 --retry-connrefused\'\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\n# A function that fetches a GCE metadata value and echoes it out.\n# Args:\n#   $1 : URL path after /computeMetadata/v1/ (without heading slash).\n#   $2 : An optional default value to echo out if the fetch fails.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction get-metadata-value {\n  local default="${2:-}"\n\n  local status\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H \'Metadata-Flavor: Google\' \\\n    "http://metadata/computeMetadata/v1/${1}" \\\n  || status="$?"\n  status="${status:-0}"\n\n  if [[ "${status}" -eq 0 || -z "${default}" ]]; then\n    return "${status}"\n  else\n    echo "${default}"\n  fi\n}\n\n# A function to fetch kube-env from GCE metadata server\n# or using hurl on the master if available\nfunction download-kube-env {\n  (\n    umask 077\n    local kube_env_path="/tmp/kube-env.yaml"\n    if [[ "$(is-master)" == "true" && $(use-hurl) = "true" ]]; then\n      local kube_env_path="${KUBE_HOME}/kube-env.yaml"\n      download-kube-env-hurl "${kube_env_path}"\n    else\n      local meta_path="http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env"\n      echo "Downloading kube-env via GCE metadata from ${meta_path} to ${kube_env_path}"\n      # shellcheck disable=SC2086\n      retry-forever 10 curl ${CURL_FLAGS} \\\n        -H "X-Google-Metadata-Request: True" \\\n        -o "${kube_env_path}" \\\n        "${meta_path}"\n    fi\n\n    # Convert the yaml format file into a shell-style file.\n    eval "$(python3 -c \'\'\'\nimport pipes,sys,yaml\nitems = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print("readonly {var}={value}".format(var=k, value=pipes.quote(str(v))))\n\'\'\' < "${kube_env_path}" > "${KUBE_HOME}/kube-env")"\n\n    # Leave kube-env if we are a master\n    if [[ "$(is-master)" != "true" ]]; then\n      rm -f "${kube_env_path}"\n    fi\n  )\n}\n\n# A function to pull kube-env from HMS using hurl\nfunction download-kube-env-hurl {\n  local -r kube_env_path="$1"\n  local -r endpoint=$(get-metadata-value "instance/attributes/gke-api-endpoint")\n  local -r kube_env_hms_path=$(get-metadata-value "instance/attributes/kube-env-path")\n\n  echo "Downloading kube-env via hurl from ${kube_env_hms_path} to ${kube_env_path}"\n  retry-forever 30 ${KUBE_HOME}/bin/hurl --hms_address $endpoint \\\n    --dst "${kube_env_path}" \\\n    "${kube_env_hms_path}"\n  chmod 600 "${kube_env_path}"\n}\n\nfunction download-kubelet-config {\n  local -r dest="$1"\n  echo "Downloading Kubelet config file, if it exists"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config="/tmp/kubelet-config.yaml"\n    # shellcheck disable=SC2086\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H "X-Google-Metadata-Request: True" \\\n      -o "${tmp_kubelet_config}" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config\n    # only write to the final location if curl succeeds\n    mv "${tmp_kubelet_config}" "${dest}"\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-master-certs from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs="/tmp/kube-master-certs.yaml"\n    # shellcheck disable=SC2086\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H "X-Google-Metadata-Request: True" \\\n      -o "${tmp_kube_master_certs}" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval "$(python3 -c \'\'\'\nimport pipes,sys,yaml\nitems = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print("readonly {var}={value}".format(var=k, value=pipes.quote(str(v))))\n\'\'\' < "${tmp_kube_master_certs}" > "${KUBE_HOME}/kube-master-certs")"\n    rm -f "${tmp_kube_master_certs}"\n  )\n}\n\nfunction validate-hash {\n  local -r file="$1"\n  local -r expected="$2"\n\n  actual_sha1=$(sha1sum "${file}" | awk \'{ print $1 }\') || true\n  actual_sha512=$(sha512sum "${file}" | awk \'{ print $1 }\') || true\n  if [[ "${actual_sha1}" != "${expected}" ]] && [[ "${actual_sha512}" != "${expected}" ]]; then\n    echo "== ${file} corrupted, sha1 ${actual_sha1}/sha512 ${actual_sha512} doesn\'t match expected ${expected} =="\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL="http://metadata.google.internal/computeMetadata/v1/instance"\nfunction get-credentials {\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H "Metadata-Flavor: Google" \\\n    "${GCE_METADATA_INTERNAL}/service-accounts/default/token" \\\n  | python3 -c \'import sys; import json; print(json.loads(sys.stdin.read())["access_token"])\'\n}\n\nfunction valid-storage-scope {\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H "Metadata-Flavor: Google" \\\n    "${GCE_METADATA_INTERNAL}/service-accounts/default/scopes" \\\n  | grep -E "auth/devstorage|auth/cloud-platform"\n}\n\n# Determine if this node is a master using metadata\nfunction is-master {\n  local -r is_master_val=${KUBERNETES_MASTER:-$(get-metadata-value "instance/attributes/is-master-node")}\n  local result="false"\n  if [[ ${is_master_val:-} == "true" ]]; then\n    result="true"\n  fi\n  echo $result\n}\n\n# A function that returns "true" if hurl should be used, "false" otherwise.\nfunction use-hurl {\n  local -r enable_hms_read=${ENABLE_HMS_READ:-$(get-metadata-value "instance/attributes/enable_hms_read")}\n  local result="false"\n\n  if [[ -f "${KUBE_HOME}/bin/hurl" && "${enable_hms_read}" == "true" ]]; then\n    result="true"\n  fi\n  echo $result\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha512/sha1 hash of the URL. Can be "" if the sha512/sha1 hash is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash="$1"\n  shift 1\n\n  while true; do\n    for url in "$@"; do\n      local file="${url##*/}"\n      rm -f "${file}"\n      # if the url belongs to GCS API we should use oauth2_token in the headers if the VM service account has storage scopes\n      local curl_headers=""\n\n      if [[ "$url" =~ ^https://storage.googleapis.com.* ]] ; then\n        local canUseCredentials=0\n\n        echo "Getting the scope of service account configured for VM."\n        if ! valid-storage-scope ; then\n          canUseCredentials=1\n          # this behavior is preserved for backward compatibility. We want to fail fast if SA is not available\n          # and try to download without SA if scope does not exist on SA\n          echo "No service account or service account without storage scope. Attempt to download without service account token."\n        fi\n\n        if [[ "${canUseCredentials}" == "0" ]] ; then\n          echo "Getting the service account access token configured for VM."\n          local access_token="";\n          if access_token=$(get-credentials); then\n            echo "Service account access token is received. Downloading ${url} using this token."\n          else\n            echo "Cannot get a service account token. Exiting."\n            exit 1\n          fi\n\n          curl_headers=${access_token:+Authorization: Bearer "${access_token}"}\n        fi\n      fi\n      if ! curl ${curl_headers:+-H "${curl_headers}"} -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 --retry-connrefused "${url}"; then\n        echo "== Failed to download ${url}. Retrying. =="\n      elif [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then\n        echo "== Hash validation of ${url} failed. Retrying. =="\n      else\n        if [[ -n "${hash}" ]]; then\n          echo "== Downloaded ${url} (HASH = ${hash}) =="\n        else\n          echo "== Downloaded ${url} =="\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction record-preload-info {\n  echo "$1,$2" >> "${KUBE_HOME}/preload_info"\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs "${key},${value}" "${KUBE_HOME}/preload_info"\n}\n\nfunction split-commas {\n  echo -e "${1//,/\'\\n\'}"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p "$flexvolume_plugin_dir"\n  mount --bind "$flexvolume_plugin_dir" "$flexvolume_plugin_dir"\n  mount -o remount,exec "$flexvolume_plugin_dir"\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME="${KUBE_HOME}/containerized_mounter"\n  local -r mounter_tar_sha="${DEFAULT_MOUNTER_TAR_SHA}"\n  if is-preloaded "mounter" "${mounter_tar_sha}"; then\n    echo "mounter is preloaded."\n    return\n  fi\n\n  echo "Downloading gci mounter tools."\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}"\n  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}"\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs"\n  download-or-bust "${mounter_tar_sha}" "https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar"\n  cp "${KUBE_HOME}/kubernetes/server/bin/mounter" "${CONTAINERIZED_MOUNTER_HOME}/mounter"\n  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}/mounter"\n  mv "${KUBE_HOME}/mounter.tar" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C "${CONTAINERIZED_MOUNTER_HOME}/rootfs"\n  rm /tmp/mounter.tar\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet"\n\n  record-preload-info "mounter" "${mounter_tar_sha}"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n "${NODE_PROBLEM_DETECTOR_VERSION:-}" ]]; then\n      local -r npd_version="${NODE_PROBLEM_DETECTOR_VERSION}"\n      local -r npd_hash="${NODE_PROBLEM_DETECTOR_TAR_HASH}"\n  else\n      local -r npd_version="${DEFAULT_NPD_VERSION}"\n      case "${HOST_PLATFORM}/${HOST_ARCH}" in\n        linux/amd64)\n          local -r npd_hash="${DEFAULT_NPD_HASH_AMD64}"\n          ;;\n        linux/arm64)\n          local -r npd_hash="${DEFAULT_NPD_HASH_ARM64}"\n          ;;\n        # no other architectures are supported currently.\n        # Assumption is that this script only runs on linux,\n        # see cluster/gce/windows/k8s-node-setup.psm1 for windows\n        # https://github.com/kubernetes/node-problem-detector/releases/\n        *)\n          echo "Unrecognized version and platform/arch combination:"\n          echo "$DEFAULT_NPD_VERSION $HOST_PLATFORM/$HOST_ARCH"\n          echo "Set NODE_PROBLEM_DETECTOR_VERSION and NODE_PROBLEM_DETECTOR_TAR_HASH to overwrite"\n          exit 1\n          ;;\n      esac\n  fi\n  local -r npd_tar="node-problem-detector-${npd_version}-${HOST_PLATFORM}_${HOST_ARCH}.tar.gz"\n\n  if is-preloaded "${npd_tar}" "${npd_hash}"; then\n    echo "${npd_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading ${npd_tar}."\n  local -r npd_release_path="${NODE_PROBLEM_DETECTOR_RELEASE_PATH:-https://storage.googleapis.com/kubernetes-release}"\n  download-or-bust "${npd_hash}" "${npd_release_path}/node-problem-detector/${npd_tar}"\n  local -r npd_dir="${KUBE_HOME}/node-problem-detector"\n  mkdir -p "${npd_dir}"\n  tar xzf "${KUBE_HOME}/${npd_tar}" -C "${npd_dir}" --overwrite\n  mv "${npd_dir}/bin"/* "${KUBE_BIN}"\n  chmod a+x "${KUBE_BIN}/node-problem-detector"\n  rmdir "${npd_dir}/bin"\n  rm -f "${KUBE_HOME}/${npd_tar}"\n\n  record-preload-info "${npd_tar}" "${npd_hash}"\n}\n\nfunction install-cni-binaries {\n  local -r cni_version=${CNI_VERSION:-$DEFAULT_CNI_VERSION}\n  if [[ -n "${CNI_VERSION:-}" ]]; then\n      local -r cni_hash="${CNI_HASH:-}"\n  else\n      local -r cni_hash="${DEFAULT_CNI_HASH}"\n  fi\n\n  local -r cni_tar="${CNI_TAR_PREFIX}${cni_version}.tgz"\n  local -r cni_url="${CNI_STORAGE_URL_BASE}/${cni_version}/${cni_tar}"\n\n  if is-preloaded "${cni_tar}" "${cni_hash}"; then\n    echo "${cni_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading cni binaries"\n  download-or-bust "${cni_hash}" "${cni_url}"\n  local -r cni_dir="${KUBE_HOME}/cni"\n  mkdir -p "${cni_dir}/bin"\n  tar xzf "${KUBE_HOME}/${cni_tar}" -C "${cni_dir}/bin" --overwrite\n  mv "${cni_dir}/bin"/* "${KUBE_BIN}"\n  rmdir "${cni_dir}/bin"\n  rm -f "${KUBE_HOME}/${cni_tar}"\n\n  record-preload-info "${cni_tar}" "${cni_hash}"\n}\n\n# Install crictl binary.\n# Assumptions: HOST_PLATFORM and HOST_ARCH are specified by calling detect_host_info.\nfunction install-crictl {\n  if [[ -n "${CRICTL_VERSION:-}" ]]; then\n    local -r crictl_version="${CRICTL_VERSION}"\n    local -r crictl_hash="${CRICTL_TAR_HASH}"\n  else\n    local -r crictl_version="${DEFAULT_CRICTL_VERSION}"\n    case "${HOST_PLATFORM}/${HOST_ARCH}" in\n      linux/amd64)\n        local -r crictl_hash="${DEFAULT_CRICTL_AMD64_SHA512}"\n        ;;\n      linux/arm64)\n        local -r crictl_hash="${DEFAULT_CRICTL_ARM64_SHA512}"\n        ;;\n      *)\n        echo "Unrecognized version and platform/arch combination:"\n        echo "$DEFAULT_CRICTL_VERSION $HOST_PLATFORM/$HOST_ARCH"\n        echo "Set CRICTL_VERSION and CRICTL_TAR_HASH to overwrite"\n        exit 1\n    esac\n  fi\n  local -r crictl="crictl-${crictl_version}-${HOST_PLATFORM}-${HOST_ARCH}.tar.gz"\n\n  # Create crictl config file.\n  cat > /etc/crictl.yaml <<EOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded "${crictl}" "${crictl_hash}"; then\n    echo "crictl is preloaded"\n    return\n  fi\n\n  echo "Downloading crictl"\n  local -r crictl_path="https://storage.googleapis.com/k8s-artifacts-cri-tools/release/${crictl_version}"\n  download-or-bust "${crictl_hash}" "${crictl_path}/${crictl}"\n  tar xf "${crictl}"\n  mv crictl "${KUBE_BIN}/crictl"\n  rm -f "${crictl}"\n\n  record-preload-info "${crictl}" "${crictl_hash}"\n}\n\nfunction preload-pause-image {\n  if is-preloaded "pause" "${GKE_CONTAINERD_INFRA_CONTAINER}"; then\n    echo "pause image is preloaded"\n    return\n  fi\n\n  # preloading pause image. It will be used in preloader and will be\n  # useful for staging builds where access_token is needed to pull the image\n  local access_token="";\n\n  if access_token=$(get-credentials); then\n    "${KUBE_BIN}/crictl" pull --creds "oauth2accesstoken:${access_token}" ${GKE_CONTAINERD_INFRA_CONTAINER}\n  else\n    echo "No access token. Pulling without it."\n    "${KUBE_BIN}/crictl" pull ${GKE_CONTAINERD_INFRA_CONTAINER}\n  fi\n  record-preload-info "pause" "${GKE_CONTAINERD_INFRA_CONTAINER}"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! "${EXEC_AUTH_PLUGIN_URL:-}" ]]; then\n      return\n  fi\n  local -r plugin_url="${EXEC_AUTH_PLUGIN_URL}"\n  local -r plugin_hash="${EXEC_AUTH_PLUGIN_HASH}"\n\n  if is-preloaded "gke-exec-auth-plugin" "${plugin_hash}"; then\n    echo "gke-exec-auth-plugin is preloaded"\n    return\n  fi\n\n  echo "Downloading gke-exec-auth-plugin binary"\n  download-or-bust "${plugin_hash}" "${plugin_url}"\n  mv "${KUBE_HOME}/gke-exec-auth-plugin" "${KUBE_BIN}/gke-exec-auth-plugin"\n  chmod a+x "${KUBE_BIN}/gke-exec-auth-plugin"\n\n  if [[ ! "${EXEC_AUTH_PLUGIN_LICENSE_URL:-}" ]]; then\n      return\n  fi\n  local -r license_url="${EXEC_AUTH_PLUGIN_LICENSE_URL}"\n  echo "Downloading gke-exec-auth-plugin license"\n  download-or-bust "" "${license_url}"\n  mv "${KUBE_HOME}/LICENSE" "${KUBE_BIN}/gke-exec-auth-plugin-license"\n\n  record-preload-info "gke-exec-auth-plugin" "${plugin_hash}"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir="${KUBE_HOME}/kube-manifests"\n  mkdir -p "${dst_dir}"\n  local manifests_tar_urls\n  while IFS= read -r url; do\n    manifests_tar_urls+=("$url")\n  done < <(split-commas "${KUBE_MANIFESTS_TAR_URL}")\n  local -r manifests_tar="${manifests_tar_urls[0]##*/}"\n  if [ -n "${KUBE_MANIFESTS_TAR_HASH:-}" ]; then\n    local -r manifests_tar_hash="${KUBE_MANIFESTS_TAR_HASH}"\n  else\n    echo "Downloading k8s manifests hash (not found in env)"\n    download-or-bust "" "${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha512}"\n    local -r manifests_tar_hash=$(cat "${manifests_tar}.sha512")\n  fi\n\n  if is-preloaded "${manifests_tar}" "${manifests_tar_hash}"; then\n    echo "${manifests_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading k8s manifests tar"\n  download-or-bust "${manifests_tar_hash}" "${manifests_tar_urls[@]}"\n  tar xzf "${KUBE_HOME}/${manifests_tar}" -C "${dst_dir}" --overwrite\n  local -r kube_addon_registry="${KUBE_ADDON_REGISTRY:-k8s.gcr.io}"\n  if [[ "${kube_addon_registry}" != "k8s.gcr.io" ]]; then\n    find "${dst_dir}" \\(-name \'*.yaml\' -or -name \'*.yaml.in\'\\) -print0 | \\\n      xargs -0 sed -ri "s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@"\n    find "${dst_dir}" \\(-name \'*.manifest\' -or -name \'*.json\'\\) -print0 | \\\n      xargs -0 sed -ri "s@(image\\":\\s+\\")k8s.gcr.io@\\1${kube_addon_registry}@"\n  fi\n  cp "${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh" "${KUBE_BIN}/configure-helper.sh"\n  cp "${dst_dir}/kubernetes/gci-trusty/configure-kubeapiserver.sh" "${KUBE_BIN}/configure-kubeapiserver.sh"\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh" "${KUBE_BIN}/"\n  fi\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh" "${KUBE_BIN}/"\n  fi\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh" "${KUBE_BIN}/"\n  fi\n  cp "${dst_dir}/kubernetes/gci-trusty/health-monitor.sh" "${KUBE_BIN}/health-monitor.sh"\n  cp "${dst_dir}/kubernetes/gci-trusty/networkd-monitor.sh" "${KUBE_BIN}/networkd-monitor.sh"\n\n  rm -f "${KUBE_HOME}/${manifests_tar}"\n  rm -f "${KUBE_HOME}/${manifests_tar}.sha512"\n\n  record-preload-info "${manifests_tar}" "${manifests_tar_hash}"\n}\n\n# Installs hurl to ${KUBE_HOME}/bin/hurl if not already installed.\nfunction install-hurl {\n  cd "${KUBE_HOME}"\n  if [[ -f "${KUBE_HOME}/bin/hurl" ]]; then\n    echo "install-hurl: hurl already installed"\n    return\n  fi\n\n  local -r hurl_gcs_att="instance/attributes/hurl-gcs-url"\n  local -r hurl_gcs_url=${HURL_GCS_URL:-$(get-metadata-value "${hurl_gcs_att}")}\n\n  if [[ -z "${hurl_gcs_url}" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo "install-hurl: Unable to find GCE metadata ${hurl_gcs_att}"\n    return\n  fi\n\n  # Download hurl binary from a GCS bucket.\n  local -r hurl_bin="hurl"\n  echo "install-hurl: Installing hurl from ${hurl_gcs_url} ... "\n  download-or-bust "" "${hurl_gcs_url}"\n  if [[ -f "${KUBE_HOME}/${hurl_bin}" ]]; then\n    chmod a+x ${KUBE_HOME}/${hurl_bin}\n    mv "${KUBE_HOME}/${hurl_bin}" "${KUBE_BIN}/${hurl_bin}"\n    echo "install-hurl: hurl installed to ${KUBE_BIN}/${hurl_bin}"\n    return\n  fi\n}\n\n# Installs inplace to ${KUBE_HOME}/bin/inplace if not already installed.\nfunction install-inplace {\n  cd "${KUBE_HOME}"\n  if [[ -f "${KUBE_HOME}/bin/inplace" ]]; then\n    echo "install-inplace: inplace already installed"\n    return\n  fi\n  local -r inplace_gcs_att="instance/attributes/inplace-gcs-url"\n  local -r inplace_gcs_url=${INPLACE_GCS_URL:-$(get-metadata-value "${inplace_gcs_att}")}\n  if [[ -z "${inplace_gcs_url}" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo "install-inplace: Unable to find GCE metadata ${inplace_gcs_att}"\n    return\n  fi\n  echo "install-inplace: Installing inplace from ${inplace_gcs_url} ..."\n  download-or-bust "" "${inplace_gcs_url}"\n  local -r inplace_bin="inplace"\n  if [[ -f "${KUBE_HOME}/${inplace_bin}" ]]; then\n    mv "${KUBE_HOME}/${inplace_bin}" "${KUBE_BIN}/${inplace_bin}"\n    if [[ ! -d "${KUBE_HOME}/${inplace_bin}" ]]; then\n      mkdir -p "${KUBE_HOME}/${inplace_bin}"\n    fi\n    cat > "${KUBE_HOME}/${inplace_bin}/inplace.hash" <<EOF\n${inplace_gcs_url}\nEOF\n    echo "install-inplace: inplace installed to ${KUBE_BIN}/${inplace_bin}"\n    return\n  fi\n}\n\n# A function to download in-place component manifests if in-place agent is\n# present.\nfunction inplace-run-once {\n  if [[ -f "${KUBE_HOME}/bin/inplace" ]]; then\n    echo "inplace-run-once: using inplace to download inplace component manefists"\n    local dst_dir="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty"\n    mkdir -p "${dst_dir}/in-place"\n    mkdir -p "${dst_dir}/gce-extras/in-place"\n    ${KUBE_HOME}/bin/inplace --mode=run-once --in_place_addon_path="${dst_dir}/gce-extras/in-place" --master_pod_path="${dst_dir}/in-place"\n  fi\n}\n\nfunction install-auger {\n  echo "Downloading auger binary"\n  if [[ -f "${KUBE_HOME}/bin/auger" ]]; then\n    echo "auger is already installed"\n    return\n  fi\n  AUGER_STORE_PATH="${AUGER_STORE_PATH:-https://storage.googleapis.com/gke-release-staging/auger}"\n  AUGER_VERSION="${AUGER_VERSION:-v1.0.0-gke.1}"\n  download-or-bust "" "${AUGER_STORE_PATH}/${AUGER_VERSION}/auger.sha1"\n  sha1="$(cat auger.sha1)"\n  readonly sha1 # Declare readonly separately to avoid masking error values.\n  rm -f "auger.sha1"\n  download-or-bust "${sha1}" "${AUGER_STORE_PATH}/${AUGER_VERSION}/auger"\n  mv "${KUBE_HOME}/auger" "${KUBE_HOME}/bin/auger"\n  chmod a+x "${KUBE_HOME}/bin/auger"\n  record-preload-info "auger" "${sha1}"\n}\n\n# Extract etcdctl binary from etcd image.\nfunction install-etcdctl {\n  echo "Installing etcdctl binary"\n  if [[ -f "${KUBE_HOME}/bin/etcdctl" ]]; then\n    echo "etcdctl is already installed"\n    return\n  fi\n  local -r etcd_image="gcr.io/gke-master-images/etcd:${ETCDCTL_VERSION}"\n  container_id="$(docker create "${etcd_image}" sh)"\n  readonly containerId\n  docker cp "${container_id}:usr/local/bin/etcdctl" "${KUBE_HOME}/bin/etcdctl"\n  chmod a+x "${KUBE_HOME}/bin/etcdctl"\n  docker rm "${container_id}"\n  docker rmi "${etcd_image}"\n}\n\nfunction install-gcfsd {\n  echo "Downloading Riptide FUSE client"\n  if is-preloaded "gcfsd" "${RIPTIDE_FUSE_VERSION}"; then\n    echo "gcfsd is preloaded."\n    return\n  fi\n\n  if [[ "${HOST_ARCH}" == "arm64" ]]; then\n    RIPTIDE_FUSE_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_FUSE_BUCKET}/gcfsd/${RIPTIDE_FUSE_VERSION}/arm64"\n  else\n    RIPTIDE_FUSE_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_FUSE_BUCKET}/gcfsd/${RIPTIDE_FUSE_VERSION}"\n  fi\n\n  if [[ "${RIPTIDE_FUSE_VERSION}" > v0.19.0 ]] && [[ "${RIPTIDE_FUSE_VERSION}" != v0.4.0 ]] ; then\n    download-or-bust "" "${RIPTIDE_FUSE_STORE_PATH}/gcfsd.tar.gz"\n  fi\n  download-or-bust "" "${RIPTIDE_FUSE_STORE_PATH}/gcfsd"\n  mv "${KUBE_HOME}/gcfsd" "${KUBE_HOME}/bin/gcfsd"\n  chmod a+x "${KUBE_HOME}/bin/gcfsd"\n  record-preload-info "gcfsd" "${RIPTIDE_FUSE_VERSION}"\n}\n\nfunction install-riptide-snapshotter {\n  echo "Downloading Riptide snapshotter"\n  if is-preloaded "containerd-gcfs-grpc" "${RIPTIDE_SNAPSHOTTER_VERSION}"; then\n    echo "containerd-gcfs-grpc is preloaded."\n    return\n  fi\n  RIPTIDE_SNAPSHOTTER_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_SNAPSHOTTER_BUCKET}/gcfs-snapshotter/${RIPTIDE_SNAPSHOTTER_VERSION}"\n  if [[ "${RIPTIDE_SNAPSHOTTER_VERSION}" > v1.4-2 ]]; then\n    download-or-bust "" "${RIPTIDE_SNAPSHOTTER_STORE_PATH}/containerd-gcfs-grpc.tar.gz"\n  fi\n\n  if [[ "${HOST_ARCH}" == "arm64" ]]; then\n    RIPTIDE_SNAPSHOTTER_BINARY="containerd-gcfs-grpc-arm64"\n  else\n    RIPTIDE_SNAPSHOTTER_BINARY="containerd-gcfs-grpc"\n  fi\n\n  download-or-bust "" "${RIPTIDE_SNAPSHOTTER_STORE_PATH}/${RIPTIDE_SNAPSHOTTER_BINARY}"\n  mv "${KUBE_HOME}/${RIPTIDE_SNAPSHOTTER_BINARY}" "${KUBE_HOME}/bin/containerd-gcfs-grpc"\n  chmod a+x "${KUBE_HOME}/bin/containerd-gcfs-grpc"\n  record-preload-info "containerd-gcfs-grpc" "${RIPTIDE_SNAPSHOTTER_VERSION}"\n}\n\n# Install Riptide FUSE client and Riptide snapshotter\nfunction install-riptide {\n  install-gcfsd\n  install-riptide-snapshotter\n}\n\nfunction configure-cgroup-mode {\n  if which cgroup_helper > /dev/null 2>&1; then\n    if [[ "${CGROUP_MODE:-}" == "v1" ]] && cgroup_helper show | grep -q \'unified\'; then\n      cgroup_helper set hybrid\n      echo "set cgroup config to hybrid, now rebooting..."\n      reboot\n    elif [[ "${CGROUP_MODE:-}" == "v2" ]] && cgroup_helper show | grep -q \'hybrid\'; then\n      cgroup_helper set unified\n      echo "set cgroup config to unified, now rebooting..."\n      reboot\n    fi\n  fi\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo "Try to load docker image file ${img}"\n  # Temporarily turn off errexit, because we don\'t want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n\n  if [[ "${CONTAINER_RUNTIME_NAME:-}" == "docker" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-docker load -i}\n  elif [[ "${CONTAINER_RUNTIME_NAME:-}" == "containerd" || "${CONTAINERD_TEST:-}"  == "containerd" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-ctr -n=k8s.io images import}\n  else\n    load_image_command="${LOAD_IMAGE_COMMAND:-}"\n  fi\n\n  # Deliberately word split load_image_command\n  # shellcheck disable=SC2086\n  until timeout 30 ${load_image_command} "${img}"; do\n    if [[ "${attempt_num}" == "${max_attempts}" ]]; then\n      echo "Fail to load docker image file ${img} using ${load_image_command} after ${max_attempts} retries. Exit!!"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo "Start loading kube-system docker images"\n  local -r img_dir="${KUBE_HOME}/kube-docker-files"\n  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n    try-load-docker-image "${img_dir}/kube-apiserver.tar"\n    try-load-docker-image "${img_dir}/kube-controller-manager.tar"\n    try-load-docker-image "${img_dir}/kube-scheduler.tar"\n  else\n    try-load-docker-image "${img_dir}/kube-proxy.tar"\n  fi\n}\n\n# If we are on ubuntu we can try to install docker\nfunction install-docker {\n  # bailout if we are not on ubuntu\n  if ! command -v apt-get >/dev/null 2>&1; then\n    echo "Unable to automatically install docker. Bailing out..."\n    return\n  fi\n  # Install Docker deps, some of these are already installed in the image but\n  # that\'s fine since they won\'t re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    --location \\\n    "https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID")/gpg" \\\n  | apt-key add -\n  add-apt-repository \\\n    "deb [arch=${HOST_ARCH}] https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID") \\\n    $release stable"\n\n  # Install Docker\n  apt-get update && \\\n    apt-get install -y --no-install-recommends "${GCI_DOCKER_VERSION:-"docker-ce=5:19.03.*"}"\n  rm -rf /var/lib/apt/lists/*\n}\n\n# If we are on ubuntu we can try to install containerd\nfunction install-containerd-ubuntu {\n  # bailout if we are not on ubuntu\n  if [[ -z "$(command -v lsb_release)" || $(lsb_release -si) != "Ubuntu" ]]; then\n    echo "Unable to automatically install containerd in non-ubuntu image. Bailing out..."\n    exit 2\n  fi\n\n  # Install dependencies, some of these are already installed in the image but\n  # that\'s fine since they won\'t re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository (as we install containerd from there)\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    --location \\\n    "https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID")/gpg" \\\n  | apt-key add -\n  add-apt-repository \\\n    "deb [arch=${HOST_ARCH}] https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID") \\\n    $release stable"\n\n  # Install containerd from Docker repo\n  apt-get update && \\\n    apt-get install -y --no-install-recommends containerd\n  rm -rf /var/lib/apt/lists/*\n\n  # Override to latest versions of containerd and runc\n  systemctl stop containerd\n  if [[ -n "${UBUNTU_INSTALL_CONTAINERD_VERSION:-}" ]]; then\n    # TODO(https://github.com/containerd/containerd/issues/2901): Remove this check once containerd has arm64 release.\n    if [[ $(dpkg --print-architecture) != "amd64" ]]; then\n      echo "Unable to automatically install containerd in non-amd64 image. Bailing out..."\n      exit 2\n    fi\n    # containerd versions have slightly different url(s), so try both\n    # shellcheck disable=SC2086\n    ( curl ${CURL_FLAGS} \\\n        --location \\\n        "https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}-${HOST_PLATFORM}-${HOST_ARCH}.tar.gz" \\\n      || curl ${CURL_FLAGS} \\\n        --location \\\n        "https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}.${HOST_PLATFORM}-${HOST_ARCH}.tar.gz" ) \\\n    | tar --overwrite -xzv -C /usr/\n  fi\n  if [[ -n "${UBUNTU_INSTALL_RUNC_VERSION:-}" ]]; then\n    # TODO: Remove this check once runc has arm64 release.\n    if [[ $(dpkg --print-architecture) != "amd64" ]]; then\n      echo "Unable to automatically install runc in non-amd64. Bailing out..."\n      exit 2\n    fi\n    # shellcheck disable=SC2086\n    curl ${CURL_FLAGS} \\\n      --location \\\n      "https://github.com/opencontainers/runc/releases/download/${UBUNTU_INSTALL_RUNC_VERSION}/runc.${HOST_ARCH}" --output /usr/sbin/runc \\\n    && chmod 755 /usr/sbin/runc\n  fi\n  sudo systemctl start containerd\n}\n\nfunction ensure-container-runtime {\n  container_runtime="${CONTAINER_RUNTIME:-docker}"\n  if [[ "${container_runtime}" == "docker" ]]; then\n    if ! command -v docker >/dev/null 2>&1; then\n      install-docker\n      if ! command -v docker >/dev/null 2>&1; then\n        echo "ERROR docker not found. Aborting."\n        exit 2\n      fi\n    fi\n    docker version\n  elif [[ "${container_runtime}" == "containerd" ]]; then\n    # Install containerd/runc if requested\n    if [[ -n "${UBUNTU_INSTALL_CONTAINERD_VERSION:-}" || -n "${UBUNTU_INSTALL_RUNC_VERSION:-}" ]]; then\n      install-containerd-ubuntu\n    fi\n    # Verify presence and print versions of ctr, containerd, runc\n    if ! command -v ctr >/dev/null 2>&1; then\n      echo "ERROR ctr not found. Aborting."\n      exit 2\n    fi\n    ctr --version\n\n    if ! command -v containerd >/dev/null 2>&1; then\n      echo "ERROR containerd not found. Aborting."\n      exit 2\n    fi\n    containerd --version\n\n    if ! command -v runc >/dev/null 2>&1; then\n      echo "ERROR runc not found. Aborting."\n      exit 2\n    fi\n    runc --version\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd "${KUBE_HOME}"\n  local server_binary_tar_urls\n  while IFS= read -r url; do\n    server_binary_tar_urls+=("$url")\n  done < <(split-commas "${SERVER_BINARY_TAR_URL}")\n  local -r server_binary_tar="${server_binary_tar_urls[0]##*/}"\n  if [[ -n "${SERVER_BINARY_TAR_HASH:-}" ]]; then\n    local -r server_binary_tar_hash="${SERVER_BINARY_TAR_HASH}"\n  else\n    echo "Downloading binary release sha512 (not found in env)"\n    download-or-bust "" "${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha512}"\n    local -r server_binary_tar_hash=$(cat "${server_binary_tar}.sha512")\n  fi\n\n  if is-preloaded "${server_binary_tar}" "${server_binary_tar_hash}"; then\n    echo "${server_binary_tar} is preloaded."\n  else\n    echo "Downloading binary release tar"\n    download-or-bust "${server_binary_tar_hash}" "${server_binary_tar_urls[@]}"\n    tar xzf "${KUBE_HOME}/${server_binary_tar}" -C "${KUBE_HOME}" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir="${KUBE_HOME}/kubernetes/server/bin"\n    local dst_dir="${KUBE_HOME}/kube-docker-files"\n    mkdir -p "${dst_dir}"\n    cp "${src_dir}/"*.docker_tag "${dst_dir}"\n    if [[ "${KUBERNETES_MASTER:-}" == "false" ]]; then\n      cp "${src_dir}/kube-proxy.tar" "${dst_dir}"\n    else\n      cp "${src_dir}/kube-apiserver.tar" "${dst_dir}"\n      cp "${src_dir}/kube-controller-manager.tar" "${dst_dir}"\n      cp "${src_dir}/kube-scheduler.tar" "${dst_dir}"\n      cp -r "${KUBE_HOME}/kubernetes/addons" "${dst_dir}"\n    fi\n    load-docker-images\n    mv "${src_dir}/kubelet" "${KUBE_BIN}"\n    mv "${src_dir}/kubectl" "${KUBE_BIN}"\n\n    # Some older images have LICENSES baked-in as a file. Presumably they will\n    # have the directory baked-in eventually.\n    rm -rf "${KUBE_HOME}"/LICENSES\n    mv "${KUBE_HOME}/kubernetes/LICENSES" "${KUBE_HOME}"\n    mv "${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz" "${KUBE_HOME}"\n\n    record-preload-info "${server_binary_tar}" "${server_binary_tar_hash}"\n  fi\n\n  if [[ "${NETWORK_PROVIDER:-}" == "kubenet" ]] || \\\n     [[ "${NETWORK_PROVIDER:-}" == "cni" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 "${KUBE_BIN}"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the "exec" option, if needed.\n  if [[ "${REMOUNT_VOLUME_PLUGIN_DIR:-}" == "true" && -n "${VOLUME_PLUGIN_DIR:-}" ]]; then\n    remount-flexvolume-directory "${VOLUME_PLUGIN_DIR}"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  # Preload pause image\n  preload-pause-image\n\n  # Copy health check binaries to a tmpfs mount to reduce block IO usage.\n  setup-shm-healthcheck-binaries\n\n  # TODO(awly): include the binary and license in the OS image.\n  install-exec-auth-plugin\n\n  # Source GKE specific scripts.\n  #\n  # This must be done after install-kube-manifests where the\n  # gke-internal-configure.sh is downloaded.\n  if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n    echo "Running GKE internal configuration script gke-internal-configure.sh"\n    . "${KUBE_HOME}/bin/gke-internal-configure.sh"\n  fi\n\n  if [[ "${KUBERNETES_MASTER:-}" == "false" ]] && \\\n     [[ "${ENABLE_NODE_PROBLEM_DETECTOR:-}" == "standalone" ]]; then\n    install-node-problem-detector\n    if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n      install-npd-custom-plugins\n    fi\n  fi\n\n  # Clean up.\n  rm -rf "${KUBE_HOME}/kubernetes"\n  rm -f "${KUBE_HOME}/${server_binary_tar}"\n  rm -f "${KUBE_HOME}/${server_binary_tar}.sha512"\n}\n\nfunction setup-shm-healthcheck-binaries() {\n  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n    return\n  fi\n  if [[ "${ENABLE_SHM_HEALTHCHECK_BINARIES:-}" != "true" ]];then\n    return\n  fi\n\n  local -r shm_dir="${HEALTHCHECK_SHM_DIR:-/dev/kube_shm}"\n  local -r shm_bin_dir="${shm_dir}/bin"\n\n  mkdir -p "$shm_dir"\n  mount -t tmpfs -o exec none "$shm_dir"\n  mkdir "${shm_bin_dir}"\n\n  cp -f "${KUBE_BIN}/crictl" "${shm_bin_dir}/crictl"\n  cp -f "$(which curl)" "${shm_bin_dir}/curl"\n}\n\nfunction install-extra-node-requirements() {\n  if [[ "${KUBERNETES_MASTER:-}" != "false" ]]; then\n    return\n  fi\n  if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n    # M4A is not relevant on ARM\n    if [[ "${HOST_ARCH}" == "amd64" ]]; then\n      install-m4a-apparmor-profile\n    fi\n  fi\n}\n\n# This function detects the platform/arch of the machine where the script runs,\n# and sets the HOST_PLATFORM and HOST_ARCH environment variables accordingly.\n# Callers can specify HOST_PLATFORM_OVERRIDE and HOST_ARCH_OVERRIDE to skip the detection.\n# This function is adapted from the detect_client_info function in cluster/get-kube-binaries.sh\n# and kube::util::host_os, kube::util::host_arch functions in hack/lib/util.sh\n# This function should be synced with detect_host_info in ./configure-helper.sh\nfunction detect_host_info() {\n  HOST_PLATFORM=${HOST_PLATFORM_OVERRIDE:-"$(uname -s)"}\n  case "${HOST_PLATFORM}" in\n    Linux|linux)\n      HOST_PLATFORM="linux"\n      ;;\n    *)\n      echo "Unknown, unsupported platform: ${HOST_PLATFORM}." >&2\n      echo "Supported platform(s): linux." >&2\n      echo "Bailing out." >&2\n      exit 2\n  esac\n\n  HOST_ARCH=${HOST_ARCH_OVERRIDE:-"$(uname -m)"}\n  case "${HOST_ARCH}" in\n    x86_64*|i?86_64*|amd64*)\n      HOST_ARCH="amd64"\n      ;;\n    aHOST_arch64*|aarch64*|arm64*)\n      HOST_ARCH="arm64"\n      ;;\n    *)\n      echo "Unknown, unsupported architecture (${HOST_ARCH})." >&2\n      echo "Supported architecture(s): amd64 and arm64." >&2\n      echo "Bailing out." >&2\n      exit 2\n      ;;\n  esac\n}\n\n# Retries a command forever with a delay between retries.\n# Args:\n#  $1    : delay between retries, in seconds.\n#  $2... : the command to run.\nfunction retry-forever {\n  local -r delay="$1"\n  shift 1\n\n  until "$@"; do\n    echo "== $* failed, retrying after ${delay}s"\n    sleep "${delay}"\n  done\n}\n\n# Initializes variables used by the log-* functions.\n#\n# get-metadata-value must be defined before calling this function.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-init {\n  # Used by log-* functions.\n  LOG_CLUSTER_ID=${LOG_CLUSTER_ID:-$(get-metadata-value \'instance/attributes/cluster-uid\' \'get-metadata-value-error\')}\n  LOG_INSTANCE_NAME=$(hostname || echo \'hostname-error\')\n  LOG_BOOT_ID=$(journalctl --list-boots | grep -E \'^ *0\' | awk \'{print $2}\' || echo \'journalctl-error\')\n  declare -Ag LOG_START_TIMES\n  declare -ag LOG_TRAP_STACK\n\n  LOG_STATUS_STARTED=\'STARTED\'\n  LOG_STATUS_COMPLETED=\'COMPLETED\'\n  LOG_STATUS_ERROR=\'ERROR\'\n}\n\n# Sets an EXIT trap.\n# Args:\n#   $1:... : the trap command.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-push {\n  local t="${*:1}"\n  LOG_TRAP_STACK+=("${t}")\n  # shellcheck disable=2064\n  trap "${t}" EXIT\n}\n\n# Removes and restores an EXIT trap.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-pop {\n  # Remove current trap.\n  unset \'LOG_TRAP_STACK[-1]\'\n\n  # Restore previous trap.\n  if [ ${#LOG_TRAP_STACK[@]} -ne 0 ]; then\n    local t="${LOG_TRAP_STACK[-1]}"\n    # shellcheck disable=2064\n    trap "${t}" EXIT\n  else\n    # If no traps in stack, clear.\n    trap EXIT\n  fi\n}\n\n# Logs the end of a bootstrap step that errored.\n# Args:\n#  $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-error {\n  local bootstep="$1"\n\n  log-proto "${bootstep}" "${LOG_STATUS_ERROR}" "encountered non-zero exit code"\n}\n\n# Wraps a command with bootstrap logging.\n# Args:\n#   $1    : bootstrap step name.\n#   $2... : the command to run.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-wrap {\n  local bootstep="$1"\n  local command="${*:2}"\n\n  log-trap-push "log-error ${bootstep}"\n  log-proto "${bootstep}" "${LOG_STATUS_STARTED}"\n  $command\n  log-proto "${bootstep}" "${LOG_STATUS_COMPLETED}"\n  log-trap-pop\n}\n\n# Logs a bootstrap step start. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-start {\n  local bootstep="$1"\n\n  log-trap-push "log-error ${bootstep}"\n  log-proto "${bootstep}" "${LOG_STATUS_STARTED}"\n}\n\n# Logs a bootstrap step end. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-end {\n  local bootstep="$1"\n\n  log-proto "${bootstep}" "${LOG_STATUS_COMPLETED}"\n  log-trap-pop\n}\n\n# Writes a log proto to stdout.\n# Args:\n#   $1: bootstrap step name.\n#   $2: status. Either \'STARTED\', \'COMPLETED\', or \'ERROR\'.\n#   $3: optional status reason.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-proto {\n  local bootstep="$1"\n  local status="$2"\n  local status_reason="${3:-}"\n\n  # Get current time.\n  local current_time\n  current_time="$(date --utc \'+%s.%N\')"\n  # ...formatted as UTC RFC 3339.\n  local timestamp\n  timestamp="$(date --utc --date="@${current_time}" \'+%FT%T.%NZ\')"\n\n  # Calculate latency.\n  local latency=\'null\'\n  if [ "${status}" == "${LOG_STATUS_STARTED}" ]; then\n    LOG_START_TIMES["${bootstep}"]="${current_time}"\n  else\n    local start_time="${LOG_START_TIMES["${bootstep}"]}"\n    unset \'LOG_START_TIMES[\'"${bootstep}"\']\'\n\n    # Bash cannot do non-integer math, shell out to awk.\n    latency="$(echo "${current_time} ${start_time}" | awk \'{print $1 - $2}\')s"\n\n    # The default latency is null which cannot be wrapped as a string so we must\n    # do it here instead of the printf.\n    latency="\\"${latency}\\""\n  fi\n\n  printf \'[cloud.kubernetes.monitoring.proto.SerialportLog] {"cluster_hash":"%s","vm_instance_name":"%s","boot_id":"%s","timestamp":"%s","bootstrap_status":{"step_name":"%s","status":"%s","status_reason":"%s","latency":%s}}\\n\' \\\n  "${LOG_CLUSTER_ID}" "${LOG_INSTANCE_NAME}" "${LOG_BOOT_ID}" "${timestamp}" "${bootstep}" "${status}" "${status_reason}" "${latency}"\n}\n\n######### Main Function ##########\nlog-init\ndetect_host_info\n\n# Preloader will source this script, and skip the main function. The preloader\n# will choose what to preload by calling install-X functions directly.\n# When configure.sh is sourced by the preload script, $0 and $BASH_SOURCE are\n# different. $BASH_SOURCE still contains the path of configure.sh, while $0 is\n# the path of the preload script.\nif [[ "$0" != "$BASH_SOURCE" && "${IS_PRELOADER:-"false"}" == "true" ]]; then\n  echo "Running in preloader instead of VM bootsrapping. Skipping installation steps as preloader script will source configure.sh and call corresponding functions."\n  return\nfi\n\nlog-start \'ConfigureMain\'\necho "Start to install kubernetes files"\n\n# if install fails, message-of-the-day (motd) will warn at login shell\nlog-wrap \'SetBrokenMotd\' set-broken-motd\n\nKUBE_HOME="/home/kubernetes"\nKUBE_BIN="${KUBE_HOME}/bin"\n\nif [[ "$(is-master)" == "true" ]]; then\n  log-wrap \'InstallHurl\' install-hurl\n  log-wrap \'InstallInplace\' install-inplace\nfi\n\n# download and source kube-env\nlog-wrap \'DownloadKubeEnv\' download-kube-env\nlog-wrap \'SourceKubeEnv\' source "${KUBE_HOME}/kube-env"\n\nlog-wrap \'ConfigureCgroupMode\' configure-cgroup-mode\n\nlog-wrap \'DownloadKubeletConfig\' download-kubelet-config "${KUBE_HOME}/kubelet-config.yaml"\n\nif [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n  log-wrap \'DownloadKubeMasterCerts\' download-kube-master-certs\nfi\n\n# ensure chosen container runtime is present\nlog-wrap \'EnsureContainerRuntime\' ensure-container-runtime\n\n# binaries and kube-system manifests\nlog-wrap \'InstallKubeBinaryConfig\' install-kube-binary-config\n\nif [[ "${ENABLE_GCFS:-""}" == "true" ]]; then\n  log-wrap \'InstallRiptide\' install-riptide\nfi\n\n# extra node requirements\nlog-wrap \'InstallExtraNodeRequirements\' install-extra-node-requirements\n\n# download inplace component manifests\nif [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n  log-wrap \'InplaceRunOnce\' retry-forever 30 inplace-run-once\nfi\n\necho "Done for installing kubernetes files"\nlog-end \'ConfigureMain\'\n'}, {'key': 'disable-legacy-endpoints', 'value': 'true'}, {'key': 'user-data', 'value': '#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error -H "X-Google-Metadata-Request: True" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\n  - path: /etc/modprobe.d/sunrpc.conf\n    permissions: \'0644\'\n    owner: root\n    # The GKE metadata server uses ports 987-989, so the sunrpc range should be restricted to be below.\n    content: |\n      options sunrpc max_resvport=986\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n'}, {'key': 'kube-env', 'value': 'ALLOCATE_NODE_CIDRS: "true"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=80m,memory=3237Mi,ephemeral-storage=41Gi;node_labels=cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-cpu-scaling-level=4,cloud.google.com/gke-logging-variant=DEFAULT,cloud.google.com/gke-max-pods-per-node=32,cloud.google.com/gke-netd-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=n1,node.kubernetes.io/masq-agent-ds-ready=true;arch=amd64;os=linux;os_distribution=cos;evictionHard=memory.available=100Mi,nodefs.available=10%,nodefs.inodesFree=5%,pid.available=10%\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMRENDQXBTZ0F3SUJBZ0lRY3BKY3dwZUZtRWlvMHVTQlRFVEJoREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMU1EQXlabUU1WXkxak5tVm1MVFExTnpZdFlUZGlaaTAwTTJJNU1HTmlZak0zWlRFdwpJQmNOTWpNd05URXhNVGN5TVRFeFdoZ1BNakExTXpBMU1ETXhPREl4TVRGYU1DOHhMVEFyQmdOVkJBTVRKRFV3Ck1ESm1ZVGxqTFdNMlpXWXRORFUzTmkxaE4ySm1MVFF6WWprd1kySmlNemRsTVRDQ0FhSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0dQQURDQ0FZb0NnZ0dCQUl5RVRpVHdTa01rRlpIb3RRcXNSOGNpcTBaT2tvd3d1ZUtVMmxBZgpOVTZZRnBBY1dtU3FYckt6S3dmYmQ3S1VPNk91UFYzYkoyeUx6Sy94WFUvT0tpRFZ6d3dNTUdEUnFaSGhLWURHClhuaDU3NFdhWW5WZ0hiVmJZUnRrcmJRUEZjcUhTRHNZRmx6TUZqKzllNW5NS1hYNWNNbDlnNFMrK3N6bHhFdHUKRGIxNUNvY3RHWkVQQzExQjFoM3MzVTJPb0dtdlNVRUltcTFoejVkMFhxL2VyVTdlUloyMnh6cGFuUGRLUkdqNwprNjdZQ1BDN2xMRTl2Q3FwejRVYTF5dWJhNi9ranlsdTlabDhjRHNpU3A1bmlqN29rRFVQRmQ3ZW1TdVpMMy96Cjk4aDN0QTdGNkE3cFVDOWp5VlVNMGhQUzdranN6YkFsOW80SnBnZ3lNR2RtSEpnTTVzbzNBRHhFQVZ2Ujh5UXMKNnF6ejQ0VlhKTzBNUXhENGN0MVB1c3lyNTJ0TjY3a05kdkpLZnEzT2R4OXd2N2RUL01pcDFLWjlxaFQrdTJ6QwpaZ3Y0OGJqQnFJaUdpMWJsOUFUOXlGVVdNYkJoR3BGUitZRFhqbmUrTDNpVFIyVnBwUE95ckNsVzNkM3R4VExwClBVVTRSdnRkVDBHTk53dkNuby9VdjQxanZ3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVLeUNhd1RBZmRwYWpGQUllUDEyZzNxV2FmQ2N3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dHQkFBV2FKeE5pdllML0VReGFJZ3k2UWVuTm44cTZFOVVZSEFoL3lROVdNVy84CjNhV0VsT1MrQ0UzaHlkUkU2eFNXR2YvMldkZGhnUG5mQlZ0a3Z3TXd0cHBQNkNoRkxtVkdqNkJ1dmxGdm01Qk0KZHVnd2hJS1U3UmVXaFY0dEpCQnRtd3R4THdLVkM0QXJDWGtmZUg5N0V4dUxJakwvVEF0d29TcFJ4MlFITUxzWQpwWHpUWUJhRHc1SDFqR0NuSlVjKysxUzB2b3ljY0NwNjcyN0crQ3o5Tm14VXVPbjNUdGRBWlhaUXhPcytJU2ZJCmJYMEI1NnlDS2loeEVncysvZzd3WEZUc1VMZkpBQUR1V2pFVUQzUExXNTFxcWRkQm8xUDdLQU1nNng1ckI4Y2cKQ2MzUEhUaEF2ZjgwVjJPMlRmcDNQN3FycmFVTkNOVzB5cHRTNnF6djloZ2poRE9TQU1rNW9RRGFsTi9jVlBuSApRSDBMcUZHZzBQQzJMMURKUnJDMC9GUnhjWGhGQStMUkRoOVJyV213Z292UWppSFB2bEtFYVYzRDJoSGhETW1yCjRKTEJBZHU3TlBXUnc0SXN5ZFlva3lzZHhLWHgyMEluK3NBL01aZFNFVWhBZjdvNnlDOTZpOWdzUkhjRUw0K04KVG9URzJNdkQ2WDVqQ0RuWWdPNTd3dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 100.64.20.0/22\nCLUSTER_NAME: northamerica-northeast1-pmo-6076886b-gke\nCNI_HASH: ba28765e2939d398dc101ff5543e62a14d132a113102b371af8da86722a4dfbfb3cc5121e6cbdb349e5d9d892e66f034ba24d0b4acd2f1df942c0cd9bcc5723a\nCNI_SHA1: a687a7150d8201ac374b1915829c80ab3cf0c774\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v1.0.1-gke.4\nCNI_STORAGE_URL_BASE: https://storage.googleapis.com/gke-release/cni-plugins\nCNI_TAR_PREFIX: cni-plugins-linux-amd64-\nCNI_VERSION: v1.0.1-gke.4\nCONTAINER_RUNTIME: containerd\nCONTAINER_RUNTIME_ENDPOINT: unix:///run/containerd/containerd.sock\nCONTAINER_RUNTIME_NAME: containerd\nCONTAINERD_MAX_CONTAINER_LOG_LINE: "262144"\nCREATE_BOOTSTRAP_KUBECONFIG: "false"\nDETECT_LOCAL_MODE: NodeCIDR\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 100.66.2.138\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: "1"\nENABLE_CLUSTER_DNS: "true"\nENABLE_CLUSTER_LOGGING: "false"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: "false"\nENABLE_CLUSTER_UI: "true"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_LATEST_NPD: "true"\nENABLE_METADATA_AGENT: ""\nENABLE_METRICS_SERVER: "true"\nENABLE_NETD: "true"\nENABLE_NODE_LOGGING: "false"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODE_REGISTRATION_CHECKER: "true"\nENABLE_NODELOCAL_DNS: "false"\nENABLE_SHM_HEALTHCHECK_BINARIES: "true"\nENABLE_SYSCTL_TUNING: "true"\nENV_TIMESTAMP: "2023-05-11T18:21:04+00:00"\nEXEC_AUTH_PLUGIN_HASH: 5e3d7c0504132820d5625aac230056becc23a20a6c0040afadf123f36c6d32b73e4625640881ec3b62e76846cfc1789d036486fc78ee6cdf40666d2dfe6ba356\nEXEC_AUTH_PLUGIN_LICENSE_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/d741bb92df4f39f2fb7201460f70c861d50e442c/LICENSE\nEXEC_AUTH_PLUGIN_SHA1: 8fa5a3a7c7229f1b22a9d5ce9ff7192cf1f02336\nEXEC_AUTH_PLUGIN_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/d741bb92df4f39f2fb7201460f70c861d50e442c/linux_amd64/gke-exec-auth-plugin\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nEXTRA_POD_SYSCTLS: net.ipv6.conf.all.disable_ipv6=1,net.ipv6.conf.default.disable_ipv6=1\nFEATURE_GATES: DynamicKubeletConfig=false,InTreePluginAWSUnregister=true,InTreePluginAzureDiskUnregister=true,InTreePluginOpenStackUnregister=true,InTreePluginvSphereUnregister=true,DisableKubeletCloudCredentialProviders=false,RotateKubeletServerCertificate=true,ExecProbeTimeout=false,CSIMigrationGCE=true\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: "true"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: "false"\nHPA_USE_REST_CLIENTS: "true"\nINSTANCE_PREFIX: gke-northamerica-northeast1-pmo-6076886b-gke-e8585222\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 100.66.2.138\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: 0978cac1aa792134997e2a49f766a6f05b88e6a30e03e42f8d4f8eade347f4e788a409a57d09f1c64cf1318ac3cc59af5898d8c48a5dede7e6ed09875deebd3f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: oOG1f0qqUboIx4j8FxknyCsSupvXYQM0cnGPJDJx9II=\nKUBELET_ARGS: --v=2 --cloud-provider=gce --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter\n  --cert-dir=/var/lib/kubelet/pki/ --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=32\n  --volume-plugin-dir=/home/kubernetes/flexvolume --node-status-max-images=25 --container-runtime=remote\n  --container-runtime-endpoint=unix:///run/containerd/containerd.sock --runtime-cgroups=/system.slice/containerd.service\n  --registry-qps=10 --registry-burst=20\nKUBERNETES_MASTER: "false"\nKUBERNETES_MASTER_NAME: 10.195.35.194\nLOAD_IMAGE_COMMAND: ctr -n=k8s.io images import\nLOGGING_DESTINATION: ""\nLOGGING_STACKDRIVER_RESOURCE_TYPES: ""\nMONITORING_FLAG_SET: "true"\nNETWORK_PROVIDER: cni\nNODE_LOCAL_SSDS_EXT: ""\nNON_MASQUERADE_CIDR: 0.0.0.0/0\nREMOUNT_VOLUME_PLUGIN_DIR: "true"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: "true"\nSALT_TAR_HASH: ""\nSALT_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: d94de1c6d04a48e2dd1bfa5dd57cc6a5e49fd8f834683a13def83dc6d6c1f647ab6ee21a12696cc06ed4704e3120f11cbc012e55b5b7f3d8ef6237e1377cad84\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 100.66.2.128/25\nSTACKDRIVER_ENDPOINT: https://logging.googleapis.com\nSYSCTL_OVERRIDES: ""\nTPM_BOOTSTRAP_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxekNDQWhPZ0F3SUJBZ0lRQ25LZE9rVVIzbkgyZmZyallRU01MREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMU1EQXlabUU1WXkxak5tVm1MVFExTnpZdFlUZGlaaTAwTTJJNU1HTmlZak0zWlRFdwpIaGNOTWpNd05URXhNVGd4T1RFeVdoY05Namd3TlRBNU1UZ3lNVEV5V2pBY01Sb3dHQVlEVlFRREV4RnJkV0psCmJHVjBMV0p2YjNSemRISmhjRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFONUkKQVBzY0QzLytUZC9uRFRsMjRXOU42aklXM0dRQzNzNTM4anFFMUkxNEtJU21DQUdjazBkVjdBZDZaSmd3WitNOQovcVNvQUpBNmtoM1ZaOE9YOXpPOW85RDVtMkVtRFFRZmg0RzlwY1JGMllDd2NWL2I0d0FGdDkySGoyc1RlaDMvCnNlUXpOV0ZPcGtEVHErdVFiZEk4bHNTZXlJaUhsSXIwYzgyc01PWi9qM0p3bS9OMzByd0xiZmlxSXovUHRvaGUKZDkzTGIvZU9ac3J5YlFaRnZwWC81bU10VUFjeHBSN0M5SURqNHBKbU1sNDhnQVozVFpkRDhsL3BObmpSQlRIUQpZUHZoWEkyTmtIQ1B2VTUraWNZek0rMVcyckw2cDNvOVNORUFtOHVsQURvakhqTVN5Y1cvWXB0RERVeEVXZFV3CiswVXVnMjR2U21GWmxsVFN1eTBDQXdFQUFhTldNRlF3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVUt5Q2F3VEFmZHBhagpGQUllUDEyZzNxV2FmQ2N3RFFZSktvWklodmNOQVFFTEJRQURnZ0dCQUMyOVFheXQ3eWtLWXoxTzFFdGhQWEFMCkxzblMxMGI5SUFYZjBNL3M4b2tMR1BPUU1XZWtCRVFXQTFERHpyQTBEK3pOWUI4M05FQXhpOHNUZGZRZlVRckkKRGgvMzc2aUNwZGhBSHFORDlNNUxIWnpiUHNwOVNpcWorZHFYRTVUSFFSZVlvNzJXdmx4Y2VLUGdUSjVTY1VONQpta3p3Q25xdm83VmdLTFhnOFNtWDdVS3E5WWhERFFBRmhHeXNFQ0ZneFVRdCtuWXE4YjZUTlYveDQ4ZXRwUURRCjdHTCtSa3Eyb2FDV1ZUaTMyZWd6RDBkL2R4bmw4MmllMUZnM2FvaWNMdGRVMWR3R1k4SjFQQ3c3alBlRFlkQUEKa09QQ0dTVHZxOTZXV3RJL0x0TkFhN1JkQ2hOYjdXbGVYMkJPcnB0ZjlqdWVtbFl2ckFQYWRFcUhWakg1cnlQaApBQjM0N29tenQ3aGlvTklYdkdaS0t4NHp3azZFY2ZLYVZLZVY3dEhWUFNZcFhmOWxPakZ3Mks0R3d5ZkRQTm9VCjRvVU9yYVRQQmp4Z0VNanlKeUI0WDdaQnc3L2xCM1ZmT2NWYU9yMlpTaUVvWWxma3gzcmFaeXhzNGxIVlVRbjUKUEswRXFNS2Z3LzNrY09VVlB1NUorUHJnWVlRY1pMdDNHa0NZMnQrOEV3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nTPM_BOOTSTRAP_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM2tnQSt4d1BmLzVOMytjTk9YYmhiMDNxTWhiY1pBTGV6bmZ5T29UVWpYZ29oS1lJCkFaeVRSMVhzQjNwa21EQm40ejMrcEtnQWtEcVNIZFZudzVmM003MmowUG1iWVNZTkJCK0hnYjJseEVYWmdMQngKWDl2akFBVzMzWWVQYXhONkhmK3g1RE0xWVU2bVFOT3I2NUJ0MGp5V3hKN0lpSWVVaXZSenphd3c1bitQY25DYgo4M2ZTdkF0dCtLb2pQOCsyaUY1MzNjdHY5NDVteXZKdEJrVytsZi9tWXkxUUJ6R2xIc0wwZ09QaWttWXlYanlBCkJuZE5sMFB5WCtrMmVORUZNZEJnKytGY2pZMlFjSSs5VG42SnhqTXo3VmJhc3ZxbmVqMUkwUUNieTZVQU9pTWUKTXhMSnhiOWltME1OVEVSWjFURDdSUzZEYmk5S1lWbVdWTks3TFFJREFRQUJBb0lCQURZa0JoOGpzTS9OWm5UdQpuMjA3ZkVIaTBiUVZGdVhDUURnOGhYTEU5MHVrOUlPSXVFTUNPdXBCYnAzTXJUTlhlUHBqMTRJT0RLTVVyUkhZCnNLODJ0TWEwdm5Hd1ZtMEZlbDZpZWx3NnorVThXVE9yNWxXQnBxc1MrWHViSU83ay9kWFFPYWxhWXJwYWtJcVMKTkJvS29nRTI4a2NlWUx4R2Y4TVBzeVFwdUhodnJialp3enY5UFY1bVdzMmNsKytad2lJN1YzbkYxcVUyTjJiMgpSdk9VK0FGRndUSzQ5UjJXMWhYSkJQb0RLeVh3amFCcitNMDdnWmZYL2lmQmNUaEFhOWRBb21NWVJ6WFQrSnl2CmkrWmpIbENJbHEzSzErbzYvcXpRMWVHWURNdmdlajZLR0NnNE9lYWZ0cXZmdEcyc2h6NHFOcUcxRWRnZHpudS8KOHltT2FSa0NnWUVBK0cxUHd2RnRkTHpFQVdWT2RXeW85MXovQ0dBRmVCdkd4bDhxYnN2eVNZQnNjOVF4VHBPUgpWOHVUYlFXbXJBNi8yVnlqMCsyczNrY0NSYktFUUtRRjZjN3E2R0ticzBiNXhMYWVLRE9lTmVBOGZUT0kwZjRnCllKRytTdGZPNC9tOTFUNlJrSkExeE4vZ3R5NkVJWEtQbkFGZnBBWkhnUTVhRS96U1Fid2NOMFVDZ1lFQTVRNm4KbkxFSFB3WFl3bDBuVVB0SEZSREloVllabElXKzVvZUYzMTNCL1VMdTgvZmFvM25qdUdCUWhwNXZTbnl0cDllWQoxa21zOXdvMlM4bXJyM0c2ZnF5NGUrOVFWRVdvQWdDUHdkL1FnZmFPVDdJaWRaRVVMRnlGb3VzbWpzMDJNYVppCmhFRFpXa2g2UUVrMGZIVC9Dakd4Wjl5V0ZZUVVMblVTZk9MZ1hza0NnWUFhc1pRNmZEcW9xb2ZkSm9lUnNvVk4KWHg3QVJhRVEwTnRCQVlUTHR2cG56M2JYMDFzZytGWkx1c0l5bXNMWUJoV3pRM01QR0tEVW1ZaXkrSVdoZEg1MgpLeGV1dExuS1A3d2kyUVNSaVVwY3U2V0VSbjlUSVIxVmd4T1JjekwxNkNYdnZmTmlOenl2MU9hT2lGOEdRUXNSClZreHlrWUlwYWVOZjluQ1pRNTg4aVFLQmdRRGNuZHJPVHF1ZUJmR2Fjc0oxZXpBaG1BS3FlaDAxTWdTR1lTMk4Keis0U0VxKzRCNWRzTVBBbUc0NHp1dEdTT3JlL215WTM3c3BMUG1qQllrS2NQcnZUV21SdDZqZkNrenlZZ1JYMQpNNjdPSGowL2dXRXpQMExnMzFSUGNKRzRwT3Azczd2YmllSk8xTlA2cXdlRWYrTk5YRU4wdDc5T2hlSXlSTXhECndQaytFUUtCZ1FES1hma3BTUUVwY2RORnZUSmZUNys4QndWZU5UODVkQlJXV01Rc3JuY056d3ErK014dWF6Y2kKaVdxTVczY1RTR1JOOU9nWDF6dzZZRnBmQVF5MDBtNzNNNnFGRnlSRlZPSmZicnM3Nk1RWXlweWRlSm13aEJWWgpRZmF6cG5vcWFhSldsNW9BVTk3aTI4KzU2MHJ6UklXa2JhU2VzUTV1allBNWYrb2dZOEhjRUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: northamerica-northeast1-b\n'}, {'key': 'cluster-uid', 'value': 'e8585222f0ad46ae8702c3e4f03e0fb3d80a938140b04d6dabf5b95c949262f2'}, {'key': 'cluster-location', 'value': 'northamerica-northeast1-b'}]}, 'serviceAccounts': [{'email': 'sa-dia-pmoto-dis-upr-comp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/cloud-platform']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/gke-northamerica-northea-default-pool-6ddf92f8-8noh', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'application': 'pm1t1', 'environment': 'upr', 'goog-composer-environment': 'pmoto-comp-001', 'goog-composer-environment-uuid': 'fb121f36-0bc4-4872-b1a4-7890e2b77bd0', 'goog-composer-location': 'northamerica-northeast1', 'goog-composer-version': 'composer-1-20-11-airflow-1-10-15', 'goog-gke-node': '', 'owner': 'aps-cloud', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'oXW5v2JnOzs=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': True, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'hmgEZV5J0Ho=', 'lastStartTimestamp': '2023-05-12T18:09:37.429-07:00', 'networkPerformanceConfig': {'totalEgressBandwidthTier': 'DEFAULT'}}
{'kind': 'compute#instance', 'id': '3602597134839536228', 'creationTimestamp': '2023-05-12T18:14:52.329-07:00', 'name': 'gke-northamerica-northea-default-pool-6ddf92f8-lbbq', 'tags': {'items': ['allow-internet', 'gke-northamerica-northeast1-pmo-6076886b-gke-e8585222-node', 'http-allow'], 'fingerprint': 'aqFFR76Qf_Q='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-highmem-4', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-gf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/rfc-snet-gfpre-pmoto-upr-wkr-nane', 'networkIP': '10.195.35.27', 'name': 'nic0', 'aliasIpRanges': [{'ipCidrRange': '100.64.20.128/26', 'subnetworkRangeName': 'nonrfc-snet-gfpre-pmoto-upr-pod-nane'}], 'fingerprint': 'g4rpm3sGh9c=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/gke-northamerica-northea-default-pool-6ddf92f8-lbbq', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node', 'https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid', 'https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos', 'https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'GVNIC'}, {'type': 'SEV_CAPABLE'}, {'type': 'SECURE_BOOT'}, {'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'UEFI_COMPATIBLE'}], 'diskSizeGb': '100', 'shieldedInstanceInitialState': {'pk': {'content': 'MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-', 'fileType': 'X509'}, 'keks': [{'content': 'MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X', 'fileType': 'X509'}], 'dbs': [{'content': 'MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8', 'fileType': 'X509'}], 'dbxs': [{'content': 'MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==', 'fileType': 'X509'}, {'content': 'MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==', 'fileType': 'X509'}, {'content': 'MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=', 'fileType': 'X509'}, {'content': 'MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4', 'fileType': 'X509'}]}, 'architecture': 'X86_64'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'PwbdmPbBJew=', 'items': [{'key': 'instance-template', 'value': 'projects/665550607499/global/instanceTemplates/gke-northamerica-northea-default-pool-6b8260ba'}, {'key': 'created-by', 'value': 'projects/665550607499/zones/northamerica-northeast1-b/instanceGroupManagers/gke-northamerica-northea-default-pool-6ddf92f8-grp'}, {'key': 'serial-port-logging-enable', 'value': 'false'}, {'key': 'kube-labels', 'value': 'cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-cpu-scaling-level=4,cloud.google.com/gke-logging-variant=DEFAULT,cloud.google.com/gke-max-pods-per-node=32,cloud.google.com/gke-netd-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=n1,node.kubernetes.io/masq-agent-ds-ready=true'}, {'key': 'google-compute-enable-pcid', 'value': 'true'}, {'key': 'VmDnsSetting', 'value': 'ZonalPreferred'}, {'key': 'kubelet-config', 'value': 'apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 100.66.2.138\nclusterDomain: cluster.local\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\n  pid.available: 10%\nfeatureGates:\n  CSIMigrationGCE: true\n  DisableKubeletCloudCredentialProviders: false\n  DynamicKubeletConfig: false\n  ExecProbeTimeout: false\n  InTreePluginAWSUnregister: true\n  InTreePluginAzureDiskUnregister: true\n  InTreePluginOpenStackUnregister: true\n  InTreePluginvSphereUnregister: true\n  RotateKubeletServerCertificate: true\nkernelMemcgNotification: true\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 80m\n  ephemeral-storage: 41Gi\n  memory: 3237Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nstaticPodPath: /etc/kubernetes/manifests\n'}, {'key': 'kubeconfig', 'value': 'apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    server: https://10.195.35.194\n    certificate-authority: \'/etc/srv/kubernetes/pki/ca-certificates.crt\'\n  name: default-cluster\ncontexts:\n- context:\n    cluster: default-cluster\n    namespace: default\n    user: exec-plugin-auth\n  name: default-context\ncurrent-context: default-context\nusers:\n- name: exec-plugin-auth\n  user:\n    exec:\n      apiVersion: "client.authentication.k8s.io/v1beta1"\n      command: \'/home/kubernetes/bin/gke-exec-auth-plugin\'\n      args: ["--cache-dir", \'/var/lib/kubelet/pki/\']\n'}, {'key': 'cluster-name', 'value': 'northamerica-northeast1-pmo-6076886b-gke'}, {'key': 'gci-update-strategy', 'value': 'update_disabled'}, {'key': 'gci-metrics-enabled', 'value': 'true'}, {'key': 'configure-sh', 'value': '#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\'v0.9.1\'\nDEFAULT_CNI_HASH=\'b5a59660053a5f1a33b5dd5624d9ed61864482d9dc8e5b79c9b3afc3d6f62c9830e1c30f9ccba6ee76f5fb1ff0504e58984420cc0680b26cb643f1cb07afbd1c\'\nDEFAULT_NPD_VERSION=\'v0.8.9\'\nDEFAULT_NPD_HASH_AMD64=\'4919c47447c5f3871c1dc3171bbb817a38c8c8d07a6ce55a77d43cadc098e9ad608ceeab121eec00c13c0b6a2cc3488544d61ce84cdade1823f3fd5163a952de\'\nDEFAULT_NPD_HASH_ARM64=\'8ccb42a862efdfc1f25ca9a22f3fd36f9fdff1ac618dd7d39e3b5991505dd610d432364420896ad71f42197a116f28a85dde58b129baa075ebb7312caa57f852\'\nDEFAULT_CRICTL_VERSION=\'v1.23.0\'\nDEFAULT_CRICTL_AMD64_SHA512=\'f8c40c66c8d9a85e857399506f4977564890815b02658eec591114e04bd8bc6b8ea08bcc159af0088b5eda7bf0dfd16096bf0c174819c204193fb7343ae7d9d5\'\nDEFAULT_CRICTL_ARM64_SHA512=\'261ac360b0ac3fc88c81f1cc348f84b0df0b07ca4db61b0e647c142882d129ba11d21d0de373a27ecfd984436a08a11b19cde2ad5e3412e5d03203caedd62d92\'\nDEFAULT_MOUNTER_TAR_SHA=\'7956fd42523de6b3107ddc3ce0e75233d2fcb78436ff07a1389b6eaac91fb2b1b72a08f7a219eaf96ba1ca4da8d45271002e0d60e0644e796c665f99bb356516\'\n###\n\n# This version needs to be the same as in gke/cluster/gce/gci/configure-helper.sh\nGKE_CONTAINERD_INFRA_CONTAINER="${CONTAINERD_INFRA_CONTAINER:-gke.gcr.io/pause:3.6@sha256:10008c36b4611b44db1229451675d5d7d86c7ddf4ef00f883d806a01547203f6}"\n\nRIPTIDE_FUSE_BUCKET="${RIPTIDE_FUSE_BUCKET:-gke-release}"\nRIPTIDE_SNAPSHOTTER_BUCKET="${RIPTIDE_SNAPSHOTTER_BUCKET:-gke-release}"\nRIPTIDE_FUSE_VERSION="${RIPTIDE_FUSE_VERSION:-v0.120.0}"\nRIPTIDE_SNAPSHOTTER_VERSION="${RIPTIDE_SNAPSHOTTER_VERSION:-v1.4-21}"\n\n# Standard curl flags.\nCURL_FLAGS=\'--fail --silent --show-error --retry 5 --retry-delay 3 --connect-timeout 10 --retry-connrefused\'\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\n# A function that fetches a GCE metadata value and echoes it out.\n# Args:\n#   $1 : URL path after /computeMetadata/v1/ (without heading slash).\n#   $2 : An optional default value to echo out if the fetch fails.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction get-metadata-value {\n  local default="${2:-}"\n\n  local status\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H \'Metadata-Flavor: Google\' \\\n    "http://metadata/computeMetadata/v1/${1}" \\\n  || status="$?"\n  status="${status:-0}"\n\n  if [[ "${status}" -eq 0 || -z "${default}" ]]; then\n    return "${status}"\n  else\n    echo "${default}"\n  fi\n}\n\n# A function to fetch kube-env from GCE metadata server\n# or using hurl on the master if available\nfunction download-kube-env {\n  (\n    umask 077\n    local kube_env_path="/tmp/kube-env.yaml"\n    if [[ "$(is-master)" == "true" && $(use-hurl) = "true" ]]; then\n      local kube_env_path="${KUBE_HOME}/kube-env.yaml"\n      download-kube-env-hurl "${kube_env_path}"\n    else\n      local meta_path="http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env"\n      echo "Downloading kube-env via GCE metadata from ${meta_path} to ${kube_env_path}"\n      # shellcheck disable=SC2086\n      retry-forever 10 curl ${CURL_FLAGS} \\\n        -H "X-Google-Metadata-Request: True" \\\n        -o "${kube_env_path}" \\\n        "${meta_path}"\n    fi\n\n    # Convert the yaml format file into a shell-style file.\n    eval "$(python3 -c \'\'\'\nimport pipes,sys,yaml\nitems = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print("readonly {var}={value}".format(var=k, value=pipes.quote(str(v))))\n\'\'\' < "${kube_env_path}" > "${KUBE_HOME}/kube-env")"\n\n    # Leave kube-env if we are a master\n    if [[ "$(is-master)" != "true" ]]; then\n      rm -f "${kube_env_path}"\n    fi\n  )\n}\n\n# A function to pull kube-env from HMS using hurl\nfunction download-kube-env-hurl {\n  local -r kube_env_path="$1"\n  local -r endpoint=$(get-metadata-value "instance/attributes/gke-api-endpoint")\n  local -r kube_env_hms_path=$(get-metadata-value "instance/attributes/kube-env-path")\n\n  echo "Downloading kube-env via hurl from ${kube_env_hms_path} to ${kube_env_path}"\n  retry-forever 30 ${KUBE_HOME}/bin/hurl --hms_address $endpoint \\\n    --dst "${kube_env_path}" \\\n    "${kube_env_hms_path}"\n  chmod 600 "${kube_env_path}"\n}\n\nfunction download-kubelet-config {\n  local -r dest="$1"\n  echo "Downloading Kubelet config file, if it exists"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config="/tmp/kubelet-config.yaml"\n    # shellcheck disable=SC2086\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H "X-Google-Metadata-Request: True" \\\n      -o "${tmp_kubelet_config}" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config\n    # only write to the final location if curl succeeds\n    mv "${tmp_kubelet_config}" "${dest}"\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-master-certs from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs="/tmp/kube-master-certs.yaml"\n    # shellcheck disable=SC2086\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H "X-Google-Metadata-Request: True" \\\n      -o "${tmp_kube_master_certs}" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval "$(python3 -c \'\'\'\nimport pipes,sys,yaml\nitems = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print("readonly {var}={value}".format(var=k, value=pipes.quote(str(v))))\n\'\'\' < "${tmp_kube_master_certs}" > "${KUBE_HOME}/kube-master-certs")"\n    rm -f "${tmp_kube_master_certs}"\n  )\n}\n\nfunction validate-hash {\n  local -r file="$1"\n  local -r expected="$2"\n\n  actual_sha1=$(sha1sum "${file}" | awk \'{ print $1 }\') || true\n  actual_sha512=$(sha512sum "${file}" | awk \'{ print $1 }\') || true\n  if [[ "${actual_sha1}" != "${expected}" ]] && [[ "${actual_sha512}" != "${expected}" ]]; then\n    echo "== ${file} corrupted, sha1 ${actual_sha1}/sha512 ${actual_sha512} doesn\'t match expected ${expected} =="\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL="http://metadata.google.internal/computeMetadata/v1/instance"\nfunction get-credentials {\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H "Metadata-Flavor: Google" \\\n    "${GCE_METADATA_INTERNAL}/service-accounts/default/token" \\\n  | python3 -c \'import sys; import json; print(json.loads(sys.stdin.read())["access_token"])\'\n}\n\nfunction valid-storage-scope {\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    -H "Metadata-Flavor: Google" \\\n    "${GCE_METADATA_INTERNAL}/service-accounts/default/scopes" \\\n  | grep -E "auth/devstorage|auth/cloud-platform"\n}\n\n# Determine if this node is a master using metadata\nfunction is-master {\n  local -r is_master_val=${KUBERNETES_MASTER:-$(get-metadata-value "instance/attributes/is-master-node")}\n  local result="false"\n  if [[ ${is_master_val:-} == "true" ]]; then\n    result="true"\n  fi\n  echo $result\n}\n\n# A function that returns "true" if hurl should be used, "false" otherwise.\nfunction use-hurl {\n  local -r enable_hms_read=${ENABLE_HMS_READ:-$(get-metadata-value "instance/attributes/enable_hms_read")}\n  local result="false"\n\n  if [[ -f "${KUBE_HOME}/bin/hurl" && "${enable_hms_read}" == "true" ]]; then\n    result="true"\n  fi\n  echo $result\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha512/sha1 hash of the URL. Can be "" if the sha512/sha1 hash is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash="$1"\n  shift 1\n\n  while true; do\n    for url in "$@"; do\n      local file="${url##*/}"\n      rm -f "${file}"\n      # if the url belongs to GCS API we should use oauth2_token in the headers if the VM service account has storage scopes\n      local curl_headers=""\n\n      if [[ "$url" =~ ^https://storage.googleapis.com.* ]] ; then\n        local canUseCredentials=0\n\n        echo "Getting the scope of service account configured for VM."\n        if ! valid-storage-scope ; then\n          canUseCredentials=1\n          # this behavior is preserved for backward compatibility. We want to fail fast if SA is not available\n          # and try to download without SA if scope does not exist on SA\n          echo "No service account or service account without storage scope. Attempt to download without service account token."\n        fi\n\n        if [[ "${canUseCredentials}" == "0" ]] ; then\n          echo "Getting the service account access token configured for VM."\n          local access_token="";\n          if access_token=$(get-credentials); then\n            echo "Service account access token is received. Downloading ${url} using this token."\n          else\n            echo "Cannot get a service account token. Exiting."\n            exit 1\n          fi\n\n          curl_headers=${access_token:+Authorization: Bearer "${access_token}"}\n        fi\n      fi\n      if ! curl ${curl_headers:+-H "${curl_headers}"} -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 --retry-connrefused "${url}"; then\n        echo "== Failed to download ${url}. Retrying. =="\n      elif [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then\n        echo "== Hash validation of ${url} failed. Retrying. =="\n      else\n        if [[ -n "${hash}" ]]; then\n          echo "== Downloaded ${url} (HASH = ${hash}) =="\n        else\n          echo "== Downloaded ${url} =="\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction record-preload-info {\n  echo "$1,$2" >> "${KUBE_HOME}/preload_info"\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs "${key},${value}" "${KUBE_HOME}/preload_info"\n}\n\nfunction split-commas {\n  echo -e "${1//,/\'\\n\'}"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p "$flexvolume_plugin_dir"\n  mount --bind "$flexvolume_plugin_dir" "$flexvolume_plugin_dir"\n  mount -o remount,exec "$flexvolume_plugin_dir"\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME="${KUBE_HOME}/containerized_mounter"\n  local -r mounter_tar_sha="${DEFAULT_MOUNTER_TAR_SHA}"\n  if is-preloaded "mounter" "${mounter_tar_sha}"; then\n    echo "mounter is preloaded."\n    return\n  fi\n\n  echo "Downloading gci mounter tools."\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}"\n  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}"\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs"\n  download-or-bust "${mounter_tar_sha}" "https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar"\n  cp "${KUBE_HOME}/kubernetes/server/bin/mounter" "${CONTAINERIZED_MOUNTER_HOME}/mounter"\n  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}/mounter"\n  mv "${KUBE_HOME}/mounter.tar" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C "${CONTAINERIZED_MOUNTER_HOME}/rootfs"\n  rm /tmp/mounter.tar\n  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet"\n\n  record-preload-info "mounter" "${mounter_tar_sha}"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n "${NODE_PROBLEM_DETECTOR_VERSION:-}" ]]; then\n      local -r npd_version="${NODE_PROBLEM_DETECTOR_VERSION}"\n      local -r npd_hash="${NODE_PROBLEM_DETECTOR_TAR_HASH}"\n  else\n      local -r npd_version="${DEFAULT_NPD_VERSION}"\n      case "${HOST_PLATFORM}/${HOST_ARCH}" in\n        linux/amd64)\n          local -r npd_hash="${DEFAULT_NPD_HASH_AMD64}"\n          ;;\n        linux/arm64)\n          local -r npd_hash="${DEFAULT_NPD_HASH_ARM64}"\n          ;;\n        # no other architectures are supported currently.\n        # Assumption is that this script only runs on linux,\n        # see cluster/gce/windows/k8s-node-setup.psm1 for windows\n        # https://github.com/kubernetes/node-problem-detector/releases/\n        *)\n          echo "Unrecognized version and platform/arch combination:"\n          echo "$DEFAULT_NPD_VERSION $HOST_PLATFORM/$HOST_ARCH"\n          echo "Set NODE_PROBLEM_DETECTOR_VERSION and NODE_PROBLEM_DETECTOR_TAR_HASH to overwrite"\n          exit 1\n          ;;\n      esac\n  fi\n  local -r npd_tar="node-problem-detector-${npd_version}-${HOST_PLATFORM}_${HOST_ARCH}.tar.gz"\n\n  if is-preloaded "${npd_tar}" "${npd_hash}"; then\n    echo "${npd_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading ${npd_tar}."\n  local -r npd_release_path="${NODE_PROBLEM_DETECTOR_RELEASE_PATH:-https://storage.googleapis.com/kubernetes-release}"\n  download-or-bust "${npd_hash}" "${npd_release_path}/node-problem-detector/${npd_tar}"\n  local -r npd_dir="${KUBE_HOME}/node-problem-detector"\n  mkdir -p "${npd_dir}"\n  tar xzf "${KUBE_HOME}/${npd_tar}" -C "${npd_dir}" --overwrite\n  mv "${npd_dir}/bin"/* "${KUBE_BIN}"\n  chmod a+x "${KUBE_BIN}/node-problem-detector"\n  rmdir "${npd_dir}/bin"\n  rm -f "${KUBE_HOME}/${npd_tar}"\n\n  record-preload-info "${npd_tar}" "${npd_hash}"\n}\n\nfunction install-cni-binaries {\n  local -r cni_version=${CNI_VERSION:-$DEFAULT_CNI_VERSION}\n  if [[ -n "${CNI_VERSION:-}" ]]; then\n      local -r cni_hash="${CNI_HASH:-}"\n  else\n      local -r cni_hash="${DEFAULT_CNI_HASH}"\n  fi\n\n  local -r cni_tar="${CNI_TAR_PREFIX}${cni_version}.tgz"\n  local -r cni_url="${CNI_STORAGE_URL_BASE}/${cni_version}/${cni_tar}"\n\n  if is-preloaded "${cni_tar}" "${cni_hash}"; then\n    echo "${cni_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading cni binaries"\n  download-or-bust "${cni_hash}" "${cni_url}"\n  local -r cni_dir="${KUBE_HOME}/cni"\n  mkdir -p "${cni_dir}/bin"\n  tar xzf "${KUBE_HOME}/${cni_tar}" -C "${cni_dir}/bin" --overwrite\n  mv "${cni_dir}/bin"/* "${KUBE_BIN}"\n  rmdir "${cni_dir}/bin"\n  rm -f "${KUBE_HOME}/${cni_tar}"\n\n  record-preload-info "${cni_tar}" "${cni_hash}"\n}\n\n# Install crictl binary.\n# Assumptions: HOST_PLATFORM and HOST_ARCH are specified by calling detect_host_info.\nfunction install-crictl {\n  if [[ -n "${CRICTL_VERSION:-}" ]]; then\n    local -r crictl_version="${CRICTL_VERSION}"\n    local -r crictl_hash="${CRICTL_TAR_HASH}"\n  else\n    local -r crictl_version="${DEFAULT_CRICTL_VERSION}"\n    case "${HOST_PLATFORM}/${HOST_ARCH}" in\n      linux/amd64)\n        local -r crictl_hash="${DEFAULT_CRICTL_AMD64_SHA512}"\n        ;;\n      linux/arm64)\n        local -r crictl_hash="${DEFAULT_CRICTL_ARM64_SHA512}"\n        ;;\n      *)\n        echo "Unrecognized version and platform/arch combination:"\n        echo "$DEFAULT_CRICTL_VERSION $HOST_PLATFORM/$HOST_ARCH"\n        echo "Set CRICTL_VERSION and CRICTL_TAR_HASH to overwrite"\n        exit 1\n    esac\n  fi\n  local -r crictl="crictl-${crictl_version}-${HOST_PLATFORM}-${HOST_ARCH}.tar.gz"\n\n  # Create crictl config file.\n  cat > /etc/crictl.yaml <<EOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded "${crictl}" "${crictl_hash}"; then\n    echo "crictl is preloaded"\n    return\n  fi\n\n  echo "Downloading crictl"\n  local -r crictl_path="https://storage.googleapis.com/k8s-artifacts-cri-tools/release/${crictl_version}"\n  download-or-bust "${crictl_hash}" "${crictl_path}/${crictl}"\n  tar xf "${crictl}"\n  mv crictl "${KUBE_BIN}/crictl"\n  rm -f "${crictl}"\n\n  record-preload-info "${crictl}" "${crictl_hash}"\n}\n\nfunction preload-pause-image {\n  if is-preloaded "pause" "${GKE_CONTAINERD_INFRA_CONTAINER}"; then\n    echo "pause image is preloaded"\n    return\n  fi\n\n  # preloading pause image. It will be used in preloader and will be\n  # useful for staging builds where access_token is needed to pull the image\n  local access_token="";\n\n  if access_token=$(get-credentials); then\n    "${KUBE_BIN}/crictl" pull --creds "oauth2accesstoken:${access_token}" ${GKE_CONTAINERD_INFRA_CONTAINER}\n  else\n    echo "No access token. Pulling without it."\n    "${KUBE_BIN}/crictl" pull ${GKE_CONTAINERD_INFRA_CONTAINER}\n  fi\n  record-preload-info "pause" "${GKE_CONTAINERD_INFRA_CONTAINER}"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! "${EXEC_AUTH_PLUGIN_URL:-}" ]]; then\n      return\n  fi\n  local -r plugin_url="${EXEC_AUTH_PLUGIN_URL}"\n  local -r plugin_hash="${EXEC_AUTH_PLUGIN_HASH}"\n\n  if is-preloaded "gke-exec-auth-plugin" "${plugin_hash}"; then\n    echo "gke-exec-auth-plugin is preloaded"\n    return\n  fi\n\n  echo "Downloading gke-exec-auth-plugin binary"\n  download-or-bust "${plugin_hash}" "${plugin_url}"\n  mv "${KUBE_HOME}/gke-exec-auth-plugin" "${KUBE_BIN}/gke-exec-auth-plugin"\n  chmod a+x "${KUBE_BIN}/gke-exec-auth-plugin"\n\n  if [[ ! "${EXEC_AUTH_PLUGIN_LICENSE_URL:-}" ]]; then\n      return\n  fi\n  local -r license_url="${EXEC_AUTH_PLUGIN_LICENSE_URL}"\n  echo "Downloading gke-exec-auth-plugin license"\n  download-or-bust "" "${license_url}"\n  mv "${KUBE_HOME}/LICENSE" "${KUBE_BIN}/gke-exec-auth-plugin-license"\n\n  record-preload-info "gke-exec-auth-plugin" "${plugin_hash}"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir="${KUBE_HOME}/kube-manifests"\n  mkdir -p "${dst_dir}"\n  local manifests_tar_urls\n  while IFS= read -r url; do\n    manifests_tar_urls+=("$url")\n  done < <(split-commas "${KUBE_MANIFESTS_TAR_URL}")\n  local -r manifests_tar="${manifests_tar_urls[0]##*/}"\n  if [ -n "${KUBE_MANIFESTS_TAR_HASH:-}" ]; then\n    local -r manifests_tar_hash="${KUBE_MANIFESTS_TAR_HASH}"\n  else\n    echo "Downloading k8s manifests hash (not found in env)"\n    download-or-bust "" "${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha512}"\n    local -r manifests_tar_hash=$(cat "${manifests_tar}.sha512")\n  fi\n\n  if is-preloaded "${manifests_tar}" "${manifests_tar_hash}"; then\n    echo "${manifests_tar} is preloaded."\n    return\n  fi\n\n  echo "Downloading k8s manifests tar"\n  download-or-bust "${manifests_tar_hash}" "${manifests_tar_urls[@]}"\n  tar xzf "${KUBE_HOME}/${manifests_tar}" -C "${dst_dir}" --overwrite\n  local -r kube_addon_registry="${KUBE_ADDON_REGISTRY:-k8s.gcr.io}"\n  if [[ "${kube_addon_registry}" != "k8s.gcr.io" ]]; then\n    find "${dst_dir}" \\(-name \'*.yaml\' -or -name \'*.yaml.in\'\\) -print0 | \\\n      xargs -0 sed -ri "s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@"\n    find "${dst_dir}" \\(-name \'*.manifest\' -or -name \'*.json\'\\) -print0 | \\\n      xargs -0 sed -ri "s@(image\\":\\s+\\")k8s.gcr.io@\\1${kube_addon_registry}@"\n  fi\n  cp "${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh" "${KUBE_BIN}/configure-helper.sh"\n  cp "${dst_dir}/kubernetes/gci-trusty/configure-kubeapiserver.sh" "${KUBE_BIN}/configure-kubeapiserver.sh"\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh" "${KUBE_BIN}/"\n  fi\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh" "${KUBE_BIN}/"\n  fi\n  if [[ -e "${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh" ]]; then\n    cp "${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh" "${KUBE_BIN}/"\n  fi\n  cp "${dst_dir}/kubernetes/gci-trusty/health-monitor.sh" "${KUBE_BIN}/health-monitor.sh"\n  cp "${dst_dir}/kubernetes/gci-trusty/networkd-monitor.sh" "${KUBE_BIN}/networkd-monitor.sh"\n\n  rm -f "${KUBE_HOME}/${manifests_tar}"\n  rm -f "${KUBE_HOME}/${manifests_tar}.sha512"\n\n  record-preload-info "${manifests_tar}" "${manifests_tar_hash}"\n}\n\n# Installs hurl to ${KUBE_HOME}/bin/hurl if not already installed.\nfunction install-hurl {\n  cd "${KUBE_HOME}"\n  if [[ -f "${KUBE_HOME}/bin/hurl" ]]; then\n    echo "install-hurl: hurl already installed"\n    return\n  fi\n\n  local -r hurl_gcs_att="instance/attributes/hurl-gcs-url"\n  local -r hurl_gcs_url=${HURL_GCS_URL:-$(get-metadata-value "${hurl_gcs_att}")}\n\n  if [[ -z "${hurl_gcs_url}" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo "install-hurl: Unable to find GCE metadata ${hurl_gcs_att}"\n    return\n  fi\n\n  # Download hurl binary from a GCS bucket.\n  local -r hurl_bin="hurl"\n  echo "install-hurl: Installing hurl from ${hurl_gcs_url} ... "\n  download-or-bust "" "${hurl_gcs_url}"\n  if [[ -f "${KUBE_HOME}/${hurl_bin}" ]]; then\n    chmod a+x ${KUBE_HOME}/${hurl_bin}\n    mv "${KUBE_HOME}/${hurl_bin}" "${KUBE_BIN}/${hurl_bin}"\n    echo "install-hurl: hurl installed to ${KUBE_BIN}/${hurl_bin}"\n    return\n  fi\n}\n\n# Installs inplace to ${KUBE_HOME}/bin/inplace if not already installed.\nfunction install-inplace {\n  cd "${KUBE_HOME}"\n  if [[ -f "${KUBE_HOME}/bin/inplace" ]]; then\n    echo "install-inplace: inplace already installed"\n    return\n  fi\n  local -r inplace_gcs_att="instance/attributes/inplace-gcs-url"\n  local -r inplace_gcs_url=${INPLACE_GCS_URL:-$(get-metadata-value "${inplace_gcs_att}")}\n  if [[ -z "${inplace_gcs_url}" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo "install-inplace: Unable to find GCE metadata ${inplace_gcs_att}"\n    return\n  fi\n  echo "install-inplace: Installing inplace from ${inplace_gcs_url} ..."\n  download-or-bust "" "${inplace_gcs_url}"\n  local -r inplace_bin="inplace"\n  if [[ -f "${KUBE_HOME}/${inplace_bin}" ]]; then\n    mv "${KUBE_HOME}/${inplace_bin}" "${KUBE_BIN}/${inplace_bin}"\n    if [[ ! -d "${KUBE_HOME}/${inplace_bin}" ]]; then\n      mkdir -p "${KUBE_HOME}/${inplace_bin}"\n    fi\n    cat > "${KUBE_HOME}/${inplace_bin}/inplace.hash" <<EOF\n${inplace_gcs_url}\nEOF\n    echo "install-inplace: inplace installed to ${KUBE_BIN}/${inplace_bin}"\n    return\n  fi\n}\n\n# A function to download in-place component manifests if in-place agent is\n# present.\nfunction inplace-run-once {\n  if [[ -f "${KUBE_HOME}/bin/inplace" ]]; then\n    echo "inplace-run-once: using inplace to download inplace component manefists"\n    local dst_dir="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty"\n    mkdir -p "${dst_dir}/in-place"\n    mkdir -p "${dst_dir}/gce-extras/in-place"\n    ${KUBE_HOME}/bin/inplace --mode=run-once --in_place_addon_path="${dst_dir}/gce-extras/in-place" --master_pod_path="${dst_dir}/in-place"\n  fi\n}\n\nfunction install-auger {\n  echo "Downloading auger binary"\n  if [[ -f "${KUBE_HOME}/bin/auger" ]]; then\n    echo "auger is already installed"\n    return\n  fi\n  AUGER_STORE_PATH="${AUGER_STORE_PATH:-https://storage.googleapis.com/gke-release-staging/auger}"\n  AUGER_VERSION="${AUGER_VERSION:-v1.0.0-gke.1}"\n  download-or-bust "" "${AUGER_STORE_PATH}/${AUGER_VERSION}/auger.sha1"\n  sha1="$(cat auger.sha1)"\n  readonly sha1 # Declare readonly separately to avoid masking error values.\n  rm -f "auger.sha1"\n  download-or-bust "${sha1}" "${AUGER_STORE_PATH}/${AUGER_VERSION}/auger"\n  mv "${KUBE_HOME}/auger" "${KUBE_HOME}/bin/auger"\n  chmod a+x "${KUBE_HOME}/bin/auger"\n  record-preload-info "auger" "${sha1}"\n}\n\n# Extract etcdctl binary from etcd image.\nfunction install-etcdctl {\n  echo "Installing etcdctl binary"\n  if [[ -f "${KUBE_HOME}/bin/etcdctl" ]]; then\n    echo "etcdctl is already installed"\n    return\n  fi\n  local -r etcd_image="gcr.io/gke-master-images/etcd:${ETCDCTL_VERSION}"\n  container_id="$(docker create "${etcd_image}" sh)"\n  readonly containerId\n  docker cp "${container_id}:usr/local/bin/etcdctl" "${KUBE_HOME}/bin/etcdctl"\n  chmod a+x "${KUBE_HOME}/bin/etcdctl"\n  docker rm "${container_id}"\n  docker rmi "${etcd_image}"\n}\n\nfunction install-gcfsd {\n  echo "Downloading Riptide FUSE client"\n  if is-preloaded "gcfsd" "${RIPTIDE_FUSE_VERSION}"; then\n    echo "gcfsd is preloaded."\n    return\n  fi\n\n  if [[ "${HOST_ARCH}" == "arm64" ]]; then\n    RIPTIDE_FUSE_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_FUSE_BUCKET}/gcfsd/${RIPTIDE_FUSE_VERSION}/arm64"\n  else\n    RIPTIDE_FUSE_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_FUSE_BUCKET}/gcfsd/${RIPTIDE_FUSE_VERSION}"\n  fi\n\n  if [[ "${RIPTIDE_FUSE_VERSION}" > v0.19.0 ]] && [[ "${RIPTIDE_FUSE_VERSION}" != v0.4.0 ]] ; then\n    download-or-bust "" "${RIPTIDE_FUSE_STORE_PATH}/gcfsd.tar.gz"\n  fi\n  download-or-bust "" "${RIPTIDE_FUSE_STORE_PATH}/gcfsd"\n  mv "${KUBE_HOME}/gcfsd" "${KUBE_HOME}/bin/gcfsd"\n  chmod a+x "${KUBE_HOME}/bin/gcfsd"\n  record-preload-info "gcfsd" "${RIPTIDE_FUSE_VERSION}"\n}\n\nfunction install-riptide-snapshotter {\n  echo "Downloading Riptide snapshotter"\n  if is-preloaded "containerd-gcfs-grpc" "${RIPTIDE_SNAPSHOTTER_VERSION}"; then\n    echo "containerd-gcfs-grpc is preloaded."\n    return\n  fi\n  RIPTIDE_SNAPSHOTTER_STORE_PATH="https://storage.googleapis.com/${RIPTIDE_SNAPSHOTTER_BUCKET}/gcfs-snapshotter/${RIPTIDE_SNAPSHOTTER_VERSION}"\n  if [[ "${RIPTIDE_SNAPSHOTTER_VERSION}" > v1.4-2 ]]; then\n    download-or-bust "" "${RIPTIDE_SNAPSHOTTER_STORE_PATH}/containerd-gcfs-grpc.tar.gz"\n  fi\n\n  if [[ "${HOST_ARCH}" == "arm64" ]]; then\n    RIPTIDE_SNAPSHOTTER_BINARY="containerd-gcfs-grpc-arm64"\n  else\n    RIPTIDE_SNAPSHOTTER_BINARY="containerd-gcfs-grpc"\n  fi\n\n  download-or-bust "" "${RIPTIDE_SNAPSHOTTER_STORE_PATH}/${RIPTIDE_SNAPSHOTTER_BINARY}"\n  mv "${KUBE_HOME}/${RIPTIDE_SNAPSHOTTER_BINARY}" "${KUBE_HOME}/bin/containerd-gcfs-grpc"\n  chmod a+x "${KUBE_HOME}/bin/containerd-gcfs-grpc"\n  record-preload-info "containerd-gcfs-grpc" "${RIPTIDE_SNAPSHOTTER_VERSION}"\n}\n\n# Install Riptide FUSE client and Riptide snapshotter\nfunction install-riptide {\n  install-gcfsd\n  install-riptide-snapshotter\n}\n\nfunction configure-cgroup-mode {\n  if which cgroup_helper > /dev/null 2>&1; then\n    if [[ "${CGROUP_MODE:-}" == "v1" ]] && cgroup_helper show | grep -q \'unified\'; then\n      cgroup_helper set hybrid\n      echo "set cgroup config to hybrid, now rebooting..."\n      reboot\n    elif [[ "${CGROUP_MODE:-}" == "v2" ]] && cgroup_helper show | grep -q \'hybrid\'; then\n      cgroup_helper set unified\n      echo "set cgroup config to unified, now rebooting..."\n      reboot\n    fi\n  fi\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo "Try to load docker image file ${img}"\n  # Temporarily turn off errexit, because we don\'t want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n\n  if [[ "${CONTAINER_RUNTIME_NAME:-}" == "docker" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-docker load -i}\n  elif [[ "${CONTAINER_RUNTIME_NAME:-}" == "containerd" || "${CONTAINERD_TEST:-}"  == "containerd" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-ctr -n=k8s.io images import}\n  else\n    load_image_command="${LOAD_IMAGE_COMMAND:-}"\n  fi\n\n  # Deliberately word split load_image_command\n  # shellcheck disable=SC2086\n  until timeout 30 ${load_image_command} "${img}"; do\n    if [[ "${attempt_num}" == "${max_attempts}" ]]; then\n      echo "Fail to load docker image file ${img} using ${load_image_command} after ${max_attempts} retries. Exit!!"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo "Start loading kube-system docker images"\n  local -r img_dir="${KUBE_HOME}/kube-docker-files"\n  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n    try-load-docker-image "${img_dir}/kube-apiserver.tar"\n    try-load-docker-image "${img_dir}/kube-controller-manager.tar"\n    try-load-docker-image "${img_dir}/kube-scheduler.tar"\n  else\n    try-load-docker-image "${img_dir}/kube-proxy.tar"\n  fi\n}\n\n# If we are on ubuntu we can try to install docker\nfunction install-docker {\n  # bailout if we are not on ubuntu\n  if ! command -v apt-get >/dev/null 2>&1; then\n    echo "Unable to automatically install docker. Bailing out..."\n    return\n  fi\n  # Install Docker deps, some of these are already installed in the image but\n  # that\'s fine since they won\'t re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    --location \\\n    "https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID")/gpg" \\\n  | apt-key add -\n  add-apt-repository \\\n    "deb [arch=${HOST_ARCH}] https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID") \\\n    $release stable"\n\n  # Install Docker\n  apt-get update && \\\n    apt-get install -y --no-install-recommends "${GCI_DOCKER_VERSION:-"docker-ce=5:19.03.*"}"\n  rm -rf /var/lib/apt/lists/*\n}\n\n# If we are on ubuntu we can try to install containerd\nfunction install-containerd-ubuntu {\n  # bailout if we are not on ubuntu\n  if [[ -z "$(command -v lsb_release)" || $(lsb_release -si) != "Ubuntu" ]]; then\n    echo "Unable to automatically install containerd in non-ubuntu image. Bailing out..."\n    exit 2\n  fi\n\n  # Install dependencies, some of these are already installed in the image but\n  # that\'s fine since they won\'t re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository (as we install containerd from there)\n  # shellcheck disable=SC2086\n  curl ${CURL_FLAGS} \\\n    --location \\\n    "https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID")/gpg" \\\n  | apt-key add -\n  add-apt-repository \\\n    "deb [arch=${HOST_ARCH}] https://download.docker.com/${HOST_PLATFORM}/$(. /etc/os-release; echo "$ID") \\\n    $release stable"\n\n  # Install containerd from Docker repo\n  apt-get update && \\\n    apt-get install -y --no-install-recommends containerd\n  rm -rf /var/lib/apt/lists/*\n\n  # Override to latest versions of containerd and runc\n  systemctl stop containerd\n  if [[ -n "${UBUNTU_INSTALL_CONTAINERD_VERSION:-}" ]]; then\n    # TODO(https://github.com/containerd/containerd/issues/2901): Remove this check once containerd has arm64 release.\n    if [[ $(dpkg --print-architecture) != "amd64" ]]; then\n      echo "Unable to automatically install containerd in non-amd64 image. Bailing out..."\n      exit 2\n    fi\n    # containerd versions have slightly different url(s), so try both\n    # shellcheck disable=SC2086\n    ( curl ${CURL_FLAGS} \\\n        --location \\\n        "https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}-${HOST_PLATFORM}-${HOST_ARCH}.tar.gz" \\\n      || curl ${CURL_FLAGS} \\\n        --location \\\n        "https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}.${HOST_PLATFORM}-${HOST_ARCH}.tar.gz" ) \\\n    | tar --overwrite -xzv -C /usr/\n  fi\n  if [[ -n "${UBUNTU_INSTALL_RUNC_VERSION:-}" ]]; then\n    # TODO: Remove this check once runc has arm64 release.\n    if [[ $(dpkg --print-architecture) != "amd64" ]]; then\n      echo "Unable to automatically install runc in non-amd64. Bailing out..."\n      exit 2\n    fi\n    # shellcheck disable=SC2086\n    curl ${CURL_FLAGS} \\\n      --location \\\n      "https://github.com/opencontainers/runc/releases/download/${UBUNTU_INSTALL_RUNC_VERSION}/runc.${HOST_ARCH}" --output /usr/sbin/runc \\\n    && chmod 755 /usr/sbin/runc\n  fi\n  sudo systemctl start containerd\n}\n\nfunction ensure-container-runtime {\n  container_runtime="${CONTAINER_RUNTIME:-docker}"\n  if [[ "${container_runtime}" == "docker" ]]; then\n    if ! command -v docker >/dev/null 2>&1; then\n      install-docker\n      if ! command -v docker >/dev/null 2>&1; then\n        echo "ERROR docker not found. Aborting."\n        exit 2\n      fi\n    fi\n    docker version\n  elif [[ "${container_runtime}" == "containerd" ]]; then\n    # Install containerd/runc if requested\n    if [[ -n "${UBUNTU_INSTALL_CONTAINERD_VERSION:-}" || -n "${UBUNTU_INSTALL_RUNC_VERSION:-}" ]]; then\n      install-containerd-ubuntu\n    fi\n    # Verify presence and print versions of ctr, containerd, runc\n    if ! command -v ctr >/dev/null 2>&1; then\n      echo "ERROR ctr not found. Aborting."\n      exit 2\n    fi\n    ctr --version\n\n    if ! command -v containerd >/dev/null 2>&1; then\n      echo "ERROR containerd not found. Aborting."\n      exit 2\n    fi\n    containerd --version\n\n    if ! command -v runc >/dev/null 2>&1; then\n      echo "ERROR runc not found. Aborting."\n      exit 2\n    fi\n    runc --version\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd "${KUBE_HOME}"\n  local server_binary_tar_urls\n  while IFS= read -r url; do\n    server_binary_tar_urls+=("$url")\n  done < <(split-commas "${SERVER_BINARY_TAR_URL}")\n  local -r server_binary_tar="${server_binary_tar_urls[0]##*/}"\n  if [[ -n "${SERVER_BINARY_TAR_HASH:-}" ]]; then\n    local -r server_binary_tar_hash="${SERVER_BINARY_TAR_HASH}"\n  else\n    echo "Downloading binary release sha512 (not found in env)"\n    download-or-bust "" "${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha512}"\n    local -r server_binary_tar_hash=$(cat "${server_binary_tar}.sha512")\n  fi\n\n  if is-preloaded "${server_binary_tar}" "${server_binary_tar_hash}"; then\n    echo "${server_binary_tar} is preloaded."\n  else\n    echo "Downloading binary release tar"\n    download-or-bust "${server_binary_tar_hash}" "${server_binary_tar_urls[@]}"\n    tar xzf "${KUBE_HOME}/${server_binary_tar}" -C "${KUBE_HOME}" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir="${KUBE_HOME}/kubernetes/server/bin"\n    local dst_dir="${KUBE_HOME}/kube-docker-files"\n    mkdir -p "${dst_dir}"\n    cp "${src_dir}/"*.docker_tag "${dst_dir}"\n    if [[ "${KUBERNETES_MASTER:-}" == "false" ]]; then\n      cp "${src_dir}/kube-proxy.tar" "${dst_dir}"\n    else\n      cp "${src_dir}/kube-apiserver.tar" "${dst_dir}"\n      cp "${src_dir}/kube-controller-manager.tar" "${dst_dir}"\n      cp "${src_dir}/kube-scheduler.tar" "${dst_dir}"\n      cp -r "${KUBE_HOME}/kubernetes/addons" "${dst_dir}"\n    fi\n    load-docker-images\n    mv "${src_dir}/kubelet" "${KUBE_BIN}"\n    mv "${src_dir}/kubectl" "${KUBE_BIN}"\n\n    # Some older images have LICENSES baked-in as a file. Presumably they will\n    # have the directory baked-in eventually.\n    rm -rf "${KUBE_HOME}"/LICENSES\n    mv "${KUBE_HOME}/kubernetes/LICENSES" "${KUBE_HOME}"\n    mv "${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz" "${KUBE_HOME}"\n\n    record-preload-info "${server_binary_tar}" "${server_binary_tar_hash}"\n  fi\n\n  if [[ "${NETWORK_PROVIDER:-}" == "kubenet" ]] || \\\n     [[ "${NETWORK_PROVIDER:-}" == "cni" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 "${KUBE_BIN}"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the "exec" option, if needed.\n  if [[ "${REMOUNT_VOLUME_PLUGIN_DIR:-}" == "true" && -n "${VOLUME_PLUGIN_DIR:-}" ]]; then\n    remount-flexvolume-directory "${VOLUME_PLUGIN_DIR}"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  # Preload pause image\n  preload-pause-image\n\n  # Copy health check binaries to a tmpfs mount to reduce block IO usage.\n  setup-shm-healthcheck-binaries\n\n  # TODO(awly): include the binary and license in the OS image.\n  install-exec-auth-plugin\n\n  # Source GKE specific scripts.\n  #\n  # This must be done after install-kube-manifests where the\n  # gke-internal-configure.sh is downloaded.\n  if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n    echo "Running GKE internal configuration script gke-internal-configure.sh"\n    . "${KUBE_HOME}/bin/gke-internal-configure.sh"\n  fi\n\n  if [[ "${KUBERNETES_MASTER:-}" == "false" ]] && \\\n     [[ "${ENABLE_NODE_PROBLEM_DETECTOR:-}" == "standalone" ]]; then\n    install-node-problem-detector\n    if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n      install-npd-custom-plugins\n    fi\n  fi\n\n  # Clean up.\n  rm -rf "${KUBE_HOME}/kubernetes"\n  rm -f "${KUBE_HOME}/${server_binary_tar}"\n  rm -f "${KUBE_HOME}/${server_binary_tar}.sha512"\n}\n\nfunction setup-shm-healthcheck-binaries() {\n  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n    return\n  fi\n  if [[ "${ENABLE_SHM_HEALTHCHECK_BINARIES:-}" != "true" ]];then\n    return\n  fi\n\n  local -r shm_dir="${HEALTHCHECK_SHM_DIR:-/dev/kube_shm}"\n  local -r shm_bin_dir="${shm_dir}/bin"\n\n  mkdir -p "$shm_dir"\n  mount -t tmpfs -o exec none "$shm_dir"\n  mkdir "${shm_bin_dir}"\n\n  cp -f "${KUBE_BIN}/crictl" "${shm_bin_dir}/crictl"\n  cp -f "$(which curl)" "${shm_bin_dir}/curl"\n}\n\nfunction install-extra-node-requirements() {\n  if [[ "${KUBERNETES_MASTER:-}" != "false" ]]; then\n    return\n  fi\n  if [[ -e "${KUBE_HOME}/bin/gke-internal-configure.sh" ]]; then\n    # M4A is not relevant on ARM\n    if [[ "${HOST_ARCH}" == "amd64" ]]; then\n      install-m4a-apparmor-profile\n    fi\n  fi\n}\n\n# This function detects the platform/arch of the machine where the script runs,\n# and sets the HOST_PLATFORM and HOST_ARCH environment variables accordingly.\n# Callers can specify HOST_PLATFORM_OVERRIDE and HOST_ARCH_OVERRIDE to skip the detection.\n# This function is adapted from the detect_client_info function in cluster/get-kube-binaries.sh\n# and kube::util::host_os, kube::util::host_arch functions in hack/lib/util.sh\n# This function should be synced with detect_host_info in ./configure-helper.sh\nfunction detect_host_info() {\n  HOST_PLATFORM=${HOST_PLATFORM_OVERRIDE:-"$(uname -s)"}\n  case "${HOST_PLATFORM}" in\n    Linux|linux)\n      HOST_PLATFORM="linux"\n      ;;\n    *)\n      echo "Unknown, unsupported platform: ${HOST_PLATFORM}." >&2\n      echo "Supported platform(s): linux." >&2\n      echo "Bailing out." >&2\n      exit 2\n  esac\n\n  HOST_ARCH=${HOST_ARCH_OVERRIDE:-"$(uname -m)"}\n  case "${HOST_ARCH}" in\n    x86_64*|i?86_64*|amd64*)\n      HOST_ARCH="amd64"\n      ;;\n    aHOST_arch64*|aarch64*|arm64*)\n      HOST_ARCH="arm64"\n      ;;\n    *)\n      echo "Unknown, unsupported architecture (${HOST_ARCH})." >&2\n      echo "Supported architecture(s): amd64 and arm64." >&2\n      echo "Bailing out." >&2\n      exit 2\n      ;;\n  esac\n}\n\n# Retries a command forever with a delay between retries.\n# Args:\n#  $1    : delay between retries, in seconds.\n#  $2... : the command to run.\nfunction retry-forever {\n  local -r delay="$1"\n  shift 1\n\n  until "$@"; do\n    echo "== $* failed, retrying after ${delay}s"\n    sleep "${delay}"\n  done\n}\n\n# Initializes variables used by the log-* functions.\n#\n# get-metadata-value must be defined before calling this function.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-init {\n  # Used by log-* functions.\n  LOG_CLUSTER_ID=${LOG_CLUSTER_ID:-$(get-metadata-value \'instance/attributes/cluster-uid\' \'get-metadata-value-error\')}\n  LOG_INSTANCE_NAME=$(hostname || echo \'hostname-error\')\n  LOG_BOOT_ID=$(journalctl --list-boots | grep -E \'^ *0\' | awk \'{print $2}\' || echo \'journalctl-error\')\n  declare -Ag LOG_START_TIMES\n  declare -ag LOG_TRAP_STACK\n\n  LOG_STATUS_STARTED=\'STARTED\'\n  LOG_STATUS_COMPLETED=\'COMPLETED\'\n  LOG_STATUS_ERROR=\'ERROR\'\n}\n\n# Sets an EXIT trap.\n# Args:\n#   $1:... : the trap command.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-push {\n  local t="${*:1}"\n  LOG_TRAP_STACK+=("${t}")\n  # shellcheck disable=2064\n  trap "${t}" EXIT\n}\n\n# Removes and restores an EXIT trap.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-pop {\n  # Remove current trap.\n  unset \'LOG_TRAP_STACK[-1]\'\n\n  # Restore previous trap.\n  if [ ${#LOG_TRAP_STACK[@]} -ne 0 ]; then\n    local t="${LOG_TRAP_STACK[-1]}"\n    # shellcheck disable=2064\n    trap "${t}" EXIT\n  else\n    # If no traps in stack, clear.\n    trap EXIT\n  fi\n}\n\n# Logs the end of a bootstrap step that errored.\n# Args:\n#  $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-error {\n  local bootstep="$1"\n\n  log-proto "${bootstep}" "${LOG_STATUS_ERROR}" "encountered non-zero exit code"\n}\n\n# Wraps a command with bootstrap logging.\n# Args:\n#   $1    : bootstrap step name.\n#   $2... : the command to run.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-wrap {\n  local bootstep="$1"\n  local command="${*:2}"\n\n  log-trap-push "log-error ${bootstep}"\n  log-proto "${bootstep}" "${LOG_STATUS_STARTED}"\n  $command\n  log-proto "${bootstep}" "${LOG_STATUS_COMPLETED}"\n  log-trap-pop\n}\n\n# Logs a bootstrap step start. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-start {\n  local bootstep="$1"\n\n  log-trap-push "log-error ${bootstep}"\n  log-proto "${bootstep}" "${LOG_STATUS_STARTED}"\n}\n\n# Logs a bootstrap step end. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-end {\n  local bootstep="$1"\n\n  log-proto "${bootstep}" "${LOG_STATUS_COMPLETED}"\n  log-trap-pop\n}\n\n# Writes a log proto to stdout.\n# Args:\n#   $1: bootstrap step name.\n#   $2: status. Either \'STARTED\', \'COMPLETED\', or \'ERROR\'.\n#   $3: optional status reason.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-proto {\n  local bootstep="$1"\n  local status="$2"\n  local status_reason="${3:-}"\n\n  # Get current time.\n  local current_time\n  current_time="$(date --utc \'+%s.%N\')"\n  # ...formatted as UTC RFC 3339.\n  local timestamp\n  timestamp="$(date --utc --date="@${current_time}" \'+%FT%T.%NZ\')"\n\n  # Calculate latency.\n  local latency=\'null\'\n  if [ "${status}" == "${LOG_STATUS_STARTED}" ]; then\n    LOG_START_TIMES["${bootstep}"]="${current_time}"\n  else\n    local start_time="${LOG_START_TIMES["${bootstep}"]}"\n    unset \'LOG_START_TIMES[\'"${bootstep}"\']\'\n\n    # Bash cannot do non-integer math, shell out to awk.\n    latency="$(echo "${current_time} ${start_time}" | awk \'{print $1 - $2}\')s"\n\n    # The default latency is null which cannot be wrapped as a string so we must\n    # do it here instead of the printf.\n    latency="\\"${latency}\\""\n  fi\n\n  printf \'[cloud.kubernetes.monitoring.proto.SerialportLog] {"cluster_hash":"%s","vm_instance_name":"%s","boot_id":"%s","timestamp":"%s","bootstrap_status":{"step_name":"%s","status":"%s","status_reason":"%s","latency":%s}}\\n\' \\\n  "${LOG_CLUSTER_ID}" "${LOG_INSTANCE_NAME}" "${LOG_BOOT_ID}" "${timestamp}" "${bootstep}" "${status}" "${status_reason}" "${latency}"\n}\n\n######### Main Function ##########\nlog-init\ndetect_host_info\n\n# Preloader will source this script, and skip the main function. The preloader\n# will choose what to preload by calling install-X functions directly.\n# When configure.sh is sourced by the preload script, $0 and $BASH_SOURCE are\n# different. $BASH_SOURCE still contains the path of configure.sh, while $0 is\n# the path of the preload script.\nif [[ "$0" != "$BASH_SOURCE" && "${IS_PRELOADER:-"false"}" == "true" ]]; then\n  echo "Running in preloader instead of VM bootsrapping. Skipping installation steps as preloader script will source configure.sh and call corresponding functions."\n  return\nfi\n\nlog-start \'ConfigureMain\'\necho "Start to install kubernetes files"\n\n# if install fails, message-of-the-day (motd) will warn at login shell\nlog-wrap \'SetBrokenMotd\' set-broken-motd\n\nKUBE_HOME="/home/kubernetes"\nKUBE_BIN="${KUBE_HOME}/bin"\n\nif [[ "$(is-master)" == "true" ]]; then\n  log-wrap \'InstallHurl\' install-hurl\n  log-wrap \'InstallInplace\' install-inplace\nfi\n\n# download and source kube-env\nlog-wrap \'DownloadKubeEnv\' download-kube-env\nlog-wrap \'SourceKubeEnv\' source "${KUBE_HOME}/kube-env"\n\nlog-wrap \'ConfigureCgroupMode\' configure-cgroup-mode\n\nlog-wrap \'DownloadKubeletConfig\' download-kubelet-config "${KUBE_HOME}/kubelet-config.yaml"\n\nif [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n  log-wrap \'DownloadKubeMasterCerts\' download-kube-master-certs\nfi\n\n# ensure chosen container runtime is present\nlog-wrap \'EnsureContainerRuntime\' ensure-container-runtime\n\n# binaries and kube-system manifests\nlog-wrap \'InstallKubeBinaryConfig\' install-kube-binary-config\n\nif [[ "${ENABLE_GCFS:-""}" == "true" ]]; then\n  log-wrap \'InstallRiptide\' install-riptide\nfi\n\n# extra node requirements\nlog-wrap \'InstallExtraNodeRequirements\' install-extra-node-requirements\n\n# download inplace component manifests\nif [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then\n  log-wrap \'InplaceRunOnce\' retry-forever 30 inplace-run-once\nfi\n\necho "Done for installing kubernetes files"\nlog-end \'ConfigureMain\'\n'}, {'key': 'disable-legacy-endpoints', 'value': 'true'}, {'key': 'user-data', 'value': '#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error -H "X-Google-Metadata-Request: True" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: \'0644\'\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\n  - path: /etc/modprobe.d/sunrpc.conf\n    permissions: \'0644\'\n    owner: root\n    # The GKE metadata server uses ports 987-989, so the sunrpc range should be restricted to be below.\n    content: |\n      options sunrpc max_resvport=986\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n'}, {'key': 'kube-env', 'value': 'ALLOCATE_NODE_CIDRS: "true"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=80m,memory=3237Mi,ephemeral-storage=41Gi;node_labels=cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-cpu-scaling-level=4,cloud.google.com/gke-logging-variant=DEFAULT,cloud.google.com/gke-max-pods-per-node=32,cloud.google.com/gke-netd-ready=true,cloud.google.com/gke-nodepool=default-pool,cloud.google.com/gke-os-distribution=cos,cloud.google.com/machine-family=n1,node.kubernetes.io/masq-agent-ds-ready=true;arch=amd64;os=linux;os_distribution=cos;evictionHard=memory.available=100Mi,nodefs.available=10%,nodefs.inodesFree=5%,pid.available=10%\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMRENDQXBTZ0F3SUJBZ0lRY3BKY3dwZUZtRWlvMHVTQlRFVEJoREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMU1EQXlabUU1WXkxak5tVm1MVFExTnpZdFlUZGlaaTAwTTJJNU1HTmlZak0zWlRFdwpJQmNOTWpNd05URXhNVGN5TVRFeFdoZ1BNakExTXpBMU1ETXhPREl4TVRGYU1DOHhMVEFyQmdOVkJBTVRKRFV3Ck1ESm1ZVGxqTFdNMlpXWXRORFUzTmkxaE4ySm1MVFF6WWprd1kySmlNemRsTVRDQ0FhSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0dQQURDQ0FZb0NnZ0dCQUl5RVRpVHdTa01rRlpIb3RRcXNSOGNpcTBaT2tvd3d1ZUtVMmxBZgpOVTZZRnBBY1dtU3FYckt6S3dmYmQ3S1VPNk91UFYzYkoyeUx6Sy94WFUvT0tpRFZ6d3dNTUdEUnFaSGhLWURHClhuaDU3NFdhWW5WZ0hiVmJZUnRrcmJRUEZjcUhTRHNZRmx6TUZqKzllNW5NS1hYNWNNbDlnNFMrK3N6bHhFdHUKRGIxNUNvY3RHWkVQQzExQjFoM3MzVTJPb0dtdlNVRUltcTFoejVkMFhxL2VyVTdlUloyMnh6cGFuUGRLUkdqNwprNjdZQ1BDN2xMRTl2Q3FwejRVYTF5dWJhNi9ranlsdTlabDhjRHNpU3A1bmlqN29rRFVQRmQ3ZW1TdVpMMy96Cjk4aDN0QTdGNkE3cFVDOWp5VlVNMGhQUzdranN6YkFsOW80SnBnZ3lNR2RtSEpnTTVzbzNBRHhFQVZ2Ujh5UXMKNnF6ejQ0VlhKTzBNUXhENGN0MVB1c3lyNTJ0TjY3a05kdkpLZnEzT2R4OXd2N2RUL01pcDFLWjlxaFQrdTJ6QwpaZ3Y0OGJqQnFJaUdpMWJsOUFUOXlGVVdNYkJoR3BGUitZRFhqbmUrTDNpVFIyVnBwUE95ckNsVzNkM3R4VExwClBVVTRSdnRkVDBHTk53dkNuby9VdjQxanZ3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVLeUNhd1RBZmRwYWpGQUllUDEyZzNxV2FmQ2N3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dHQkFBV2FKeE5pdllML0VReGFJZ3k2UWVuTm44cTZFOVVZSEFoL3lROVdNVy84CjNhV0VsT1MrQ0UzaHlkUkU2eFNXR2YvMldkZGhnUG5mQlZ0a3Z3TXd0cHBQNkNoRkxtVkdqNkJ1dmxGdm01Qk0KZHVnd2hJS1U3UmVXaFY0dEpCQnRtd3R4THdLVkM0QXJDWGtmZUg5N0V4dUxJakwvVEF0d29TcFJ4MlFITUxzWQpwWHpUWUJhRHc1SDFqR0NuSlVjKysxUzB2b3ljY0NwNjcyN0crQ3o5Tm14VXVPbjNUdGRBWlhaUXhPcytJU2ZJCmJYMEI1NnlDS2loeEVncysvZzd3WEZUc1VMZkpBQUR1V2pFVUQzUExXNTFxcWRkQm8xUDdLQU1nNng1ckI4Y2cKQ2MzUEhUaEF2ZjgwVjJPMlRmcDNQN3FycmFVTkNOVzB5cHRTNnF6djloZ2poRE9TQU1rNW9RRGFsTi9jVlBuSApRSDBMcUZHZzBQQzJMMURKUnJDMC9GUnhjWGhGQStMUkRoOVJyV213Z292UWppSFB2bEtFYVYzRDJoSGhETW1yCjRKTEJBZHU3TlBXUnc0SXN5ZFlva3lzZHhLWHgyMEluK3NBL01aZFNFVWhBZjdvNnlDOTZpOWdzUkhjRUw0K04KVG9URzJNdkQ2WDVqQ0RuWWdPNTd3dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 100.64.20.0/22\nCLUSTER_NAME: northamerica-northeast1-pmo-6076886b-gke\nCNI_HASH: ba28765e2939d398dc101ff5543e62a14d132a113102b371af8da86722a4dfbfb3cc5121e6cbdb349e5d9d892e66f034ba24d0b4acd2f1df942c0cd9bcc5723a\nCNI_SHA1: a687a7150d8201ac374b1915829c80ab3cf0c774\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v1.0.1-gke.4\nCNI_STORAGE_URL_BASE: https://storage.googleapis.com/gke-release/cni-plugins\nCNI_TAR_PREFIX: cni-plugins-linux-amd64-\nCNI_VERSION: v1.0.1-gke.4\nCONTAINER_RUNTIME: containerd\nCONTAINER_RUNTIME_ENDPOINT: unix:///run/containerd/containerd.sock\nCONTAINER_RUNTIME_NAME: containerd\nCONTAINERD_MAX_CONTAINER_LOG_LINE: "262144"\nCREATE_BOOTSTRAP_KUBECONFIG: "false"\nDETECT_LOCAL_MODE: NodeCIDR\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 100.66.2.138\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: "1"\nENABLE_CLUSTER_DNS: "true"\nENABLE_CLUSTER_LOGGING: "false"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: "false"\nENABLE_CLUSTER_UI: "true"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_LATEST_NPD: "true"\nENABLE_METADATA_AGENT: ""\nENABLE_METRICS_SERVER: "true"\nENABLE_NETD: "true"\nENABLE_NODE_LOGGING: "false"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODE_REGISTRATION_CHECKER: "true"\nENABLE_NODELOCAL_DNS: "false"\nENABLE_SHM_HEALTHCHECK_BINARIES: "true"\nENABLE_SYSCTL_TUNING: "true"\nENV_TIMESTAMP: "2023-05-11T18:21:04+00:00"\nEXEC_AUTH_PLUGIN_HASH: 5e3d7c0504132820d5625aac230056becc23a20a6c0040afadf123f36c6d32b73e4625640881ec3b62e76846cfc1789d036486fc78ee6cdf40666d2dfe6ba356\nEXEC_AUTH_PLUGIN_LICENSE_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/d741bb92df4f39f2fb7201460f70c861d50e442c/LICENSE\nEXEC_AUTH_PLUGIN_SHA1: 8fa5a3a7c7229f1b22a9d5ce9ff7192cf1f02336\nEXEC_AUTH_PLUGIN_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/d741bb92df4f39f2fb7201460f70c861d50e442c/linux_amd64/gke-exec-auth-plugin\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nEXTRA_POD_SYSCTLS: net.ipv6.conf.all.disable_ipv6=1,net.ipv6.conf.default.disable_ipv6=1\nFEATURE_GATES: DynamicKubeletConfig=false,InTreePluginAWSUnregister=true,InTreePluginAzureDiskUnregister=true,InTreePluginOpenStackUnregister=true,InTreePluginvSphereUnregister=true,DisableKubeletCloudCredentialProviders=false,RotateKubeletServerCertificate=true,ExecProbeTimeout=false,CSIMigrationGCE=true\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: "true"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: "false"\nHPA_USE_REST_CLIENTS: "true"\nINSTANCE_PREFIX: gke-northamerica-northeast1-pmo-6076886b-gke-e8585222\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 100.66.2.138\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: 0978cac1aa792134997e2a49f766a6f05b88e6a30e03e42f8d4f8eade347f4e788a409a57d09f1c64cf1318ac3cc59af5898d8c48a5dede7e6ed09875deebd3f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: oOG1f0qqUboIx4j8FxknyCsSupvXYQM0cnGPJDJx9II=\nKUBELET_ARGS: --v=2 --cloud-provider=gce --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter\n  --cert-dir=/var/lib/kubelet/pki/ --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=32\n  --volume-plugin-dir=/home/kubernetes/flexvolume --node-status-max-images=25 --container-runtime=remote\n  --container-runtime-endpoint=unix:///run/containerd/containerd.sock --runtime-cgroups=/system.slice/containerd.service\n  --registry-qps=10 --registry-burst=20\nKUBERNETES_MASTER: "false"\nKUBERNETES_MASTER_NAME: 10.195.35.194\nLOAD_IMAGE_COMMAND: ctr -n=k8s.io images import\nLOGGING_DESTINATION: ""\nLOGGING_STACKDRIVER_RESOURCE_TYPES: ""\nMONITORING_FLAG_SET: "true"\nNETWORK_PROVIDER: cni\nNODE_LOCAL_SSDS_EXT: ""\nNON_MASQUERADE_CIDR: 0.0.0.0/0\nREMOUNT_VOLUME_PLUGIN_DIR: "true"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: "true"\nSALT_TAR_HASH: ""\nSALT_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: d94de1c6d04a48e2dd1bfa5dd57cc6a5e49fd8f834683a13def83dc6d6c1f647ab6ee21a12696cc06ed4704e3120f11cbc012e55b5b7f3d8ef6237e1377cad84\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.24.11-gke.1000/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 100.66.2.128/25\nSTACKDRIVER_ENDPOINT: https://logging.googleapis.com\nSYSCTL_OVERRIDES: ""\nTPM_BOOTSTRAP_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxekNDQWhPZ0F3SUJBZ0lRQ25LZE9rVVIzbkgyZmZyallRU01MREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMU1EQXlabUU1WXkxak5tVm1MVFExTnpZdFlUZGlaaTAwTTJJNU1HTmlZak0zWlRFdwpIaGNOTWpNd05URXhNVGd4T1RFeVdoY05Namd3TlRBNU1UZ3lNVEV5V2pBY01Sb3dHQVlEVlFRREV4RnJkV0psCmJHVjBMV0p2YjNSemRISmhjRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFONUkKQVBzY0QzLytUZC9uRFRsMjRXOU42aklXM0dRQzNzNTM4anFFMUkxNEtJU21DQUdjazBkVjdBZDZaSmd3WitNOQovcVNvQUpBNmtoM1ZaOE9YOXpPOW85RDVtMkVtRFFRZmg0RzlwY1JGMllDd2NWL2I0d0FGdDkySGoyc1RlaDMvCnNlUXpOV0ZPcGtEVHErdVFiZEk4bHNTZXlJaUhsSXIwYzgyc01PWi9qM0p3bS9OMzByd0xiZmlxSXovUHRvaGUKZDkzTGIvZU9ac3J5YlFaRnZwWC81bU10VUFjeHBSN0M5SURqNHBKbU1sNDhnQVozVFpkRDhsL3BObmpSQlRIUQpZUHZoWEkyTmtIQ1B2VTUraWNZek0rMVcyckw2cDNvOVNORUFtOHVsQURvakhqTVN5Y1cvWXB0RERVeEVXZFV3CiswVXVnMjR2U21GWmxsVFN1eTBDQXdFQUFhTldNRlF3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVUt5Q2F3VEFmZHBhagpGQUllUDEyZzNxV2FmQ2N3RFFZSktvWklodmNOQVFFTEJRQURnZ0dCQUMyOVFheXQ3eWtLWXoxTzFFdGhQWEFMCkxzblMxMGI5SUFYZjBNL3M4b2tMR1BPUU1XZWtCRVFXQTFERHpyQTBEK3pOWUI4M05FQXhpOHNUZGZRZlVRckkKRGgvMzc2aUNwZGhBSHFORDlNNUxIWnpiUHNwOVNpcWorZHFYRTVUSFFSZVlvNzJXdmx4Y2VLUGdUSjVTY1VONQpta3p3Q25xdm83VmdLTFhnOFNtWDdVS3E5WWhERFFBRmhHeXNFQ0ZneFVRdCtuWXE4YjZUTlYveDQ4ZXRwUURRCjdHTCtSa3Eyb2FDV1ZUaTMyZWd6RDBkL2R4bmw4MmllMUZnM2FvaWNMdGRVMWR3R1k4SjFQQ3c3alBlRFlkQUEKa09QQ0dTVHZxOTZXV3RJL0x0TkFhN1JkQ2hOYjdXbGVYMkJPcnB0ZjlqdWVtbFl2ckFQYWRFcUhWakg1cnlQaApBQjM0N29tenQ3aGlvTklYdkdaS0t4NHp3azZFY2ZLYVZLZVY3dEhWUFNZcFhmOWxPakZ3Mks0R3d5ZkRQTm9VCjRvVU9yYVRQQmp4Z0VNanlKeUI0WDdaQnc3L2xCM1ZmT2NWYU9yMlpTaUVvWWxma3gzcmFaeXhzNGxIVlVRbjUKUEswRXFNS2Z3LzNrY09VVlB1NUorUHJnWVlRY1pMdDNHa0NZMnQrOEV3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nTPM_BOOTSTRAP_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM2tnQSt4d1BmLzVOMytjTk9YYmhiMDNxTWhiY1pBTGV6bmZ5T29UVWpYZ29oS1lJCkFaeVRSMVhzQjNwa21EQm40ejMrcEtnQWtEcVNIZFZudzVmM003MmowUG1iWVNZTkJCK0hnYjJseEVYWmdMQngKWDl2akFBVzMzWWVQYXhONkhmK3g1RE0xWVU2bVFOT3I2NUJ0MGp5V3hKN0lpSWVVaXZSenphd3c1bitQY25DYgo4M2ZTdkF0dCtLb2pQOCsyaUY1MzNjdHY5NDVteXZKdEJrVytsZi9tWXkxUUJ6R2xIc0wwZ09QaWttWXlYanlBCkJuZE5sMFB5WCtrMmVORUZNZEJnKytGY2pZMlFjSSs5VG42SnhqTXo3VmJhc3ZxbmVqMUkwUUNieTZVQU9pTWUKTXhMSnhiOWltME1OVEVSWjFURDdSUzZEYmk5S1lWbVdWTks3TFFJREFRQUJBb0lCQURZa0JoOGpzTS9OWm5UdQpuMjA3ZkVIaTBiUVZGdVhDUURnOGhYTEU5MHVrOUlPSXVFTUNPdXBCYnAzTXJUTlhlUHBqMTRJT0RLTVVyUkhZCnNLODJ0TWEwdm5Hd1ZtMEZlbDZpZWx3NnorVThXVE9yNWxXQnBxc1MrWHViSU83ay9kWFFPYWxhWXJwYWtJcVMKTkJvS29nRTI4a2NlWUx4R2Y4TVBzeVFwdUhodnJialp3enY5UFY1bVdzMmNsKytad2lJN1YzbkYxcVUyTjJiMgpSdk9VK0FGRndUSzQ5UjJXMWhYSkJQb0RLeVh3amFCcitNMDdnWmZYL2lmQmNUaEFhOWRBb21NWVJ6WFQrSnl2CmkrWmpIbENJbHEzSzErbzYvcXpRMWVHWURNdmdlajZLR0NnNE9lYWZ0cXZmdEcyc2h6NHFOcUcxRWRnZHpudS8KOHltT2FSa0NnWUVBK0cxUHd2RnRkTHpFQVdWT2RXeW85MXovQ0dBRmVCdkd4bDhxYnN2eVNZQnNjOVF4VHBPUgpWOHVUYlFXbXJBNi8yVnlqMCsyczNrY0NSYktFUUtRRjZjN3E2R0ticzBiNXhMYWVLRE9lTmVBOGZUT0kwZjRnCllKRytTdGZPNC9tOTFUNlJrSkExeE4vZ3R5NkVJWEtQbkFGZnBBWkhnUTVhRS96U1Fid2NOMFVDZ1lFQTVRNm4KbkxFSFB3WFl3bDBuVVB0SEZSREloVllabElXKzVvZUYzMTNCL1VMdTgvZmFvM25qdUdCUWhwNXZTbnl0cDllWQoxa21zOXdvMlM4bXJyM0c2ZnF5NGUrOVFWRVdvQWdDUHdkL1FnZmFPVDdJaWRaRVVMRnlGb3VzbWpzMDJNYVppCmhFRFpXa2g2UUVrMGZIVC9Dakd4Wjl5V0ZZUVVMblVTZk9MZ1hza0NnWUFhc1pRNmZEcW9xb2ZkSm9lUnNvVk4KWHg3QVJhRVEwTnRCQVlUTHR2cG56M2JYMDFzZytGWkx1c0l5bXNMWUJoV3pRM01QR0tEVW1ZaXkrSVdoZEg1MgpLeGV1dExuS1A3d2kyUVNSaVVwY3U2V0VSbjlUSVIxVmd4T1JjekwxNkNYdnZmTmlOenl2MU9hT2lGOEdRUXNSClZreHlrWUlwYWVOZjluQ1pRNTg4aVFLQmdRRGNuZHJPVHF1ZUJmR2Fjc0oxZXpBaG1BS3FlaDAxTWdTR1lTMk4Keis0U0VxKzRCNWRzTVBBbUc0NHp1dEdTT3JlL215WTM3c3BMUG1qQllrS2NQcnZUV21SdDZqZkNrenlZZ1JYMQpNNjdPSGowL2dXRXpQMExnMzFSUGNKRzRwT3Azczd2YmllSk8xTlA2cXdlRWYrTk5YRU4wdDc5T2hlSXlSTXhECndQaytFUUtCZ1FES1hma3BTUUVwY2RORnZUSmZUNys4QndWZU5UODVkQlJXV01Rc3JuY056d3ErK014dWF6Y2kKaVdxTVczY1RTR1JOOU9nWDF6dzZZRnBmQVF5MDBtNzNNNnFGRnlSRlZPSmZicnM3Nk1RWXlweWRlSm13aEJWWgpRZmF6cG5vcWFhSldsNW9BVTk3aTI4KzU2MHJ6UklXa2JhU2VzUTV1allBNWYrb2dZOEhjRUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: northamerica-northeast1-b\n'}, {'key': 'cluster-uid', 'value': 'e8585222f0ad46ae8702c3e4f03e0fb3d80a938140b04d6dabf5b95c949262f2'}, {'key': 'cluster-location', 'value': 'northamerica-northeast1-b'}]}, 'serviceAccounts': [{'email': 'sa-dia-pmoto-dis-upr-comp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/cloud-platform']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/gke-northamerica-northea-default-pool-6ddf92f8-lbbq', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labels': {'application': 'pm1t1', 'environment': 'upr', 'goog-composer-environment': 'pmoto-comp-001', 'goog-composer-environment-uuid': 'fb121f36-0bc4-4872-b1a4-7890e2b77bd0', 'goog-composer-location': 'northamerica-northeast1', 'goog-composer-version': 'composer-1-20-11-airflow-1-10-15', 'goog-gke-node': '', 'owner': 'aps-cloud', 'snow_queue_name': 'dia-operations-engineering'}, 'labelFingerprint': 'oXW5v2JnOzs=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': True, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'IhD2O72F1DM=', 'lastStartTimestamp': '2023-05-12T18:14:58.095-07:00', 'networkPerformanceConfig': {'totalEgressBandwidthTier': 'DEFAULT'}}
{'kind': 'compute#instance', 'id': '2136322796401107144', 'creationTimestamp': '2022-12-21T06:54:32.684-08:00', 'name': 'shubham-m-no-idle-deletion-m', 'tags': {'items': ['allow-internet', 'dataproc-notebook-vm', 'dproc-internal'], 'fingerprint': 'Zi7AyqiaFVA='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.45', 'name': 'nic0', 'fingerprint': 'WSKwgpKItMA=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-m', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'kSmgz51NfiM=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'false'}, {'key': 'dataproc-notebooks-url', 'value': 'https://3jvljjqxubgjnfk7omjhtrylhm-dot-northamerica-northeast1.dataproc.googleusercontent.com/gateway/default/jupyter/'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Master'}, {'key': 'node-group-roles', 'value': 'MASTER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-m', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'fakfliNmb2U=', 'lastStartTimestamp': '2023-05-10T09:04:19.517-07:00', 'lastStopTimestamp': '2023-05-11T10:55:36.532-07:00'}
{'kind': 'compute#instance', 'id': '1130920696718729416', 'creationTimestamp': '2022-12-21T06:54:32.497-08:00', 'name': 'shubham-m-no-idle-deletion-w-0', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.36', 'name': 'nic0', 'fingerprint': 'tH18lYToEaI=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-0', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'tW1DfDxiNhA=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-0'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-0', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'k1leUpgfcCM=', 'lastStartTimestamp': '2023-05-10T09:04:12.604-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.823-07:00'}
{'kind': 'compute#instance', 'id': '120869359362941128', 'creationTimestamp': '2022-12-21T06:54:32.256-08:00', 'name': 'shubham-m-no-idle-deletion-w-1', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.44', 'name': 'nic0', 'fingerprint': '2cSQCEVmoNo=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-1', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'qPaBavlPw9A=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-1'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-1', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'pCkCP9RwVLs=', 'lastStartTimestamp': '2023-05-10T09:04:12.312-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.800-07:00'}
{'kind': 'compute#instance', 'id': '4412906757522628808', 'creationTimestamp': '2022-12-21T06:54:32.510-08:00', 'name': 'shubham-m-no-idle-deletion-w-2', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.38', 'name': 'nic0', 'fingerprint': 'sUzwrLqg4Hk=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-2', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'CZgyayO0BE8=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-2'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-2', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'OUNGs-lakac=', 'lastStartTimestamp': '2023-05-10T09:04:12.789-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.748-07:00'}
{'kind': 'compute#instance', 'id': '4595180608309600456', 'creationTimestamp': '2022-12-21T06:54:32.404-08:00', 'name': 'shubham-m-no-idle-deletion-w-3', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.31', 'name': 'nic0', 'fingerprint': 'taIViAjGiyg=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-3', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'S9PSoVZ4Q_Y=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-3'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-3', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'xTi4USz2OFw=', 'lastStartTimestamp': '2023-05-10T09:04:12.807-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.938-07:00'}
***********************
{'kind': 'compute#instance', 'id': '2136322796401107144', 'creationTimestamp': '2022-12-21T06:54:32.684-08:00', 'name': 'shubham-m-no-idle-deletion-m', 'tags': {'items': ['allow-internet', 'dataproc-notebook-vm', 'dproc-internal'], 'fingerprint': 'Zi7AyqiaFVA='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.45', 'name': 'nic0', 'fingerprint': 'WSKwgpKItMA=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-m', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'kSmgz51NfiM=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'false'}, {'key': 'dataproc-notebooks-url', 'value': 'https://3jvljjqxubgjnfk7omjhtrylhm-dot-northamerica-northeast1.dataproc.googleusercontent.com/gateway/default/jupyter/'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Master'}, {'key': 'node-group-roles', 'value': 'MASTER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-m', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'fakfliNmb2U=', 'lastStartTimestamp': '2023-05-10T09:04:19.517-07:00', 'lastStopTimestamp': '2023-05-11T10:55:36.532-07:00'}
{'kind': 'compute#instance', 'id': '1130920696718729416', 'creationTimestamp': '2022-12-21T06:54:32.497-08:00', 'name': 'shubham-m-no-idle-deletion-w-0', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.36', 'name': 'nic0', 'fingerprint': 'tH18lYToEaI=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-0', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'tW1DfDxiNhA=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-0'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-0', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'k1leUpgfcCM=', 'lastStartTimestamp': '2023-05-10T09:04:12.604-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.823-07:00'}
{'kind': 'compute#instance', 'id': '120869359362941128', 'creationTimestamp': '2022-12-21T06:54:32.256-08:00', 'name': 'shubham-m-no-idle-deletion-w-1', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.44', 'name': 'nic0', 'fingerprint': '2cSQCEVmoNo=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-1', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'qPaBavlPw9A=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-1'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-1', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'pCkCP9RwVLs=', 'lastStartTimestamp': '2023-05-10T09:04:12.312-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.800-07:00'}
{'kind': 'compute#instance', 'id': '4412906757522628808', 'creationTimestamp': '2022-12-21T06:54:32.510-08:00', 'name': 'shubham-m-no-idle-deletion-w-2', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.38', 'name': 'nic0', 'fingerprint': 'sUzwrLqg4Hk=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-2', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'CZgyayO0BE8=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-2'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-2', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'OUNGs-lakac=', 'lastStartTimestamp': '2023-05-10T09:04:12.789-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.748-07:00'}
{'kind': 'compute#instance', 'id': '4595180608309600456', 'creationTimestamp': '2022-12-21T06:54:32.404-08:00', 'name': 'shubham-m-no-idle-deletion-w-3', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.31', 'name': 'nic0', 'fingerprint': 'taIViAjGiyg=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-3', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'S9PSoVZ4Q_Y=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-3'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-3', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'xTi4USz2OFw=', 'lastStartTimestamp': '2023-05-10T09:04:12.807-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.938-07:00'}
***********************
{'kind': 'compute#instance', 'id': '2515858426337737366', 'creationTimestamp': '2021-11-29T08:48:58.145-08:00', 'name': 'dphub-pmoto', 'tags': {'items': ['allow-internet', 'deeplearning-vm', 'notebook-instance'], 'fingerprint': 'iTcdl3DMI1Q='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n1-standard-8', 'status': 'RUNNING', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/global/networks/vpc-bf-pre', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-bfpre-app-nane', 'networkIP': '10.196.32.215', 'name': 'nic0', 'fingerprint': '57-DuXjQ6hU=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/dphub-pmoto', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-tensorflow', 'https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-dl-platform-gvnic', 'https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-dl-platform-common-container', 'https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-dl-platform-debian-10', 'https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-dl-platform-dlvm', 'https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-dl-platform-dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '500'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': '3aOH0TrIRk4=', 'items': [{'key': 'agent-env-file', 'value': 'gs://dataproc-spawner-dist/env-agent'}, {'key': 'agent-health-check-path', 'value': '/hub/health'}, {'key': 'container', 'value': 'gcr.io/cloud-dataproc/dataproc-spawner:prod'}, {'key': 'container-env-file', 'value': 'gs://sb-dia-pmoto-dp-hub-upr-01/sbdataprochub_env'}, {'key': 'container-use-host-network', 'value': 'True'}, {'key': 'framework', 'value': 'Dataproc Hub'}, {'key': 'instance-subnet-uri', 'value': 'https://www.googleapis.com/compute/v1/projects/lcl-net-svc/regions/northamerica-northeast1/subnetworks/snet-bfpre-app-nane'}, {'key': 'jupyterhub-host-type', 'value': 'ain'}, {'key': 'notebooks-api', 'value': 'PROD'}, {'key': 'proxy-mode', 'value': 'use_iam'}, {'key': 'restriction', 'value': ''}, {'key': 'shutdown-script', 'value': '/opt/deeplearning/bin/shutdown_script.sh'}, {'key': 'title', 'value': 'Base.Container.GPU'}, {'key': 'version', 'value': '86'}, {'key': 'proxy-url', 'value': '28c39d1dd0db15b9-dot-northamerica-northeast1.notebooks.googleusercontent.com'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/userinfo.email']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/dphub-pmoto', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Intel Skylake', 'labelFingerprint': '42WmSpB8rSM=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'mt8i1qTF4Aw=', 'lastStartTimestamp': '2023-01-16T13:01:56.370-08:00', 'lastStopTimestamp': '2023-01-16T13:01:37.915-08:00'}
{'kind': 'compute#instance', 'id': '2136322796401107144', 'creationTimestamp': '2022-12-21T06:54:32.684-08:00', 'name': 'shubham-m-no-idle-deletion-m', 'tags': {'items': ['allow-internet', 'dataproc-notebook-vm', 'dproc-internal'], 'fingerprint': 'Zi7AyqiaFVA='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.45', 'name': 'nic0', 'fingerprint': 'WSKwgpKItMA=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-m', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'kSmgz51NfiM=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'false'}, {'key': 'dataproc-notebooks-url', 'value': 'https://3jvljjqxubgjnfk7omjhtrylhm-dot-northamerica-northeast1.dataproc.googleusercontent.com/gateway/default/jupyter/'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Master'}, {'key': 'node-group-roles', 'value': 'MASTER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-m', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'fakfliNmb2U=', 'lastStartTimestamp': '2023-05-10T09:04:19.517-07:00', 'lastStopTimestamp': '2023-05-11T10:55:36.532-07:00'}
{'kind': 'compute#instance', 'id': '1130920696718729416', 'creationTimestamp': '2022-12-21T06:54:32.497-08:00', 'name': 'shubham-m-no-idle-deletion-w-0', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.36', 'name': 'nic0', 'fingerprint': 'tH18lYToEaI=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-0', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'tW1DfDxiNhA=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-0'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-0', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'k1leUpgfcCM=', 'lastStartTimestamp': '2023-05-10T09:04:12.604-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.823-07:00'}
{'kind': 'compute#instance', 'id': '120869359362941128', 'creationTimestamp': '2022-12-21T06:54:32.256-08:00', 'name': 'shubham-m-no-idle-deletion-w-1', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.44', 'name': 'nic0', 'fingerprint': '2cSQCEVmoNo=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-1', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'qPaBavlPw9A=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-1'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-1', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'pCkCP9RwVLs=', 'lastStartTimestamp': '2023-05-10T09:04:12.312-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.800-07:00'}
{'kind': 'compute#instance', 'id': '4412906757522628808', 'creationTimestamp': '2022-12-21T06:54:32.510-08:00', 'name': 'shubham-m-no-idle-deletion-w-2', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.38', 'name': 'nic0', 'fingerprint': 'sUzwrLqg4Hk=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-2', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'CZgyayO0BE8=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-2'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-2', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'OUNGs-lakac=', 'lastStartTimestamp': '2023-05-10T09:04:12.789-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.748-07:00'}
{'kind': 'compute#instance', 'id': '4595180608309600456', 'creationTimestamp': '2022-12-21T06:54:32.404-08:00', 'name': 'shubham-m-no-idle-deletion-w-3', 'tags': {'items': ['allow-internet', 'dproc-internal'], 'fingerprint': 'Xcemqk8oBag='}, 'machineType': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/machineTypes/n2-highmem-4', 'status': 'TERMINATED', 'zone': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b', 'networkInterfaces': [{'kind': 'compute#networkInterface', 'network': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/global/networks/lt-dia-pmoto-vpc', 'subnetwork': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/regions/northamerica-northeast1/subnetworks/snet-comp-pmoto-nane', 'networkIP': '10.162.0.31', 'name': 'nic0', 'fingerprint': 'taIViAjGiyg=', 'stackType': 'IPV4_ONLY'}], 'disks': [{'kind': 'compute#attachedDisk', 'type': 'PERSISTENT', 'mode': 'READ_WRITE', 'source': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/disks/shubham-m-no-idle-deletion-w-3', 'deviceName': 'persistent-disk-0', 'index': 0, 'boot': True, 'autoDelete': True, 'licenses': ['https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/licenses/dataproc'], 'interface': 'SCSI', 'guestOsFeatures': [{'type': 'VIRTIO_SCSI_MULTIQUEUE'}, {'type': 'SEV_CAPABLE'}, {'type': 'UEFI_COMPATIBLE'}, {'type': 'GVNIC'}], 'diskSizeGb': '1000'}], 'metadata': {'kind': 'compute#metadata', 'fingerprint': 'S9PSoVZ4Q_Y=', 'items': [{'key': 'PIP_PACKAGES', 'value': 'pandas>=1.0.1 numpy>=1.15.0 statsmodels>=0.11.0 scipy>=1.4.1 optbinning>=0.12.1 m2cgen==0.9.0 xgboost==1.4.2 lightgbm==3.2.1 sklearn-contrib-lightning==0.6.1 accumulation-tree==0.6.2 kiwisolver==1.3.1'}, {'key': 'dataproc-bucket', 'value': 'lt-dia-pmoto-dis-upr-dp-1'}, {'key': 'dataproc-cloud-logging-enabled', 'value': 'false'}, {'key': 'dataproc-cluster-configuration-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/'}, {'key': 'dataproc-cluster-name', 'value': 'shubham-m-no-idle-deletion'}, {'key': 'dataproc-cluster-uuid', 'value': '3032a65a-38b9-4b90-981d-1b28b23aa84b'}, {'key': 'dataproc-initialization-script-0', 'value': 'gs://goog-dataproc-initialization-actions-northamerica-northeast1/python/pip-install.sh'}, {'key': 'dataproc-initialization-script-1', 'value': 'gs://lt-dia-pmoto-dis-upr-01/jars_connectors.sh'}, {'key': 'dataproc-initialization-script-count', 'value': '2'}, {'key': 'dataproc-initialization-script-timeout-sec-0', 'value': '600'}, {'key': 'dataproc-initialization-script-timeout-sec-1', 'value': '600'}, {'key': 'dataproc-master', 'value': 'shubham-m-no-idle-deletion-m'}, {'key': 'dataproc-master-additional', 'value': ''}, {'key': 'dataproc-region', 'value': 'northamerica-northeast1'}, {'key': 'dataproc-temp-bucket', 'value': 'dataproc-temp-na-northeast1-665550607499-edwy5sud'}, {'key': 'dataproc-worker-count', 'value': '4'}, {'key': 'has-driver-pool', 'value': 'false'}, {'key': 'master-run-driver-location', 'value': 'LOCAL'}, {'key': 'spark-avro', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-avro_2.11-3.2.0.jar'}, {'key': 'spark-bigquery-connector-url', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-bigquery-latest_2.12.jar'}, {'key': 'spark-nlp', 'value': 'gs://lt-dia-pmoto-dis-upr-01/spark-nlp-spark24_2.11-3.1.2.jar'}, {'key': 'teradata_jdbc_driver', 'value': 'gs://lt-dia-pmoto-dis-upr-01/terajdbc4.jar'}, {'key': 'dataproc-agent-output-directory', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/shubham-m-no-idle-deletion-w-3'}, {'key': 'dataproc-cluster-properties', 'value': 'ZIPPY:eJyVV11v4jgUfedXIM3rxkNSvoqUB2aa2Xa3hYowuzurSshxDBjiOGM7Gdhfv9cJFFKcMqNKgba+zvU55557/eFzkitNZTuTIqNSM6paH/6mcfuOkrbntjv9Ua87unHbz+G87XU8rxVjjWExeRntsUxRIlYOXq0kXWHNRIpoiqOExr6WOT1be/yG4LHbI7yiqYa1cSZYqv211pl6GX38mAqp15hTyQh2yl8oVtpFr+EkEXmMVkKsEoqI4B9bKsNy+zIqP1CZEuaIUy7k3u93O7wVM6VJ9jLisAONc0LR4WODC4xEppXv/MN3g/6Qt0z84WCpiCnHKWQqEY5jSZXyO6j8eRkNO16/tY6XkDQ8UAopm/VIUSLSGMs9Ko/kXATeDvu31wOtcUNbXONrBm4dGfU9QSQSdX4qSM6hgW+IZDkqiIAdffccEfiDyCV5ReUMIWclMaHLPHFiOAjnTCkQg6MZpyLXDpxO+UNgo2N55UZER0ZUIn4ojaU21GYJ1TSGdeZct736ceiOklwLeWTa9YZ9w/Wl4BRZw+YJ5MvxzgGUSS4lqM+B9yrfG1oyOmJRbo145A86gxvb3rCbliJBGqstRH3PqdIIBE1lgRPEWZIw5fc6cOwTdSb4RN2ltIDpnl0hsmCEyoy80q3WeQTV4nAoFYfFCQX0ATSDPDca7bnXK9Co4QeNlCBbCpXQVLZcpAzgZukKAUFkG0tWAKRVvL/EibKGAUCKyH2mzVsLFp9Cml5EKj9ytE4A0QwswDHiczDRrGB6XwUadb6MAJ6VQlECuSPF/qO+e9P13MEASK2J5ZAs8D+jKk90aNZ2O7d9bpfjGhzDMC9ByxC4R+ZXsJsEA+hCrhDOMKgKrXEsRIZOsYWH1grdV+EhEEblIy1oEkehxpqGZpuw4rGh9uqe1Ov3hqccK3PLzl8IVnesSlO2zmvZXhMrS0GhLK4826pYyw4/hNwCjgQYEhyimEaGFuAY9BFTf/Z1svgUfJnOgkUYzP56+ByEDVVbpeldOZpxEpzGzhs8alvmDBmR+B2LzxtAT0XsdrxuaWcOTYuX0bfxbLKYPzwFjw+TwKQbzBb3wfg5fPg3AHHUEKiKpSYmyjO9B7rkQcnWl1s6zDVilJYUjh7nsuIGrNPvQzKV4g+KUyo5GrkpLC2ISJQ/fwwL97fyiY6fXrMDRFDG0IERi/2bTZFsNt93ebTapMvtQPDNWst9sq51xJqTMp5zBydQe7gynAi81Lv13iI8C8Lp19nn4Gk8Gf/+HsQc0mIcOuBCpMn+YCkW27QZZt9STZXMBVKgDkO/1+vbsIABQ+qIYliDjfGgZenjKdmX0N+c52g61dEbtHBWRF1rpyai7GDd9zwdjCSNDa5E5DANee93SSjvXlM/saLTPTuCYtBX2ZKBcBQBBwA/Pzdkuyn9TCPkmUihSFTpCAWYnb/Js72ZLLep2LVLyTllHb3PwsFj6iw4bqtSfiWs+/HddPq8uBvPx5PpXbCYPs/Dyh9cj9d6A6cam5cgUhp2rV1ZIGQZsSI4aCgDsMDLMnB/1rDfwfOyR0c4TWmj2VxMLKXZrcGpwDPgiZZUk3VVE2A3YGBmPvNT4Kxp5rX1le7VxVUGJzewjRJVnf1SF7HUDqiYgn7h7L8yEXXe+pMR0IU33XiDo6XUFPfH9NPi/iGcT2ffrB2jcZS0tXVipgiYaJxXQV0I7LgESSE0iukSw/SChIQ5CirXyUTCiLFKJq9PvgdmcgVuBfP0m9vBaamh4Mv4YdZ027BeNqzjQiXiLI8gS7QWSpt9Tne95qbjxEI7V6+C1SUQziNNAzWVAi5ky6M0YaphI3WcY08jT9Vf7fNidbUYureedd/zIlW0vPEQIbaM+oudkkv76BOkBZo+B5NPj+NwMfn6tJjfz4LxXei7DaMSS2HgTkk5LpX/qhQZPo9nf4IFBk/TyeIJnrNvpQZtI+3ho3avs7Fb60LdTut/cDXUzA=='}, {'key': 'dataproc-cluster-properties-file', 'value': 'gs://lt-dia-pmoto-dis-upr-dp-1/google-cloud-dataproc-metainfo/3032a65a-38b9-4b90-981d-1b28b23aa84b/cluster.properties'}, {'key': 'dataproc-datanode-enabled', 'value': 'true'}, {'key': 'dataproc-option-run-init-actions-early', 'value': 'true'}, {'key': 'dataproc-protocol-spec', 'value': 'EnAKNmRhdGFwcm9jY29udHJvbC1ub3J0aGFtZXJpY2Etbm9ydGhlYXN0MS5nb29nbGVhcGlzLmNvbRI2ZGF0YXByb2Njb250cm9sLW5vcnRoYW1lcmljYS1ub3J0aGVhc3QxLmdvb2dsZWFwaXMuY29t'}, {'key': 'dataproc-role', 'value': 'Worker'}, {'key': 'node-group-roles', 'value': 'PRIMARY_WORKER'}]}, 'serviceAccounts': [{'email': 'sa-pmoto-dis-upr-dp@lt-dia-pmoto-dis-upr.iam.gserviceaccount.com', 'scopes': ['https://www.googleapis.com/auth/bigquery', 'https://www.googleapis.com/auth/bigtable.admin.table', 'https://www.googleapis.com/auth/bigtable.data', 'https://www.googleapis.com/auth/cloud.useraccounts.readonly', 'https://www.googleapis.com/auth/devstorage.full_control', 'https://www.googleapis.com/auth/devstorage.read_write', 'https://www.googleapis.com/auth/logging.write']}], 'selfLink': 'https://www.googleapis.com/compute/v1/projects/lt-dia-pmoto-dis-upr/zones/northamerica-northeast1-b/instances/shubham-m-no-idle-deletion-w-3', 'scheduling': {'onHostMaintenance': 'MIGRATE', 'automaticRestart': True, 'preemptible': False, 'provisioningModel': 'STANDARD'}, 'cpuPlatform': 'Unknown CPU Platform', 'labels': {'goog-dataproc-cluster-uuid': '3032a65a-38b9-4b90-981d-1b28b23aa84b', 'goog-dataproc-location': 'northamerica-northeast1', 'goog-dataproc-cluster-name': 'shubham-m-no-idle-deletion'}, 'labelFingerprint': 'pPr6wJBT8tk=', 'startRestricted': False, 'deletionProtection': False, 'shieldedInstanceConfig': {'enableSecureBoot': False, 'enableVtpm': True, 'enableIntegrityMonitoring': True}, 'shieldedInstanceIntegrityPolicy': {'updateAutoLearnPolicy': True}, 'fingerprint': 'xTi4USz2OFw=', 'lastStartTimestamp': '2023-05-10T09:04:12.807-07:00', 'lastStopTimestamp': '2023-05-11T10:56:52.938-07:00'}
***********************

instance-3 , playground-aps-sre-sb
test-notebook-1 , playground-aps-sre-sb
testssh , playground-aps-sre-sb
tfclonetestanslwr001 , playground-aps-sre-sb
vm-scheduling , playground-aps-sre-sb
instance-2 , playground-aps-sre-sb
vwapssredev001 , playground-aps-sre-sb
